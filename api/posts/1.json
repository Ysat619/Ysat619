{"total":20,"pageSize":12,"pageCount":2,"data":[{"title":"英语语法 - 笔记(updating)","uid":"cf81b77854f2dfe44d1ede9201191a9c","slug":"english/grammar-note","date":"2022-09-28T03:19:49.000Z","updated":"2022-09-28T04:03:45.135Z","comments":true,"path":"api/articles/english/grammar-note.json","cover":[],"text":" 速查表常见缩写 Abbreviation Original Abbreviation Original aren’t are not can’t cannot hadn’t had not wasn’t was not shouldn’t Should not isn’t is...","link":"","photos":[],"count_time":{"symbolsCount":"31k","symbolsTime":"28 mins."},"categories":[{"name":"英语","slug":"英语","count":2,"path":"api/categories/英语.json"}],"tags":[{"name":"英语","slug":"英语","count":2,"path":"api/tags/英语.json"},{"name":"笔记","slug":"笔记","count":2,"path":"api/tags/笔记.json"}],"author":{"name":"Jx","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Using Clash in Linux Server","uid":"44e789181d3b4bef6dfcd4ebb07b6454","slug":"system/Using Clash in Linux Server","date":"2022-08-07T01:34:49.000Z","updated":"2022-08-07T02:12:57.693Z","comments":true,"path":"api/articles/system/Using Clash in Linux Server.json","cover":null,"text":" Background: Too slow to install some dependent environments DownloadWe can go to the Clash Releases Page and find the corresponding system ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"操作系统","slug":"操作系统","count":2,"path":"api/categories/操作系统.json"}],"tags":[{"name":"linux","slug":"linux","count":2,"path":"api/tags/linux.json"}],"author":{"name":"Jx","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"阿里云 ACP 云原生微服务","uid":"31cb8022faa8493f1aedc9b9cc8dea4f","slug":"exam/AliyunACP","date":"2022-07-27T00:59:03.000Z","updated":"2022-08-21T17:02:53.515Z","comments":true,"path":"api/articles/exam/AliyunACP.json","cover":[],"text":" 考点总结 ","link":"","photos":[],"count_time":{"symbolsCount":7,"symbolsTime":"1 mins."},"categories":[{"name":"应试","slug":"应试","count":3,"path":"api/categories/应试.json"}],"tags":[{"name":"考证","slug":"考证","count":1,"path":"api/tags/考证.json"}],"author":{"name":"Jx","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"高等数学 - 笔记(updating)","uid":"6bdddc8b42ef6d479e6e06377184681c","slug":"math/advanced mathematics","date":"2022-07-14T05:11:25.000Z","updated":"2022-08-07T02:14:38.239Z","comments":true,"path":"api/articles/math/advanced mathematics.json","cover":null,"text":" 函数与极限无穷小与无穷大无穷小定义 1：如果函数 当 （或 ）时的极限为零，那么称函数 为当 （或 ）时的无穷小 定理 1：在自变量的同一变化过程 （或） 中，函数 具有机极限的充分必要条件是 ，其中 是无穷小。 无穷大定义 2：设函数 在 的某一去心邻域内有定义（或 大于某一...","link":"","photos":[],"count_time":{"symbolsCount":543,"symbolsTime":"1 mins."},"categories":[{"name":"数学","slug":"数学","count":1,"path":"api/categories/数学.json"}],"tags":[{"name":"高数","slug":"高数","count":1,"path":"api/tags/高数.json"}],"author":{"name":"Jx","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"一些好用但鲜为人知的 Linux 命令","uid":"5e7254d63639ed21d8e1e8e2812eb98c","slug":"system/Some important Linux commands","date":"2022-07-08T03:15:20.000Z","updated":"2022-07-14T04:43:58.290Z","comments":true,"path":"api/articles/system/Some important Linux commands.json","cover":null,"text":"系统监视UptimeUptime会返回服务器运行时长、当前时间、用户数量和内存使用平均数等信息。 $ uptime WallWall可以向当前登录到系统的每个人的终端发送消息 $ wall &quot;Your message&quot; Top实时显示 CPU 和内存使用情况的...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"操作系统","slug":"操作系统","count":2,"path":"api/categories/操作系统.json"}],"tags":[{"name":"linux","slug":"linux","count":2,"path":"api/tags/linux.json"}],"author":{"name":"Jx","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Spring Security Note（TODO）","uid":"c86bf2873749be4c9a292e4ee1b5c907","slug":"backend/SpringSecurityNote","date":"2022-06-05T07:34:41.000Z","updated":"2022-07-14T04:43:58.382Z","comments":true,"path":"api/articles/backend/SpringSecurityNote.json","cover":null,"text":" 简介Spring Security 是 Spring 家族中的一个安全管理框架。 一般 Web 应用需要进行认证和授权 认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户 授权：经过认证后判断当前用户是否有权限进行某个操作 Quick start认证（Auth...","link":"","photos":[],"count_time":{"symbolsCount":366,"symbolsTime":"1 mins."},"categories":[{"name":"后端","slug":"后端","count":1,"path":"api/categories/后端.json"}],"tags":[{"name":"后端","slug":"后端","count":1,"path":"api/tags/后端.json"}],"author":{"name":"Jx","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"转-HumanSystemOptimization","uid":"635215656b0faa819fe0d4b468a19e3e","slug":"life/HumanSystemOptimization","date":"2022-05-31T16:46:27.000Z","updated":"2022-07-14T04:43:58.290Z","comments":true,"path":"api/articles/life/HumanSystemOptimization.json","cover":null,"text":" 原文: https://github.com/zijie0/HumanSystemOptimization 背景去年 5 月曾经写了一篇文章介绍了下 Lex Fridman 大佬的日常生活安排，后续我也根据他的方法对自己的日常生活做了一系列规范和改进。这一年整体实行下来，效果还...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"生活","slug":"生活","count":2,"path":"api/categories/生活.json"}],"tags":[{"name":"人生","slug":"人生","count":2,"path":"api/tags/人生.json"}],"author":{"name":"Jx","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"半个月突击 CET4 的笔记","uid":"e3a0de21daf88340e00c75757650a755","slug":"english/CET4","date":"2022-05-25T09:59:41.000Z","updated":"2022-07-14T04:43:58.311Z","comments":true,"path":"api/articles/english/CET4.json","cover":null,"text":"作文模板议论文（essay） 三个段落（ 10-11 句） 第一段（2-3 句） 前 1-2 句提出你的问题（你对这个问题的看法是什么，好还是不好，应不应该这样做） 第 3 句过渡句 现象解释 Keyword: Why, what 第一句：With the rapid devel...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"英语","slug":"英语","count":2,"path":"api/categories/英语.json"}],"tags":[{"name":"英语","slug":"英语","count":2,"path":"api/tags/英语.json"},{"name":"笔记","slug":"笔记","count":2,"path":"api/tags/笔记.json"}],"author":{"name":"Jx","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"各种数据范围下的算法选择","uid":"a5751cb68211f766011de586416700ec","slug":"algorithm/根据数据范围反推算法","date":"2022-04-08T02:43:04.000Z","updated":"2022-07-14T04:43:58.400Z","comments":true,"path":"api/articles/algorithm/根据数据范围反推算法.json","cover":null,"text":" 数据范围 时间复杂度 算法 DFS+剪枝，状态压缩 DP DP，Floyd，高斯消元 , DP，二分，朴素版 Dijkstra、朴素版 Prim、Bellman-Ford 块状链表、分块、莫队 Sort、线段树、树状数组、Set、Map、Heap、拓扑排序、Dijkstra+H...","link":"","photos":[],"count_time":{"symbolsCount":394,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":3,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":2,"path":"api/tags/算法.json"},{"name":"技巧","slug":"技巧","count":1,"path":"api/tags/技巧.json"}],"author":{"name":"Jx","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"PTA-L3-003 社交集群(30 分)","uid":"da2d8763fa18b31af06ba8fb8f150918","slug":"algorithm/PTA-L3-003","date":"2022-04-05T08:00:41.000Z","updated":"2022-07-14T04:41:18.587Z","comments":true,"path":"api/articles/algorithm/PTA-L3-003.json","cover":[],"text":" 题目链接：PTA-L3-003 社交集群(30 分) 题目背景当你在社交网络平台注册时，一般总是被要求填写你的个人兴趣爱好，以便找到具有相同兴趣爱好的潜在的朋友。一个“社交集群”是指部分兴趣爱好相同的人的集合。你需要找出所有的社交集群。 输入格式输入在第一行给出一个正整数 ，为...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"算法","slug":"算法","count":3,"path":"api/categories/算法.json"}],"tags":[{"name":"并查集","slug":"并查集","count":1,"path":"api/tags/并查集.json"},{"name":"题解","slug":"题解","count":1,"path":"api/tags/题解.json"}],"author":{"name":"Jx","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"矩阵快速幂","uid":"2fb6f73465144858123c433ce6781558","slug":"algorithm/矩阵快速幂","date":"2022-03-28T08:00:41.000Z","updated":"2022-07-14T04:43:58.382Z","comments":true,"path":"api/articles/algorithm/矩阵快速幂.json","cover":null,"text":" 引例（洛谷P3390）题目描述给定一个的矩阵，求。 输入格式第一行两个整数 接下来 行，每行 个整数，第 行的第 的数表示 。 输出格式输出 共 行，每行 个数，第 行第 个数表示 ，每个元素对取模。 输入输出样例输入 #12 1 1 1 1 1 输出 #11 1 1 1 数据...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"算法","slug":"算法","count":3,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":2,"path":"api/tags/算法.json"},{"name":"矩阵","slug":"矩阵","count":1,"path":"api/tags/矩阵.json"},{"name":"快速幂","slug":"快速幂","count":1,"path":"api/tags/快速幂.json"}],"author":{"name":"Jx","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"一文搞懂树状数组","uid":"b6bea84273156013b3326c84401baf8a","slug":"data-structure/binary-indexed-tree","date":"2022-02-17T10:00:41.000Z","updated":"2022-07-14T04:43:58.382Z","comments":true,"path":"api/articles/data-structure/binary-indexed-tree.json","cover":[],"text":" 介绍树状数组是由Peter M. Fenwick提出的二叉索引树（Binary Indexed Trees）结构，最初用于数据压缩。在算法竞赛中，常用于区间操作。 类似的数据结构还有线段树，线段树可以实现树状数组所有的操作，甚至更多。而树状数组代码简洁，运行速度也线段树快，占用...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":3,"path":"api/categories/数据结构.json"}],"tags":[{"name":"树状数组","slug":"树状数组","count":1,"path":"api/tags/树状数组.json"},{"name":"数据结构","slug":"数据结构","count":1,"path":"api/tags/数据结构.json"}],"author":{"name":"Jx","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}