{"title":"关于词法分析器","uid":"b2e8bcbdec10f29357ad50f8134a27a8","slug":"complier/lexical_anaylzer","date":"2023-12-24T02:20:13.000Z","updated":"2023-12-26T11:13:15.662Z","comments":true,"path":"api/articles/complier/lexical_anaylzer.json","keywords":null,"cover":[],"content":"<h2 id=\"词法分析器\"><a href=\"#词法分析器\" class=\"headerlink\" title=\"词法分析器\"></a>词法分析器</h2><p>我们可以知道词法分析器的输入是源程序，输出的是一个记号，当词法分析器从左到右一个一个读入源程序的时候，会对每个词素进行归类，例如：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\">(a </span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    b </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> a </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">} </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    b </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> a </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span>\n<span class=\"line\"><span style=\"color: #50FA7B\">printf</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">b is:</span><span style=\"color: #BD93F9\">%d</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, b);</span></span></code></pre></div><p>在上面代码中词素指的是<code>if</code>, <code>a</code> 等等，以及我们看不见的<code>空格</code>和<code>换行符</code>，就是最小的有意义单位。当词法分析器读到 <code>if</code> 的时候，就会将其认定为保留字，然后再读<code>(</code> 将其认定为左括号，再读到<code>a</code>，将其认定为标识符（identity）。</p>\n<h3 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h3><p>目前比较主流的实现词法分析器的方法有两种：</p>\n<ol>\n<li>手工编码</li>\n<li>自动生成</li>\n</ol>\n<p>所谓<strong>手工编码</strong>其实就是开发者手搓一个词法分析器出来，比如 GCC 和 LLVM 其实都是用的手工编码的方式实现的，这样的优点是执行效率很高，能够更加灵活地定制需求</p>\n<p>而<strong>自动生成</strong>则是用一些专门的工具（如Lex、Flex），根据我们给定的规则去自动生成词法分析器的代码，优点显然就是时间成本低了，但比较难去控制细节</p>\n<h3 id=\"转移图\"><a href=\"#转移图\" class=\"headerlink\" title=\"转移图\"></a>转移图</h3><p><img src=\"https://joshlee-blog-images.oss-cn-shenzhen.aliyuncs.com/202312061703189.png\"></p>\n<h3 id=\"关键字表算法\"><a href=\"#关键字表算法\" class=\"headerlink\" title=\"关键字表算法\"></a>关键字表算法</h3><ol>\n<li>对所有的关键字，构造出一个哈希表H。</li>\n<li>对所有的标识符和关键字，先统一按标识符的转移进行识别</li>\n<li>识别完成后，再进一步用哈希表 H 去分辨哪些标识符为关键字</li>\n</ol>\n<p>对于关键字表，我们可以用完美哈希算法（Perfect Hashing）来实现，以达到最高的效率</p>\n<p>完美哈希通常分为两级：</p>\n<ol>\n<li>第一级哈希（First-Level Hash）：选择或构造一个哈希函数，将关键字映射到一个较大的中间空间，目的是尽量减少冲突。</li>\n<li>第二级哈希（Second-Level Hash）：对于第一级哈希中出现冲突的关键字集合，为每个集合再次选择或构造一个哈希函数，确保这些关键字映射到不同的哈希值上。</li>\n</ol>\n<p>实现步骤大致如下：</p>\n<ol>\n<li>收集所有关键字：确定编程语言的所有保留关键字。</li>\n<li>构造第一级哈希函数：找到一个哈希函数，使得关键字尽量均匀分布在哈希表中，并且冲突较少。</li>\n<li>分析冲突：对于第一级哈希中的冲突，将冲突的关键字分到同一个组。</li>\n<li>为每个组构造第二级哈希函数：对于每个冲突组，构造一个新的哈希函数，确保组内关键字不会产生冲突。</li>\n<li>创建最终的哈希表：使用第一级哈希函数确定关键字的第一级索引，然后使用第二级哈希函数确定最终的哈希表中的位置。</li>\n</ol>\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><h4 id=\"语法糖\"><a href=\"#语法糖\" class=\"headerlink\" title=\"语法糖\"></a>语法糖</h4><ul>\n<li><code>[c1-cn]</code> == c1 | c2 | c3 | … | cn</li>\n<li><code>e+</code> == 一个或多个 e</li>\n<li><code>e?</code> == 0 个或 1 个 e</li>\n<li><code>\"a*\"</code> == 0 个或多个 e</li>\n<li><code>e{i, j}</code> == i 到 j 个 e 的连接</li>\n<li><code>.</code> == 除<code>\\n</code> 以外的任意字符</li>\n</ul>\n<h3 id=\"有限状态自动机（FA）\"><a href=\"#有限状态自动机（FA）\" class=\"headerlink\" title=\"有限状态自动机（FA）\"></a>有限状态自动机（FA）</h3><p>什么是串被“接受”？词法分析器开始读入字符，被状态转移函数 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.919ex\" height=\"1ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -431 406 442\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D716\" d=\"M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z\"></path></g></g></g></svg></mjx-container> 驱动，一个个地读入字符，直到字符读完了，并且落到的状态是在终止状态的话，就称这个串为能被自动机所接受。</p>\n<h4 id=\"确定的有限自动机（DFA）\"><a href=\"#确定的有限自动机（DFA）\" class=\"headerlink\" title=\"确定的有限自动机（DFA）\"></a>确定的有限自动机（DFA）</h4><p>DFA 的实现</p>\n<h4 id=\"非确定的有限自动机（NFA）\"><a href=\"#非确定的有限自动机（NFA）\" class=\"headerlink\" title=\"非确定的有限自动机（NFA）\"></a>非确定的有限自动机（NFA）</h4><h3 id=\"RE-to-NFA（Thompson-算法）\"><a href=\"#RE-to-NFA（Thompson-算法）\" class=\"headerlink\" title=\"RE to NFA（Thompson 算法）\"></a>RE to NFA（Thompson 算法）</h3><h3 id=\"NFA-to-DFA（子集构造算法）\"><a href=\"#NFA-to-DFA（子集构造算法）\" class=\"headerlink\" title=\"NFA to DFA（子集构造算法）\"></a>NFA to DFA（子集构造算法）</h3><p>首先，为什么要将 NFA 转换为 DFA 呢？原因很简单，NFA 在实际的计算机程序中并不好实现，会导致很多回溯，这会在实现的时候增加复杂性。在大多数的词法分析器中（如 Lex），都会先将正则表达式转换为 NFA，再用子集构造算法将 NFA 转换为 DFA。</p>\n<p>下面直接引入一个实例讲讲如何用<strong>子集构造算法(the subset construction)</strong> 将一个 NFA 转换为 DFA，其实这个算法的本质就是：维持自动机状态转移的逻辑性的同时，将一个或多个状态构造成为一个子集，用这个子集去等价地代替若干节点，在不失自动机运行逻辑的同时，消除了 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.919ex\" height=\"1ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -431 406 442\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D716\" d=\"M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z\"></path></g></g></g></svg></mjx-container> 转移。</p>\n<p>举一个实例，有 NFA 如下：</p>\n<p><img src=\"https://joshlee-blog-images.oss-cn-shenzhen.aliyuncs.com/202312121503529.png\"></p>\n<p>首先我们考虑从起始状态 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.345ex\" height=\"1.375ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1036.6 607.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g></g></g></svg></mjx-container> 出发，读入一个输入字符 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.023ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.197ex\" height=\"1.02ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -441 529 451\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g></g></g></svg></mjx-container> ，也就是走 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.023ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.197ex\" height=\"1.02ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -441 529 451\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g></g></g></svg></mjx-container> 这条边，那么思考一下，可以走到哪个状态呢？</p>\n<p>我们已知 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.919ex\" height=\"1ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -431 406 442\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D716\" d=\"M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z\"></path></g></g></g></svg></mjx-container> 转移，也就是走 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.919ex\" height=\"1ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -431 406 442\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D716\" d=\"M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z\"></path></g></g></g></svg></mjx-container> 这条边是<strong>不需要任何代价</strong>的，无需读入字符都可以进行前进达到下一个状态，那么答案显而易见。为了构造出一个新的状态机 DFA，我们令 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.359ex\" height=\"1.758ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -583 3252.7 777\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1314.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2370.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g></g></g></svg></mjx-container>，从 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.997ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 882.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g></g></g></svg></mjx-container> 出发，走 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.023ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.197ex\" height=\"1.02ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -441 529 451\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g></g></g></svg></mjx-container> 这条边，可以到达<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"19.101ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 8442.7 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1036.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1481.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2517.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2962.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3999,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4443.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5480.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5924.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6961.4,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(7406.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g></g></g></g></svg></mjx-container></p>\n<p>令这一个可走到的状态的集合为 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.997ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 882.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></svg></mjx-container>，即</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 39.034ex;\"><svg style=\"vertical-align: -0.927ex; min-width: 39.034ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"2.985ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -909.6)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 909.6) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"6548.4 -909.6 1 1319.2\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\" transform=\"translate(0,-159.6)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mover\" transform=\"translate(1160.3,0)\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mo\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g></g><g data-mml-node=\"mpadded\" transform=\"translate(18.5,798.8) scale(0.707)\"><g transform=\"translate(278,-200)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(529,0)\"></g></g></g></g><g data-mml-node=\"msub\" transform=\"translate(2438.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3598.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(4654.2,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1036.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1481.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2517.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2962.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3999,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4443.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5480.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5924.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6961.4,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(7406.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -909.6 1 1319.2\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:1\" transform=\"translate(0,590.4)\"><text data-id-align=\"true\"></text><g data-idbox=\"true\" transform=\"translate(0,-750)\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></g></svg></g></g></g></g></svg></mjx-container></p>\n<p>然后我们再从 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.997ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 882.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></svg></mjx-container> 这个新的状态集进行转移，例如 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.997ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 882.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></svg></mjx-container> 读入字符 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.971ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 429 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g></g></g></svg></mjx-container>，<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"15.75ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 6961.4 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1036.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1481.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2517.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2962.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3999,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4443.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5480.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5924.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g></g></g></svg></mjx-container> 都无法接受 b 这个字符，只有 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.345ex\" height=\"1.339ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1036.6 592\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g></g></g></svg></mjx-container> 可以接受 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.971ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 429 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g></g></g></svg></mjx-container> 将状态转移到 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.345ex\" height=\"1.375ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1036.6 607.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></g></g></g></g></svg></mjx-container> ，那么可到达的状态集 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.997ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 882.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></svg></mjx-container> 则为：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 61.152ex;\"><svg style=\"vertical-align: -1.129ex; min-width: 61.152ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"3.389ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -999)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 999) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"11436.5 -999 1 1498.1\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\" transform=\"translate(0,-249)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mover\" transform=\"translate(1160.3,0)\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mo\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g></g><g data-mml-node=\"mpadded\" transform=\"translate(53.8,798.8) scale(0.707)\"><g transform=\"translate(278,-200)\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(429,0)\"></g></g></g></g><g data-mml-node=\"msub\" transform=\"translate(2438.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3598.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(4654.2,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1036.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1481.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2517.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2962.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3999,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4443.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5480.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5924.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6961.4,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(7406.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(13374.6,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(14430.4,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1036.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1481.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2517.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2962.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3999,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4443.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5480.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5924.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6961.4,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(7406.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -999 1 1498.1\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:2\" transform=\"translate(0,501)\"><text data-id-align=\"true\"></text><g data-idbox=\"true\" transform=\"translate(0,-750)\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></g></svg></g></g></g></g></svg></mjx-container></p>\n<p>接下来我们再考虑 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.997ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 882.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></svg></mjx-container> 状态集中的状态能走哪些点，会发现只有 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.345ex\" height=\"1.375ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1036.6 607.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g></g></g></svg></mjx-container>，可以读入一个字符 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.98ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 433 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g></g></g></svg></mjx-container> 走到 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.345ex\" height=\"1.375ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1036.6 607.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"></path></g></g></g></g></svg></mjx-container> ，于是乎 从 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.997ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 882.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></svg></mjx-container> 出发读入字符 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.98ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 433 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g></g></g></svg></mjx-container> 可以走到的状态有：<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"19.101ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 8442.7 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1036.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1481.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2517.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2962.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3999,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4443.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5480.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5924.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6961.4,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(7406.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g></g></g></g></svg></mjx-container>，记为：</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 60.188ex;\"><svg style=\"vertical-align: -0.927ex; min-width: 60.188ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"2.986ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -909.9)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 909.9) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"11223.5 -909.9 1 1319.9\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\" transform=\"translate(0,-159.9)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mover\" transform=\"translate(1160.3,0)\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mo\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g></g><g data-mml-node=\"mpadded\" transform=\"translate(52.4,798.8) scale(0.707)\"><g transform=\"translate(278,-200)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(433,0)\"></g></g></g></g><g data-mml-node=\"msub\" transform=\"translate(2438.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3598.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(4654.2,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1036.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1481.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2517.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2962.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3999,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4443.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5480.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5924.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6961.4,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(7406.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(13374.6,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(14430.4,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(965.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1410.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2375.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2820.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3786,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4230.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5196.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5640.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6606.4,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(7051.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -909.9 1 1319.9\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:3\" transform=\"translate(0,590.1)\"><text data-id-align=\"true\"></text><g data-idbox=\"true\" transform=\"translate(0,-750)\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></g></svg></g></g></g></g></svg></mjx-container></p>\n<p>那么从 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.997ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 882.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></svg></mjx-container> 出发走 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.98ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 433 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g></g></g></svg></mjx-container> 边呢？那其实可以走到的状态集和 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.997ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 882.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g></g></g></svg></mjx-container> 完全一致，我们就算作同一个状态集了，即</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 38.07ex;\"><svg style=\"vertical-align: -0.927ex; min-width: 38.07ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"2.986ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -909.9)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 909.9) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"6335.4 -909.9 1 1319.9\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\" transform=\"translate(0,-159.9)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mover\" transform=\"translate(1160.3,0)\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mo\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g></g><g data-mml-node=\"mpadded\" transform=\"translate(52.4,798.8) scale(0.707)\"><g transform=\"translate(278,-200)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(433,0)\"></g></g></g></g><g data-mml-node=\"msub\" transform=\"translate(2438.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3598.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(4654.2,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(965.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1410.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2375.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2820.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3786,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4230.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5196.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5640.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6606.4,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(7051.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -909.9 1 1319.9\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:4\" transform=\"translate(0,590.1)\"><text data-id-align=\"true\"></text><g data-idbox=\"true\" transform=\"translate(0,-750)\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></g></svg></g></g></g></g></svg></mjx-container></p>\n<p>那 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.997ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 882.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></svg></mjx-container> 走 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.971ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 429 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g></g></g></svg></mjx-container> 呢？实则又回到了自身，即</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 16.916ex;\"><svg style=\"vertical-align: -1.129ex; min-width: 16.916ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"3.389ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -999)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 999) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"1660.3 -999 1 1498.1\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\" transform=\"translate(0,-249)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mover\" transform=\"translate(1160.3,0)\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mo\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g></g><g data-mml-node=\"mpadded\" transform=\"translate(53.8,798.8) scale(0.707)\"><g transform=\"translate(278,-200)\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(429,0)\"></g></g></g></g><g data-mml-node=\"msub\" transform=\"translate(2438.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -999 1 1498.1\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:5\" transform=\"translate(0,501)\"><text data-id-align=\"true\"></text><g data-idbox=\"true\" transform=\"translate(0,-750)\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></g></svg></g></g></g></g></svg></mjx-container></p>\n<p>最后 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.997ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 882.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g></g></g></svg></mjx-container> 同理，无论是通过 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.971ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 429 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g></g></g></svg></mjx-container> 边会回到 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.997ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 882.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></svg></mjx-container>，走 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.98ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 433 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g></g></g></svg></mjx-container> 边则会回到自身，即</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 24.994ex;\"><svg style=\"vertical-align: -1.129ex; min-width: 24.994ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"3.389ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -999)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 999) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"3445.7 -999 1 1498.1\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\" transform=\"translate(0,-249)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mover\" transform=\"translate(1160.3,0)\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mo\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g></g><g data-mml-node=\"mpadded\" transform=\"translate(52.4,798.8) scale(0.707)\"><g transform=\"translate(278,-200)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(433,0)\"></g></g></g></g><g data-mml-node=\"msub\" transform=\"translate(2438.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mtext\" transform=\"translate(3320.7,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"msub\" transform=\"translate(3570.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mover\" transform=\"translate(4731,0)\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mo\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g></g><g data-mml-node=\"mpadded\" transform=\"translate(53.8,798.8) scale(0.707)\"><g transform=\"translate(278,-200)\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(429,0)\"></g></g></g></g><g data-mml-node=\"msub\" transform=\"translate(6008.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -999 1 1498.1\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:6\" transform=\"translate(0,501)\"><text data-id-align=\"true\"></text><g data-idbox=\"true\" transform=\"translate(0,-750)\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></g></svg></g></g></g></g></svg></mjx-container></p>\n<p>最后我们用图将构造出来的子集以及状态转移表示出来，如下：</p>\n<p><img src=\"https://joshlee-blog-images.oss-cn-shenzhen.aliyuncs.com/202312121834217.png\"></p>\n<p>由于 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.002ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 3537 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(882.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1327.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2209.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2654.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g></g></g></svg></mjx-container>中都包含了接受状态 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.345ex\" height=\"1.375ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1036.6 607.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g></g></g></svg></mjx-container>，所以他们都是接受状态</p>\n<h3 id=\"最小化-DFA（Hopcroft-算法）\"><a href=\"#最小化-DFA（Hopcroft-算法）\" class=\"headerlink\" title=\"最小化 DFA（Hopcroft 算法）\"></a>最小化 DFA（Hopcroft 算法）</h3><p>为什么要对 DFA 进行最小化，首先我们得知道最小化是什么，我们要对 DFA 进行最小化其实就是将一些等价的状态给去掉，用共同的一个状态给予表示，以起到<strong>减少状态数量</strong>的作用。在真实计算机表示中，词法分析器一般都是对 DFA 进行模拟，而 DFA 的状态一般是用「图」的数据结构来进行表示的，节点数越少，内存甚至是 cache 的开销就越低，很可能意味着执行效率的提升。</p>\n<p>上面我们已经讨论了如何将一个 NFA 转换为一个 DFA ，我们转换后的 DFA 状态表示其实很有冗余，可以进一步的进行优化。 接下来我们还是会针对那个 DFA 进行优化。</p>\n<p>在开始我们的实例之前，先来个哈人的东西（Hopcroft算法的伪代码）：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">split(S)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    foreach (character c)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        if(c can split s)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            split s into T1, ..., Tk</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">hopcroft()</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    split all node into N, A </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    while(set is still changes)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        split(S)</span></span></code></pre></div><p>是的，在没有任何解释的情况下，看到这串代码会直接懵逼（除非你学过），我们先直接看下面的<code>hopcroft</code>函数都干了些什么。</p>\n<p><code>split all node into N, A </code>，这个的意思是将自动机的所有的状态（node）做第一次划分，划分为 N 和 A 这两个集合，N 集合为<strong>非接受状态集</strong>，S 集合为<strong>接受状态集</strong>，这里啰嗦一句，其实接收状态也就是我们看到的状态转移图中的那些两个圈的状态。</p>\n<p>然后做一个 while 循环，直到什么时候结束呢？直到新的状态集 set 没有改变了就结束，在循环内部调用了一个划分的函数，将 S，即所有的<strong>状态集</strong>传递进去，注意是状态集。</p>\n<p>split 函数里干的事情其实也非常简单，对每一个可能的输入字符进行一个遍历，如果字符 c 的转移能够对 S 进行切分，就将 s 切分为若干的子集 <code>T1, ... , Tk</code>。emm，还是有点抽象，还是来看看实例是怎么运行的吧</p>\n<p>在这里我们再次引用下上面已经展示过的 DFA：</p>\n<p><img src=\"https://joshlee-blog-images.oss-cn-shenzhen.aliyuncs.com/202312121834217.png\"></p>\n<p>首先我们根据算法的思路，将这个DFA 根据接受和非接受划分为两个集合：<br><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 16.857ex;\"><svg style=\"vertical-align: -0.566ex; min-width: 16.857ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"2.262ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -750)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 750) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"1647.3 -750 1 1000\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1356.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(2412.1,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -750 1 1000\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:7\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></svg></g></g></g></g></svg></mjx-container><br><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 22.862ex;\"><svg style=\"vertical-align: -0.566ex; min-width: 22.862ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"2.262ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -750)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 750) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"2974.6 -750 1 1000\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1356.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(2412.1,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(882.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1327.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2209.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2654.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -750 1 1000\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:8\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></svg></g></g></g></g></svg></mjx-container><br>然后我们考虑对 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.44ex\" height=\"1.92ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 1078.6 848.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g></g></g></svg></mjx-container> 进行划分，显然一个节点本身是没有等价类的，无法进一步的划分了。对于<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.44ex\" height=\"1.885ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 1078.6 833\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></svg></mjx-container>我们看有哪些可能得输入字符呢？也就是 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.956ex\" height=\"2.009ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 1306.7 888\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(429,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(873.7,0)\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g></g></g></svg></mjx-container>了吧，那么对于 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.002ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 3537 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(882.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1327.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2209.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2654.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g></g></g></svg></mjx-container>，</p>\n<ul>\n<li>读入一个 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.971ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 429 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g></g></g></svg></mjx-container> 字符，它们都会转移到 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.997ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 882.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></svg></mjx-container> 这个状态，显然无需进行划分，</li>\n<li>而对于读入 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.98ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 433 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g></g></g></svg></mjx-container> 字符，它们都会转移到 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.997ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 882.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(479,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g></g></g></svg></mjx-container> 这个状态，也无需进一步的划分了</li>\n</ul>\n<p>也就是最终我们减少到了只剩下 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.886ex\" height=\"1.984ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 2601.8 877\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1078.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1523.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></svg></mjx-container> 状态，容易得知转移函数有如下：<br><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 17.802ex;\"><svg style=\"vertical-align: -0.927ex; min-width: 17.802ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"2.985ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -909.6)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 909.6) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"1856.3 -909.6 1 1319.2\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\" transform=\"translate(0,-159.6)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mover\" transform=\"translate(1356.3,0)\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mo\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g></g><g data-mml-node=\"mpadded\" transform=\"translate(18.5,798.8) scale(0.707)\"><g transform=\"translate(278,-200)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(529,0)\"></g></g></g></g><g data-mml-node=\"msub\" transform=\"translate(2634.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -909.6 1 1319.2\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:9\" transform=\"translate(0,590.4)\"><text data-id-align=\"true\"></text><g data-idbox=\"true\" transform=\"translate(0,-750)\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></g></svg></g></g></g></g></svg></mjx-container><br><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 20.065ex;\"><svg style=\"vertical-align: -1.129ex; min-width: 20.065ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"3.389ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -999)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2578,0) translate(-2578,0)\"><g transform=\"translate(0 999) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"1856.3 -999 1 1498.1\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\" transform=\"translate(0,-249)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mover\" transform=\"translate(1356.3,0)\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mo\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g></g><g data-mml-node=\"mpadded\" transform=\"translate(53.8,798.8) scale(0.707)\"><g transform=\"translate(278,-200)\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(429,0)\"></g></g></g></g><g data-mml-node=\"msub\" transform=\"translate(2634.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1778 -999 1 1498.1\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:10\" transform=\"translate(0,501)\"><text data-id-align=\"true\"></text><g data-idbox=\"true\" transform=\"translate(0,-750)\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(389,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(889,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(1389,0)\"></path></g></g></g></g></svg></g></g></g></g></svg></mjx-container><br><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 20.065ex;\"><svg style=\"vertical-align: -0.927ex; min-width: 20.065ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"2.986ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -909.9)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2578,0) translate(-2578,0)\"><g transform=\"translate(0 909.9) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"1856.3 -909.9 1 1319.9\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\" transform=\"translate(0,-159.9)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mover\" transform=\"translate(1356.3,0)\"><g data-mml-node=\"mstyle\"><g data-mml-node=\"mo\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path></g></g><g data-mml-node=\"mpadded\" transform=\"translate(52.4,798.8) scale(0.707)\"><g transform=\"translate(278,-200)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(433,0)\"></g></g></g></g><g data-mml-node=\"msub\" transform=\"translate(2634.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1778 -909.9 1 1319.9\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:11\" transform=\"translate(0,590.1)\"><text data-id-align=\"true\"></text><g data-idbox=\"true\" transform=\"translate(0,-750)\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(389,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(889,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(1389,0)\"></path></g></g></g></g></svg></g></g></g></g></svg></mjx-container><br>根据这些，我们就可以画出我们优化后的 DFA 的图来了：</p>\n<p><img src=\"https://joshlee-blog-images.oss-cn-shenzhen.aliyuncs.com/202312122027196.png\"></p>\n<h3 id=\"课后作业-1\"><a href=\"#课后作业-1\" class=\"headerlink\" title=\"课后作业 1\"></a>课后作业 1</h3><h4 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在这部分中，你将使用图转移算法手工实现一个小型的词法分析器。</p></blockquote>\n<ul>\n<li>分析器的输入：存储在文本文件中的字符序列，字符取自ASCII字符集。文件中可能包括四种记号：关键字if、符合C语言标准的标识符、空格符、回车符\\n。</li>\n<li>分析器的输出：打印出所识别的标识符的种类、及行号、列号信息。</li>\n</ul>\n<p>【示例】对于下面的文本文件：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">ifx if iif if</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">iff if</span></span></code></pre></div><p>你的输出应该是：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">ID(ifx) (1,1)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">IF (1,5)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ID(iif) (1,8)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">IF (1,18)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ID(iff) (2,1)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">IF (2,9)</span></span></code></pre></div><h4 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h4><ol>\n<li>首先词法分析器的状态转移图</li>\n</ol>\n<p><img src=\"https://joshlee-blog-images.oss-cn-shenzhen.aliyuncs.com/202312111457281.png\" alt=\"状态转移图\"></p>\n<h4 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">#include</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">&lt;</span><span style=\"color: #F1FA8C\">iostream</span><span style=\"color: #E9F284\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">#include</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">&lt;</span><span style=\"color: #F1FA8C\">string</span><span style=\"color: #E9F284\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">#include</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">&lt;</span><span style=\"color: #F1FA8C\">fstream</span><span style=\"color: #E9F284\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">#include</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">&lt;</span><span style=\"color: #F1FA8C\">vector</span><span style=\"color: #E9F284\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">#include</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">&lt;</span><span style=\"color: #F1FA8C\">cctype</span><span style=\"color: #E9F284\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">#define</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">FILE_NAME</span><span style=\"color: #F8F8F2\"> \"bj_hw02_text.txt\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">enum</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">State</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    START,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    IN_IDENTIFIER,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    ACCEPT_IF,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    ACCEPT_IDENTIFIER,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    REJECT</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">enum</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">Kind</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    IF,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    IDENTIFIER</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">struct</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">Token</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    Kind kind;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">string lexeme;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> rowNumber;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> columnNumber;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">Automaton</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">private:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">vector</span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\">Token</span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> tokens;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    State currentState;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> startColumn;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">public:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">Automaton</span><span style=\"color: #F8F8F2\">() : </span><span style=\"color: #50FA7B\">currentState</span><span style=\"color: #F8F8F2\">(START), </span><span style=\"color: #50FA7B\">startColumn</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">) {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">processInputLine</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #8BE9FD; font-style: italic\">string</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #FFB86C; font-style: italic\">line</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">rowNumber</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        currentState </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> START;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">string currentLexeme;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        startColumn </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">size_t</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i </span><span style=\"color: #FF79C6\">&lt;=</span><span style=\"color: #F8F8F2\"> line.</span><span style=\"color: #50FA7B\">size</span><span style=\"color: #F8F8F2\">(); </span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">i) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">char</span><span style=\"color: #F8F8F2\"> c </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> line.</span><span style=\"color: #50FA7B\">size</span><span style=\"color: #F8F8F2\">()) </span><span style=\"color: #FF79C6\">?</span><span style=\"color: #F8F8F2\"> line[i] </span><span style=\"color: #FF79C6\">:</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">;</span><span style=\"color: #6272A4\"> // Simulate a space at the end to flush last token</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">switch</span><span style=\"color: #F8F8F2\"> (currentState) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> START:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (c </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">i</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        currentState </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> IN_IDENTIFIER;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        currentLexeme </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> c;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        startColumn </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #50FA7B\">isalpha</span><span style=\"color: #F8F8F2\">(c) </span><span style=\"color: #FF79C6\">||</span><span style=\"color: #F8F8F2\"> c </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">_</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        currentState </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> IN_IDENTIFIER;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        currentLexeme </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> c;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        startColumn </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">break</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> IN_IDENTIFIER:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #50FA7B\">isalnum</span><span style=\"color: #F8F8F2\">(c) </span><span style=\"color: #FF79C6\">||</span><span style=\"color: #F8F8F2\"> c </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">_</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        currentLexeme </span><span style=\"color: #FF79C6\">+=</span><span style=\"color: #F8F8F2\"> c;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (currentLexeme </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">if</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                            tokens.</span><span style=\"color: #50FA7B\">push_back</span><span style=\"color: #F8F8F2\">({IF, currentLexeme, rowNumber, startColumn});</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                            tokens.</span><span style=\"color: #50FA7B\">push_back</span><span style=\"color: #F8F8F2\">({IDENTIFIER, currentLexeme, rowNumber, startColumn});</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        currentState </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> START;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        currentLexeme.</span><span style=\"color: #50FA7B\">clear</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">break</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">default</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    currentState </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> START;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">break</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">printTokens</span><span style=\"color: #F8F8F2\">() </span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> Token </span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">token : tokens) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">string tokenType </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (token.kind </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> IF) </span><span style=\"color: #FF79C6\">?</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">IF</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">:</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">ID</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> tokenType </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> token.lexeme </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">) (</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> token.rowNumber </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">,</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> token.columnNumber </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">)</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">endl;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">main</span><span style=\"color: #F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">ifstream </span><span style=\"color: #50FA7B\">myfile</span><span style=\"color: #F8F8F2\">(FILE_NAME);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">!</span><span style=\"color: #F8F8F2\">myfile.</span><span style=\"color: #50FA7B\">is_open</span><span style=\"color: #F8F8F2\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">Cannot open the file.</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">endl;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> EXIT_FAILURE;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    Automaton automaton;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">string line;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> currentLineNumber </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">while</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #50FA7B\">getline</span><span style=\"color: #F8F8F2\">(myfile, line)) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        automaton.</span><span style=\"color: #50FA7B\">processInputLine</span><span style=\"color: #F8F8F2\">(line, currentLineNumber</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    myfile.</span><span style=\"color: #50FA7B\">close</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    automaton.</span><span style=\"color: #50FA7B\">printTokens</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> EXIT_SUCCESS;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><h3 id=\"课后作业-2\"><a href=\"#课后作业-2\" class=\"headerlink\" title=\"课后作业 2\"></a>课后作业 2</h3><h4 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>给定如下的正则表达式 <code>(a|b)((c|d)*)</code>，请完成如下练习：<br>（1）使用Thompson算法，将该正则表达式转换成非确定状态有限自动机（NFA）；<br>（2）使用子集构造算法，将该上述的非确定有限状态自动机（NFA）转换成确定状态有限自动机（DFA）；<br>（3）使用Hopcroft算法，对该DFA最小化。</p></blockquote>\n<h3 id=\"lab\"><a href=\"#lab\" class=\"headerlink\" title=\"lab\"></a>lab</h3><h4 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h4><p>设一语言的关键词、运算符、分界符的个数与单词如下：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">struct</span><span style=\"color: #F8F8F2\"> { </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> number; string str[</span><span style=\"color: #BD93F9\">10</span><span style=\"color: #F8F8F2\">]; } keywords</span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\">{</span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">,</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">int</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">,</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">main</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">,</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">return</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">} ;</span><span style=\"color: #6272A4\"> //关键词</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">struct</span><span style=\"color: #F8F8F2\"> { </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> number; string str[</span><span style=\"color: #BD93F9\">10</span><span style=\"color: #F8F8F2\">]; } operators </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\">{</span><span style=\"color: #BD93F9\">5</span><span style=\"color: #F8F8F2\">,</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">+</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">,</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">*</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">,</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">,</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">+=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">,</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">*=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">};</span><span style=\"color: #6272A4\"> //运算符</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">struct</span><span style=\"color: #F8F8F2\"> { </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> number; string str[</span><span style=\"color: #BD93F9\">10</span><span style=\"color: #F8F8F2\">]; } boundaries </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\">{</span><span style=\"color: #BD93F9\">6</span><span style=\"color: #F8F8F2\">,</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">,</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">)</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">,</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">{</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">,</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">}</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">,</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">,</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">,</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">;</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">} ;</span><span style=\"color: #6272A4\"> //分界符</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">struct</span><span style=\"color: #F8F8F2\"> { </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> number; string str[</span><span style=\"color: #BD93F9\">100</span><span style=\"color: #F8F8F2\">];} identifieres</span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\">{</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">};</span><span style=\"color: #6272A4\"> //标识符</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">struct</span><span style=\"color: #F8F8F2\"> { </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> number; string str[</span><span style=\"color: #BD93F9\">100</span><span style=\"color: #F8F8F2\">];} Unsigned_integer</span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\">{</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">};</span><span style=\"color: #6272A4\"> //无符号整数</span></span></code></pre></div><ul>\n<li>以上类号分别为 1~5，序号从 0 开始；</li>\n<li>标识符是字母开头的字母数字串；常量为无符号整数；设计一程序实现词法分析。</li>\n</ul>\n<h4 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h4><p>输入一程序，结束符用<code>#</code>；</p>\n<h4 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h4><p>输出单词数对：<code>&lt;类号，序号&gt;</code>。 输出标识符表，用空格分隔； 输出无符号整数表，用空格分隔；</p>\n<h4 id=\"Testcase-1\"><a href=\"#Testcase-1\" class=\"headerlink\" title=\"Testcase 1\"></a>Testcase 1</h4><p><strong>Input：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">main()</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">  int a=2,b=3;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">  return 2*b+a;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}#</span></span></code></pre></div><p><strong>Expected Output：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">&lt;1,1&gt;&lt;3,0&gt;&lt;3,1&gt;&lt;3,2&gt;&lt;1,0&gt;&lt;4,0&gt;&lt;2,2&gt;&lt;5,0&gt;&lt;3,4&gt;&lt;4,1&gt;&lt;2,2&gt;&lt;5,1&gt;&lt;3,5&gt;&lt;1,2&gt;&lt;5,0&gt;&lt;2,1&gt;&lt;4,1&gt;&lt;2,0&gt;&lt;4,0&gt;&lt;3,5&gt;&lt;3,3&gt;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">identifieres:a b</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">Unsigned_integer:2 3</span></span></code></pre></div><h4 id=\"Testcase-2\"><a href=\"#Testcase-2\" class=\"headerlink\" title=\"Testcase 2\"></a>Testcase 2</h4><p><strong>Input：</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">main()</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">int a=21;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">int b_=3;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">return 2*b_+a;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}#</span></span></code></pre></div><p><strong>Expected Output:</strong></p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">&lt;1,1&gt;&lt;3,0&gt;&lt;3,1&gt;&lt;3,2&gt;&lt;1,0&gt;&lt;4,0&gt;&lt;2,2&gt;&lt;5,0&gt;&lt;3,5&gt;&lt;1,0&gt;&lt;4,1&gt;&lt;2,2&gt;&lt;5,1&gt;&lt;3,5&gt;&lt;1,2&gt;&lt;5,2&gt;&lt;2,1&gt;&lt;4,1&gt;&lt;2,0&gt;&lt;4,0&gt;&lt;3,5&gt;&lt;3,3&gt;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">identifieres:a b_</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">Unsigned_integer:21 3 2</span></span></code></pre></div><h3 id=\"My-Code\"><a href=\"#My-Code\" class=\"headerlink\" title=\"My Code\"></a>My Code</h3><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">#include</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">&lt;</span><span style=\"color: #F1FA8C\">iostream</span><span style=\"color: #E9F284\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">#include</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">&lt;</span><span style=\"color: #F1FA8C\">string</span><span style=\"color: #E9F284\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">#include</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">&lt;</span><span style=\"color: #F1FA8C\">cctype</span><span style=\"color: #E9F284\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">#include</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">&lt;</span><span style=\"color: #F1FA8C\">sstream</span><span style=\"color: #E9F284\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">enum</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">lexicalType</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    KEYWORD </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    OPERATOR </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    BOUNDARY </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    IDENTIFIER </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">4</span><span style=\"color: #F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    UNSIGNED_INTEGER </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">5</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">struct</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">Keyword</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> number;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">string str[</span><span style=\"color: #BD93F9\">10</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">} keywords </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> {</span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">int</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">main</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">return</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">};</span><span style=\"color: #6272A4\"> // 关键词</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">struct</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">Operator</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> number;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">string str[</span><span style=\"color: #BD93F9\">10</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">} operators </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> {</span><span style=\"color: #BD93F9\">5</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">+</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">*</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">+=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">*=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">};</span><span style=\"color: #6272A4\"> // 运算符</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">struct</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">Boundary</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> number;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">string str[</span><span style=\"color: #BD93F9\">10</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">} boundaries </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> {</span><span style=\"color: #BD93F9\">6</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">)</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">{</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">}</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">,</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">;</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">};</span><span style=\"color: #6272A4\"> // 分界符</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">struct</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">Identifier</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> number;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">string str[</span><span style=\"color: #BD93F9\">100</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">} identifieres </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> {</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">};</span><span style=\"color: #6272A4\"> // 标识符</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">struct</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">UnsignedInteger</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> number;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">string str[</span><span style=\"color: #BD93F9\">100</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">} Unsigned_integer </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> {</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">};</span><span style=\"color: #6272A4\"> // 无符号整数</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">StateAutomaton</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">public:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">isKeyword</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #8BE9FD; font-style: italic\">string</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">word</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> keywords.number; </span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">i) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (keywords.str[i] </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> word)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> i;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #8BE9FD; font-style: italic\">string</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">tokenize</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">type</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">ordinal</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">&lt;</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #50FA7B\">to_string</span><span style=\"color: #F8F8F2\">(type) </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">,</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #50FA7B\">to_string</span><span style=\"color: #F8F8F2\">(ordinal) </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">&gt;</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">bool</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">isAccept</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">state</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">vector</span><span style=\"color: #FF79C6\">&lt;int&gt;</span><span style=\"color: #F8F8F2\"> notAcceptState </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> {</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">4</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">7</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">16</span><span style=\"color: #F8F8F2\">};</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">find</span><span style=\"color: #F8F8F2\">(notAcceptState.</span><span style=\"color: #50FA7B\">begin</span><span style=\"color: #F8F8F2\">(), notAcceptState.</span><span style=\"color: #50FA7B\">end</span><span style=\"color: #F8F8F2\">(), state) </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> notAcceptState.</span><span style=\"color: #50FA7B\">end</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">handleError</span><span style=\"color: #F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        startIdx </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> idx;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">rollback</span><span style=\"color: #F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        idx</span><span style=\"color: #FF79C6\">--</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">printIds</span><span style=\"color: #F8F8F2\">() </span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">endl </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">identifieres:</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">auto&amp;</span><span style=\"color: #F8F8F2\"> i: idVector) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">endl;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">printUnsignedInteger</span><span style=\"color: #F8F8F2\">() </span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">Unsigned_integer:</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i: unsignedNumberVector) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">processLine</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #8BE9FD; font-style: italic\">string</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">input</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        idx </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        startIdx </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">while</span><span style=\"color: #F8F8F2\"> (idx </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> input.</span><span style=\"color: #50FA7B\">size</span><span style=\"color: #F8F8F2\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">char</span><span style=\"color: #F8F8F2\"> c </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> input[idx</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (c </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #FF79C6\">\\n</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">continue</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">switch</span><span style=\"color: #F8F8F2\"> (state) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #50FA7B\">isalpha</span><span style=\"color: #F8F8F2\">(c))</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (c </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">=</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">tokenize</span><span style=\"color: #F8F8F2\">(OPERATOR, </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (c </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">+</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">4</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (c </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">*</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">7</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (c </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">(</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">10</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">tokenize</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (c </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">)</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">11</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">tokenize</span><span style=\"color: #F8F8F2\">(BOUNDARY, </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (c </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">{</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">12</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">tokenize</span><span style=\"color: #F8F8F2\">(BOUNDARY, </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (c </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">}</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">13</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">tokenize</span><span style=\"color: #F8F8F2\">(BOUNDARY, </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (c </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">,</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">14</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">tokenize</span><span style=\"color: #F8F8F2\">(BOUNDARY, </span><span style=\"color: #BD93F9\">4</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (c </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">;</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">15</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">tokenize</span><span style=\"color: #F8F8F2\">(BOUNDARY, </span><span style=\"color: #BD93F9\">5</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #50FA7B\">isdigit</span><span style=\"color: #F8F8F2\">(c))</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">16</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">else</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        </span><span style=\"color: #50FA7B\">handleError</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">break</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">!</span><span style=\"color: #F8F8F2\">std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #50FA7B\">isalnum</span><span style=\"color: #F8F8F2\">(c) </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> c </span><span style=\"color: #FF79C6\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">_</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">                        // ACCEPT</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        </span><span style=\"color: #50FA7B\">rollback</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        currentWord </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> input.</span><span style=\"color: #50FA7B\">substr</span><span style=\"color: #F8F8F2\">(startIdx, idx </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> startIdx);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        </span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> kw </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">isKeyword</span><span style=\"color: #F8F8F2\">(currentWord);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (kw </span><span style=\"color: #FF79C6\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">                            // 是关键字</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                            std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">string out </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">tokenize</span><span style=\"color: #F8F8F2\">(KEYWORD, kw);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                            std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> out;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">                            // 是标识符</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                            </span><span style=\"color: #FF79C6\">auto</span><span style=\"color: #F8F8F2\"> it </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #50FA7B\">find</span><span style=\"color: #F8F8F2\">(idVector.</span><span style=\"color: #50FA7B\">begin</span><span style=\"color: #F8F8F2\">(), idVector.</span><span style=\"color: #50FA7B\">end</span><span style=\"color: #F8F8F2\">(), currentWord);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                            </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (it </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> idVector.</span><span style=\"color: #50FA7B\">end</span><span style=\"color: #F8F8F2\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">                                // 标识符未定义</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                                std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">tokenize</span><span style=\"color: #F8F8F2\">(IDENTIFIER, idVector.</span><span style=\"color: #50FA7B\">size</span><span style=\"color: #F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                                idVector.</span><span style=\"color: #50FA7B\">push_back</span><span style=\"color: #F8F8F2\">(currentWord);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                            } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">                                // 标识符已定义过，直接引用</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                                </span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> existIdx </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #50FA7B\">distance</span><span style=\"color: #F8F8F2\">(idVector.</span><span style=\"color: #50FA7B\">begin</span><span style=\"color: #F8F8F2\">(), it);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                                std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">tokenize</span><span style=\"color: #F8F8F2\">(IDENTIFIER, existIdx);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">break</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">7</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (c </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">=</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">9</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">tokenize</span><span style=\"color: #F8F8F2\">(OPERATOR, </span><span style=\"color: #BD93F9\">4</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">8</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">tokenize</span><span style=\"color: #F8F8F2\">(OPERATOR, </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        </span><span style=\"color: #50FA7B\">rollback</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">break</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">4</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (c </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">=</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">6</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">tokenize</span><span style=\"color: #F8F8F2\">(OPERATOR, </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">5</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">tokenize</span><span style=\"color: #F8F8F2\">(OPERATOR, </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        </span><span style=\"color: #50FA7B\">rollback</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">break</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">16</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">!</span><span style=\"color: #F8F8F2\">std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #50FA7B\">isdigit</span><span style=\"color: #F8F8F2\">(c)) {</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">                        // ACCEPT</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">17</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        </span><span style=\"color: #50FA7B\">rollback</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        currentWord </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> input.</span><span style=\"color: #50FA7B\">substr</span><span style=\"color: #F8F8F2\">(startIdx, idx </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> startIdx);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> unsignedNum </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        </span><span style=\"color: #FF79C6\">try</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">                            // convert</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                            unsignedNum </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #50FA7B\">stoi</span><span style=\"color: #F8F8F2\">(currentWord);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        } </span><span style=\"color: #FF79C6\">catch</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">invalid_argument</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\"> ia) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                            std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cerr </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">Invalid argument: </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> ia.</span><span style=\"color: #50FA7B\">what</span><span style=\"color: #F8F8F2\">() </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #FF79C6\">\\n</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        </span><span style=\"color: #FF79C6\">auto</span><span style=\"color: #F8F8F2\"> it </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #50FA7B\">find</span><span style=\"color: #F8F8F2\">(unsignedNumberVector.</span><span style=\"color: #50FA7B\">begin</span><span style=\"color: #F8F8F2\">(), unsignedNumberVector.</span><span style=\"color: #50FA7B\">end</span><span style=\"color: #F8F8F2\">(), unsignedNum);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (it </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> unsignedNumberVector.</span><span style=\"color: #50FA7B\">end</span><span style=\"color: #F8F8F2\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">                            // Not found</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                            std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">tokenize</span><span style=\"color: #F8F8F2\">(UNSIGNED_INTEGER, </span><span style=\"color: #FF79C6\">static_cast&lt;int&gt;</span><span style=\"color: #F8F8F2\">(unsignedNumberVector.</span><span style=\"color: #50FA7B\">size</span><span style=\"color: #F8F8F2\">()));</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                            </span><span style=\"color: #FF79C6\">try</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                                unsignedNumberVector.</span><span style=\"color: #50FA7B\">push_back</span><span style=\"color: #F8F8F2\">(std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #50FA7B\">stoi</span><span style=\"color: #F8F8F2\">(currentWord));</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                            } </span><span style=\"color: #FF79C6\">catch</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">invalid_argument</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\"> ia) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                                std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cerr </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">Invalid argument: </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> ia.</span><span style=\"color: #50FA7B\">what</span><span style=\"color: #F8F8F2\">() </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #FF79C6\">\\n</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                            </span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> difference </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #50FA7B\">distance</span><span style=\"color: #F8F8F2\">(unsignedNumberVector.</span><span style=\"color: #50FA7B\">begin</span><span style=\"color: #F8F8F2\">(), it);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                            std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">tokenize</span><span style=\"color: #F8F8F2\">(UNSIGNED_INTEGER, difference);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">break</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">5</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">6</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">8</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">9</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">10</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">11</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">12</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">13</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">14</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">15</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">case</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">17</span><span style=\"color: #F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">break</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">default</span><span style=\"color: #F8F8F2\">: std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cout </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">ERROR!</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&lt;&lt;</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">endl;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #50FA7B\">isAccept</span><span style=\"color: #F8F8F2\">(state)) {</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">                // init state</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                startIdx </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> idx;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">private:</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> state </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> idx </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> startIdx </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">string currentWord;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">vector</span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\">std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">string</span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> idVector;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">vector</span><span style=\"color: #FF79C6\">&lt;int&gt;</span><span style=\"color: #F8F8F2\"> unsignedNumberVector;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">main</span><span style=\"color: #F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">string line;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">string totalInput;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    StateAutomaton automaton;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">while</span><span style=\"color: #F8F8F2\"> (std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #50FA7B\">getline</span><span style=\"color: #F8F8F2\">(std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">cin, line)) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        automaton.</span><span style=\"color: #50FA7B\">processLine</span><span style=\"color: #F8F8F2\">(line </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">'</span><span style=\"color: #FF79C6\">\\n</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (line.</span><span style=\"color: #50FA7B\">find</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">#</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #FF79C6\">!=</span><span style=\"color: #F8F8F2\"> std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">string</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #F8F8F2\">npos) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">break</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    automaton.</span><span style=\"color: #50FA7B\">printIds</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    automaton.</span><span style=\"color: #50FA7B\">printUnsignedInteger</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> EXIT_SUCCESS;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre></div>","feature":true,"text":"词法分析器我们可以知道词法分析器的输入是源程序，输出的是一个记号，当词法分析器从左到右一个一个读入源程序的时候，会对每个词素进行归类，例如： cif(a &gt...","permalink":"/post/complier/lexical_anaylzer","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"编译","slug":"编译","count":1,"path":"api/categories/编译.json"}],"tags":[{"name":"Compliers","slug":"Compliers","count":1,"path":"api/tags/Compliers.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8\"><span class=\"toc-text\">词法分析器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">如何实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E7%A7%BB%E5%9B%BE\"><span class=\"toc-text\">转移图</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E5%AD%97%E8%A1%A8%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">关键字表算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">正则表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95%E7%B3%96\"><span class=\"toc-text\">语法糖</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88FA%EF%BC%89\"><span class=\"toc-text\">有限状态自动机（FA）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A1%AE%E5%AE%9A%E7%9A%84%E6%9C%89%E9%99%90%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88DFA%EF%BC%89\"><span class=\"toc-text\">确定的有限自动机（DFA）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E7%A1%AE%E5%AE%9A%E7%9A%84%E6%9C%89%E9%99%90%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88NFA%EF%BC%89\"><span class=\"toc-text\">非确定的有限自动机（NFA）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RE-to-NFA%EF%BC%88Thompson-%E7%AE%97%E6%B3%95%EF%BC%89\"><span class=\"toc-text\">RE to NFA（Thompson 算法）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NFA-to-DFA%EF%BC%88%E5%AD%90%E9%9B%86%E6%9E%84%E9%80%A0%E7%AE%97%E6%B3%95%EF%BC%89\"><span class=\"toc-text\">NFA to DFA（子集构造算法）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%B0%8F%E5%8C%96-DFA%EF%BC%88Hopcroft-%E7%AE%97%E6%B3%95%EF%BC%89\"><span class=\"toc-text\">最小化 DFA（Hopcroft 算法）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A-1\"><span class=\"toc-text\">课后作业 1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE\"><span class=\"toc-text\">题目</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">实现思路</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">完整代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A-2\"><span class=\"toc-text\">课后作业 2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE-1\"><span class=\"toc-text\">题目</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lab\"><span class=\"toc-text\">lab</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Description\"><span class=\"toc-text\">Description</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Input\"><span class=\"toc-text\">Input</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Output\"><span class=\"toc-text\">Output</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Testcase-1\"><span class=\"toc-text\">Testcase 1</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Testcase-2\"><span class=\"toc-text\">Testcase 2</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#My-Code\"><span class=\"toc-text\">My Code</span></a></li></ol></li></ol>","author":{"name":"Joshlee","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{}},"mapped":true,"hidden":false,"prev_post":{"title":"初识 CS 考研","uid":"a73e5b444f55a582b5586ab6d896a327","slug":"examination/cs_kaoyan","date":"2023-12-26T10:39:12.000Z","updated":"2023-12-27T02:53:15.328Z","comments":true,"path":"api/articles/examination/cs_kaoyan.json","keywords":null,"cover":null,"text":"考研时间节点 大纲更新阶段（8月底-9月中） 招生简章发布及考试大纲发布，考生可以了解到学校2022年的招新阶段和考试科目及大纲。 报名阶段（9月-12月） 考...","permalink":"/post/examination/cs_kaoyan","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"应试","slug":"应试","count":6,"path":"api/categories/应试.json"}],"tags":[{"name":"考研","slug":"考研","count":3,"path":"api/tags/考研.json"}],"author":{"name":"Joshlee","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{}},"feature":true},"next_post":{"title":"Summary of Learning How to Learn","uid":"d567df428ca0fa68403e0b0d00e7ec89","slug":"life/learning_how_to_learn","date":"2023-12-05T09:50:56.000Z","updated":"2023-12-24T02:18:01.781Z","comments":true,"path":"api/articles/life/learning_how_to_learn.json","keywords":null,"cover":null,"text":" https://www.coursera.org/learn/learning-how-to-learn/ 1. IntroCan only be in on...","permalink":"/post/life/learning_how_to_learn","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"17 mins."},"categories":[{"name":"学习","slug":"学习","count":1,"path":"api/categories/学习.json"}],"tags":[{"name":"meta-learning","slug":"meta-learning","count":1,"path":"api/tags/meta-learning.json"}],"author":{"name":"Joshlee","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{}},"feature":true}}