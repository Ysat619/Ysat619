{"title":"《软件开发工具》","uid":"2cc8b90b0dba95b11728dd29144d57a6","slug":"examination/tool_for_software_development","date":"2021-10-03T11:37:25.000Z","updated":"2022-11-12T00:08:56.675Z","comments":true,"path":"api/articles/examination/tool_for_software_development.json","keywords":null,"cover":[],"content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h2 id=\"第1章-绪论\"><a href=\"#第1章-绪论\" class=\"headerlink\" title=\"第1章 绪论\"></a>第1章 绪论</h2><p>软件产品的质量、效率、价格已成为各方关注的十分重要的问题。</p>\n<h3 id=\"1-1-软件开发工具的由来\"><a href=\"#1-1-软件开发工具的由来\" class=\"headerlink\" title=\"1.1 软件开发工具的由来\"></a>1.1 软件开发工具的由来</h3><ul>\n<li><p>操作系统、汇编程序、汇编系统时软件开发中必不可少的工具，但一般不把他们归入软件开发工具的范围，类似的还有磁盘的处理、病毒的防治、系统的备份等。</p>\n</li>\n<li><p>软件开发工具的范围（概念）：在<strong>高级</strong>程序设计语言（第三代语言）的基础上，为提高软件开发的<strong>质量和效率</strong>，从规划、分析、设计、测试、文档和管理等方面，对软件开发者提供各种不同程度的<strong>帮助</strong>的一类新型的软件</p>\n</li>\n<li><p><strong>第一代计算机语言（机器语言）</strong>：由0和1组成的字符串</p>\n</li>\n<li><p><strong>第二代计算机语言（汇编语言）</strong>：针对难记忆、无意义的二进制字符串，人们试图用英语中具有一定意义的单词（或单词的缩写）来代替它，这就是 “<strong>助记忆码</strong>”或<strong>汇编码,<strong>用汇编编写的程序叫汇编程序，而把这些汇编程序转换成机器指令的程序则称为</strong>汇编系统（Assembler）。</strong>至今，汇编语言还是计算机专业人员必须学习的基本知识之一。</p>\n</li>\n<li><p>操作系统差不多与汇编语言同时出现（20世纪50年代末60年代初）：</p>\n<ul>\n<li>操作系统的出现<strong>改善</strong>了人们应用计算机的条件。操作系统利用计算机本身能迅速处理信息的优势</li>\n</ul>\n</li>\n<li><ul>\n<li>自动地完成系统<strong>初始化</strong>、<strong>文件管理</strong>、<strong>内存管理</strong>、<strong>作业管理</strong>、<strong>处理机</strong>管理等一系列工作</li>\n<li>这改善了计算机的使用环境，也同样对计算机应用的前进发挥了十分重要的作用</li>\n</ul>\n</li>\n<li><p><strong>第三代计算机语言（过程化语言）</strong>：在第三代语言的应用中，人们又发现了新的<strong>瓶颈</strong>–<strong>处理过程的描述</strong></p>\n</li>\n<li><p><strong>第四代计算机语言（非过程化语言）</strong>：非过程化语言的思想是<strong>只要给机器下达做什么的命令，由机器自己去安排执行的顺序。</strong>在认识到软件工作的重要性的同时，也认识到了软件工作的困难性，这就是“<strong>软件危机</strong>”的问题</p>\n</li>\n<li><p>硬件是计算机的躯体，<strong>软件是计算机的灵魂</strong></p>\n</li>\n<li><p>软件是广大使用者与计算机之间的桥梁</p>\n</li>\n<li><p>软件是人类在各个领域中积累的知识的结晶</p>\n</li>\n<li><p>软件是人类文明与知识得以延续的新的载体</p>\n</li>\n<li><p>客观世界的复杂性，决定了软件本身的<strong>复杂性</strong>，人类知识的丰富多彩决定了软件的极大<strong>多样性</strong>；客观世界的动态性，决定了软件对可<strong>维护性、可重用性</strong>越来越高的要求。保证它的正确性、可靠性、如何控制软件开发工作的进度与成本，很自然地称为理论上十分重要、实际中十分迫切的课题。</p>\n</li>\n<li><p><strong>克服软件危机的方法(新技术)：</strong></p>\n</li>\n<li><ul>\n<li>结构化程序语言</li>\n<li>软件工程学</li>\n<li>面向对象的程序设计方法</li>\n<li>即插即用的程序设计方法（Plug and Play Programming）</li>\n<li>面向开源软件和互联网的程序设计</li>\n</ul>\n</li>\n<li><p>用<strong>通用软件</strong>(如早期的WORDSTAR)帮助软件开发的主要弱点<strong>：</strong></p>\n</li>\n<li><ul>\n<li>有许多工作是通用软件无法完成的</li>\n<li>通用软件完成某些工作，只能表现出其表面的形式，而不能<strong>反映其逻辑内涵</strong></li>\n<li>通用软件来帮助人们完成软件开发工作时，常常遇到难以保持<strong>一致性</strong>的困难</li>\n</ul>\n</li>\n</ul>\n<p>针对以上问题，20世纪80年代以来，一些专门用于支持软件开发的软件开发工具陆续问世，从而进入<strong>专用的软件开发工具</strong>的阶段。如以下几类：</p>\n<ul>\n<li><ul>\n<li>面向特定功能模块的各种代码生成程序（包括报表生成器、菜单生成器、对话生成器等）</li>\n<li>综合性的第四代语言</li>\n<li>专用于某种文档的编写工具</li>\n<li>数据字典管理系统（DDMS）</li>\n<li>专用于画数据流程图、E-R图或程序框图的绘图软件等</li>\n</ul>\n</li>\n<li><p><strong>1989年，IBM公司宣布了一个名为AD/Cycle的巨大的理论框架</strong>（一体化环境开始，里程碑）</p>\n</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li><ul>\n<li>拘泥于集中式的处理思路，对于新兴起的客户、服务器结构没有及时跟上</li>\n<li>坚持在OS/400等自己、特定的硬件平台上开发，背离了开放型的大趋势</li>\n</ul>\n</li>\n</ul>\n<p>但是集成的软件开发环境的研发并没有因此停滞，例如Rational公司推出了Objectory，Rose等集成的软件开发工具</p>\n<ul>\n<li><p>21世纪以来，软件开发工具的发展也进入了新的阶段。两个鲜明的特点使软件开发工具的功能和效率提高了一个新的阶段：</p>\n</li>\n<li><ul>\n<li>面向网络，不仅基于网络，而且用于网络。从HTML到XML，从SOAP到UDDL</li>\n<li>软件开发越来越需要考虑互联网上的应用，越来越注意要再网络环境下使用</li>\n</ul>\n</li>\n<li><ul>\n<li>开源软件的兴起和运用</li>\n<li>开源软件开发工作效率地提供是肯定有益的</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-软件开发工具的概念\"><a href=\"#1-2-软件开发工具的概念\" class=\"headerlink\" title=\"1.2 软件开发工具的概念\"></a>1.2 软件开发工具的概念</h3><p>软件开发工具的<strong>概念要点</strong>:</p>\n<ol>\n<li>它是在**高级程序设计语言(第三代语言)**之后，软件技术进一步发展的产物</li>\n<li>它的目的是在人们开发软件中给予各种不同方面、不同程度的<strong>支持或帮助</strong></li>\n<li>它支持软件开发的<strong>全过程</strong>，而不是仅限于编码或其他稳定的工作阶段</li>\n</ol>\n<p>在理解这个概念时,应同时认识软件开发工具的<strong>继承性</strong>与<strong>创新性</strong>。它的基本思想仍是致力于软件开发的<strong>高效优质</strong></p>\n<ol>\n<li>硬件（Hardware）是躯体，软件（Software）是灵魂，二者缺一不可。软件一端连着计算机硬件，向硬件提供可以执行的机器指令，另一端面向用户</li>\n<li>软件是用户与硬件之间的桥梁</li>\n<li>软件实际上是人类知识与经验的结晶。所谓事先编好的指令，正是人们在实践中形成的工作规范与步骤</li>\n<li>当人们把程序编制出来时，<strong>已经为这些经验或理论知识找到了一种新的载体</strong></li>\n</ol>\n<p>软件开发过程的实质： <strong>知识的提炼、表述、固化</strong></p>\n<p>软件开发新特点：</p>\n<ol>\n<li><strong>自动化</strong>程度的提高</li>\n<li>这一阶段的工作明确地把<strong>需求分析</strong>和<strong>架构设计</strong>包括在软件工作的范围之内</li>\n<li>把软件开发工作延伸到<strong>项目及版本管理</strong>，从而超出了一次编程的局限</li>\n<li>在这一阶段的研究中，吸收了许多<strong>管理科学</strong>的内容与方法。在这方面卡内基·梅隆大学的软件工程研究所提出的<strong>能力成熟度模型</strong>（Capacity Morality Model-CMM）具有重要的意义</li>\n</ol>\n<p>总之，软件开发工具的提出与使用，是软件技术发展的一个新的阶段。</p>\n<p>与软件开发工具的概念术语有很多，如：</p>\n<ul>\n<li><p><strong>第四代语言</strong></p>\n<p>第四代语言系统通过某些标准处理过程的自动生成，使得用户可以只说明要求<strong>做什么</strong>，而把具体的执行步骤的安排交由软件<strong>自动处理</strong></p>\n</li>\n<li><p><strong>CASE工具</strong></p>\n</li>\n</ul>\n<p>CASE工具有两种理解。一种是<strong>计算机辅助软件工程</strong>（Computer Aided Software Engineering），另一种则是<strong>计算机辅助系统工程</strong>（Computer Aided System Engineering）</p>\n<p>无论按哪种理解, 它的基本思想与软件开发工具是完全一致的,即应用计算机自身处理信息的巨大能力,<strong>帮助人们开发复杂的软件或应用系统</strong></p>\n<ul>\n<li><p>可视化程序设计（Visual Programming）</p>\n</li>\n<li><p>最终用户计算（End User Computing）</p>\n</li>\n<li><p>组件程序设计（Component Programming）</p>\n</li>\n<li><p>即插即用的程序设计（Plug and Play Programming）</p>\n</li>\n</ul>\n<h3 id=\"1-3-软件开发工具的功能与性能\"><a href=\"#1-3-软件开发工具的功能与性能\" class=\"headerlink\" title=\"1.3 软件开发工具的功能与性能\"></a>1.3 软件开发工具的功能与性能</h3><h4 id=\"1-软件开发的过程\"><a href=\"#1-软件开发的过程\" class=\"headerlink\" title=\"1. 软件开发的过程\"></a>1. 软件开发的过程</h4><p>第一阶段 - <strong>需求分析</strong>:</p>\n<p>软件开发工作首要的任务是根据这种初始要求形成严格的、明确的、可供实际开发使用的功能说明书。</p>\n<p>软件设计者需要从初始要求出发、经过大量的调查研究工作，抽象出应用领域中的实际的信息需求，设计出计算机系统内外的、合理的信息流程，并规定出软件系统的功能与性能要求。</p>\n<p>这些调查分析的成果集中体现在第一个重要文档–<strong>软件功能说明书</strong></p>\n<p>第二阶段 - <strong>总体设计</strong>：</p>\n<p>软件的结构设计、公用的数据文件或数据库的设计、各部分的连接方式及信息交换的标准</p>\n<p>总体设计的成果是系统的总体设计文件及各个模块的设计任务书。总体设计文件应包括结构图、模块清单、公用数据结构</p>\n<p>第三阶段 - <strong>实现阶段（Coding）</strong>:程序的编写与文档的编写是两件并行的工作</p>\n<p>第四阶段 - <strong>测试或调试阶段</strong>：其中包括模块的<strong>调试</strong>与整个软件的<strong>联调</strong>两个部分</p>\n<h4 id=\"2-软件开发工具的功能要求\"><a href=\"#2-软件开发工具的功能要求\" class=\"headerlink\" title=\"2. 软件开发工具的功能要求\"></a>2. 软件开发工具的功能要求</h4><ol>\n<li><ol>\n<li>认识与<strong>描述客观</strong>系统： 主要用于需求分析阶段</li>\n<li><strong>存储及管理</strong>开发过程中的<strong>信息</strong></li>\n<li><strong>代码</strong>的编写或生成</li>\n<li><strong>文档</strong>的编制或生成</li>\n<li>软件项目的<strong>管理:</strong> 这方面的功能更明确地是为项目管理人员提供支持, 项目管理包括进度管理、资源与费用管理、质量管理三个基本内容</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"3-软件开发工具的性能\"><a href=\"#3-软件开发工具的性能\" class=\"headerlink\" title=\"3. 软件开发工具的性能\"></a>3. 软件开发工具的性能</h4><p>对于软件开发工具来说以下五项应是特别重要的:</p>\n<ol>\n<li>表达能力或描述能力</li>\n<li>保持信息一致性的能力</li>\n<li>使用的方便程度</li>\n<li>工具的可靠程度: 即在各种各样的干扰下仍能保持正常工作,而不导致丢失或弄错信息</li>\n<li> 对硬件和软件环境的要求: 一般来说, 软件开发工具对环境的要求不应当超出它所支持的应用软件的环境要求, 有时甚至还应当低于应用软件的环境要求</li>\n</ol>\n<h3 id=\"1-4-软件开发工具的类别\"><a href=\"#1-4-软件开发工具的类别\" class=\"headerlink\" title=\"1.4 软件开发工具的类别\"></a>1.4 软件开发工具的类别</h3><h4 id=\"1-按工作阶段划分\"><a href=\"#1-按工作阶段划分\" class=\"headerlink\" title=\"1. 按工作阶段划分\"></a>1. 按工作阶段划分</h4><p>可以把软件开发工具分为三类：计划工具(出现最晚)、分析工具、设计工具(出现最早)</p>\n<p>各种代码生成器、一般所说的第四代语言及帮助人们进行测试的工具，都属于<strong>设计工具</strong></p>\n<p><strong>分析工具主要指用于支持需求分析的工具</strong>，如帮助人们编写数据字典的、专用的数据字典管理系统工具-FLOW，帮助人们画系统结构图或E-R图的工具等。保持信息的一致性，在这类工具中具有十分重要的地位</p>\n<p><strong>计划工具</strong>则是完全为项目主管人员服务的</p>\n<h4 id=\"2-按集成程度划分\"><a href=\"#2-按集成程度划分\" class=\"headerlink\" title=\"2. 按集成程度划分\"></a>2. 按集成程度划分</h4><p>专用的、面对某一工作阶段或某一工作任务的工具，以及集成化的、面对软件开发的全过程的工具</p>\n<p>集成化的软件开发工具也常常被称为软件工作环境（是指支持全过程、全阶段的软件开发工具）。</p>\n<h4 id=\"3-按与硬件、软件的关系划分\"><a href=\"#3-按与硬件、软件的关系划分\" class=\"headerlink\" title=\"3. 按与硬件、软件的关系划分\"></a>3. 按与硬件、软件的关系划分</h4><p>有点软件开发工具<strong>依赖</strong>于特定的计算机或特定的软件（如某种数据库管理系统），有的则是<strong>独立</strong>于硬件与其他软件的。</p>\n<p><strong>设计工具</strong>多是<strong>依赖</strong>于特定软件的</p>\n<p><strong>分析工具与计划工具</strong>往往是<strong>独立</strong>于机器与软件的</p>\n<p><strong>集成化的软件开发工具</strong>又常常是依赖于机器与软件的</p>\n<h3 id=\"1-5-软件开发工具的研究与使用\"><a href=\"#1-5-软件开发工具的研究与使用\" class=\"headerlink\" title=\"1.5 软件开发工具的研究与使用\"></a>1.5 软件开发工具的研究与使用</h3><p>软件开发工具的使用者：</p>\n<ol>\n<li>从计算机专业出身的技术人员</li>\n<li>来自各个应用领域，他们出身于计算机以外的各个专业领域，如会计、金融、工程、企业管理等</li>\n</ol>\n<h2 id=\"第2章-软件开发过程及其组织\"><a href=\"#第2章-软件开发过程及其组织\" class=\"headerlink\" title=\"第2章 软件开发过程及其组织\"></a>第2章 软件开发过程及其组织</h2><p>软件危机源于<strong>客观世界</strong>，大系统的<strong>复杂</strong>性，规模越来越大</p>\n<p>如何<strong>克服软件危机</strong>: 1. 结构化程序设计方法 2. 软件工程方法 3. 面向对象的程序设计方法 4.即插即用的程序设计方法 5.面向开源软件和互联网平台的程序设计</p>\n<p>两个领域的问题需要特别注意: 1.软件质量的评价与改善问题 2.项目组管理的任务与方法。这两者与软件开发工作也是有直接联系的</p>\n<h3 id=\"2-1-软件开发的困难\"><a href=\"#2-1-软件开发的困难\" class=\"headerlink\" title=\"2.1 软件开发的困难\"></a>2.1 软件开发的困难</h3><p>软件的复杂性超出了人类的处理能力</p>\n<h4 id=\"1-软件开发的基本问题\"><a href=\"#1-软件开发的基本问题\" class=\"headerlink\" title=\"1. 软件开发的基本问题\"></a>1. 软件开发的基本问题</h4><p>两个转换没有顺利地通过。首先是从用户的理解到程序员的理解，其次是从程序员的理解到程序的理解</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/12654026/1633231148608-9c5aa2a1-a0c7-4771-83b3-9a97c3e782e6.jpeg\" alt=\"img\"></p>\n<ol>\n<li>第一个转换是用户对软件功能的理解与程序员对软件功能的理解之间的转换<ol>\n<li>程序员必须花相当的时间尽可能地了解与熟悉应用领域, 并且正确地理解用户工作中的信息需求和信息流程</li>\n<li>保证这一顺利完成的手段就是利用尽可能的<strong>标准化</strong>的方法编写程序<strong>设计任务书</strong>, 用明确的语言或图形、表格，把程序要处理的信息的内容、格式、来源、去向、存储与处理清楚地表达出来，作为双方共同的理解</li>\n</ol>\n</li>\n<li>第二个转换所要解决的是人和机器之间的交流与协调问题, 这个转换关键在于程序员的知识水平和实际经验</li>\n</ol>\n<h4 id=\"2-大型软件开发中的困难\"><a href=\"#2-大型软件开发中的困难\" class=\"headerlink\" title=\"2. 大型软件开发中的困难\"></a>2. 大型软件开发中的困难</h4><ol>\n<li><p><strong>一致性</strong>的保持称为十分困难的问题</p>\n</li>\n<li><p>测试的困难大大增加</p>\n<ol>\n<li>水波效应: 人们修改程序的某一处时, 由于没有充分考虑这一修改对相关部分带来的影响, 结果出现了新的错误</li>\n<li>每个程序员只了解自己的一部分, 无法全面地预测自己的任何改动对其他部分的影响, 而项目负责人也不可能深入每一个细节中, 只能采用所谓的”<strong>黑箱</strong>“检验方法。这种检验只能证明程序有错而不能证明程序无错</li>\n</ol>\n</li>\n<li><p>工作进度难以控制</p>\n<ol>\n<li>单个程序员常常过低估计工作难度而拖延进度</li>\n<li>对整个系统进行<strong>联调</strong>, 联调后发现问题回到程序员手中的修改, 反复多少次是无法事前判断的</li>\n</ol>\n</li>\n<li><p>文档与代码的协调十分困难</p>\n</li>\n<li><p>我们所说的文档包括: <strong>功能说明书</strong>、<strong>总体设计</strong>、各模块的<strong>设计任务书</strong>、每个部分的<strong>研制报告</strong>、<strong>测试报告</strong>、直到最终的验收报告和给使用者的<strong>用户手册</strong></p>\n</li>\n<li><p>代码与文档必须一致，否则文档不仅没有用处，反而会造成混乱</p>\n</li>\n<li><p>版本更新带来的困难</p>\n</li>\n<li><p>版本更新的大量工作往往在于审核与回顾，包括对<strong>代码</strong>和<strong>文档</strong>两个方面的认真检查</p>\n</li>\n</ol>\n<h4 id=\"3-困难产生的原因\"><a href=\"#3-困难产生的原因\" class=\"headerlink\" title=\"3. 困难产生的原因\"></a>3. 困难产生的原因</h4><ol>\n<li>这些困难来自大系统的<strong>复杂</strong>性</li>\n<li>许多具有主动性的<strong>个人之间</strong>的组织与<strong>协调</strong>带来大量的困难</li>\n<li>各个<strong>应用领域</strong>之间的差别导致困难的加重</li>\n<li><strong>时间</strong>的因素，变化的因素给软件开发工作带来许多困难</li>\n</ol>\n<h3 id=\"2-2-软件开发方法的发展\"><a href=\"#2-2-软件开发方法的发展\" class=\"headerlink\" title=\"2.2 软件开发方法的发展\"></a>2.2 软件开发方法的发展</h3><p>大型软件开发过程的各种<strong>角色</strong>:</p>\n<ul>\n<li><p><strong>用户</strong></p>\n</li>\n<li><ul>\n<li>提出需求</li>\n<li>验收</li>\n<li>使用</li>\n<li>需求修改</li>\n</ul>\n</li>\n<li><p><strong>项目负责人(或软件架构师)</strong></p>\n</li>\n<li><ul>\n<li>分析需求(包括设计方案的形式)</li>\n<li>向程序员分配任务</li>\n<li>验收程序员的工作成果–代码与文档</li>\n<li>对整个软件进行联调</li>\n<li>向用户交付使用</li>\n<li>接收与分析用户的修改要求</li>\n<li>向程序员布置修改任务</li>\n<li>验收修改成果并向用户提交新的版本或修改的结果</li>\n</ul>\n</li>\n<li><p><strong>程序员</strong></p>\n</li>\n<li><ul>\n<li>编写程序</li>\n<li>编写文档</li>\n<li>调试自己编码的程序</li>\n<li>向项目负责人提交工作成果</li>\n</ul>\n</li>\n<li><p><strong>硬件</strong></p>\n</li>\n</ul>\n<h4 id=\"1-结构化程序设计方法\"><a href=\"#1-结构化程序设计方法\" class=\"headerlink\" title=\"1. 结构化程序设计方法\"></a>1. 结构化程序设计方法</h4><p>好的程序结构的各种看法: </p>\n<ul>\n<li>它能够保证程序<strong>正常地</strong>，按照功能说明书<strong>运行</strong></li>\n<li>它具有<strong>灵活性</strong>，没有错误，即使有了错误也能够很快地改正</li>\n<li>它的<strong>文档齐全</strong>，一旦需要变更，很容易找到应当改动的地方</li>\n<li>它运行<strong>速度快</strong></li>\n<li>它在<strong>经济</strong>上能够保证投资很快地得到回报</li>\n</ul>\n<p>程序的结构分解成<strong>三种基本模块</strong>（避免“水波效应”）：</p>\n<ul>\n<li>处理单元</li>\n<li>循环机制</li>\n<li>二分决策机制 </li>\n</ul>\n<p><strong>模块的划分</strong>应当符合以下<strong>三条基本的要求</strong>:</p>\n<ol>\n<li><strong>凝聚性强</strong>：模块的功能在逻辑上尽可能地单一化、明确化，最好做到一一对应</li>\n<li><strong>低耦合</strong>：模块之间的联系及互相影响尽可能的少，尽量避免逻辑耦合，而仅限于数据耦合</li>\n<li>模块的规模应当<strong>足够小</strong>，以便使它本身的调试易于进行</li>\n</ol>\n<p>结构化程序设计的<strong>实施要点</strong>:</p>\n<ol>\n<li>限制甚至<strong>不用GOTO语句</strong>，绝对禁止超越模块边界的GOTO语句</li>\n<li>子程序（也叫方法或函数）尽可能做到只有<strong>一个入口和出口</strong></li>\n<li>程序<strong>风格</strong>应尽量明确、清晰，包括适当增加<strong>注释</strong></li>\n<li>在程序编写的<strong>同时</strong>完成有关的<strong>文档编撰</strong>，不要拖延时间</li>\n</ol>\n<p>结构程序设计的方法是为<strong>程序员</strong>服务的，而对于项目负责人来说，则较少涉及他所关心的问题。对于这种方法的批评意见是增大了程序工作量，增加了编程中的麻烦与繁琐的工作，并且降低了程序的运行效率。</p>\n<p>为了保证软件的<strong>可靠、准确与易于修改</strong>，这种代价是值得的</p>\n<h4 id=\"2-软件工程方法\"><a href=\"#2-软件工程方法\" class=\"headerlink\" title=\"2. 软件工程方法\"></a>2. 软件工程方法</h4><p>根据经典的辞书《简明不列颠百科全书》，工程指的是“应用科学知识使自然资源最佳地为人类服务的一种专门技术”。工程的观点是和近代、现代的大生产联系在一起的，它是和依靠个人技艺的手工的生产方式相对立的</p>\n<p>软件工程的思想和方法:</p>\n<ol>\n<li>把软件的质量寄托于各个程序员的技能与认真负责是<strong>不牢靠的、危险的、不现实的</strong></li>\n<li>要想从根本上<strong>提高</strong>软件开发的<strong>效率和质量</strong>，就应当<strong>吸取</strong>人们在各种传统产业中的成功<strong>经验</strong></li>\n<li>从组织和管理的角度加强力量</li>\n<li>使软件生产从程序员的个人劳动提高到<strong>有组织的、可控制</strong>的工程</li>\n</ol>\n<p>软件工程从传统产业中吸取的经验：</p>\n<ol>\n<li>它们在多年<strong>实践的基础上</strong>，对于这项工作的步骤做出了严格的规定</li>\n<li><strong>顺序</strong>绝对不能颠倒</li>\n<li>每一个阶段都有各自的<strong>明确的任务</strong></li>\n<li>在质量、表达方式等方面要<strong>有统一</strong></li>\n<li>它们作为有关各方<strong>沟通与交流的手段</strong>，使参加工作的不同职务、不同角色的人们成为一个整体，共同地完成一项大的工程任务</li>\n</ol>\n<p>IBM提出的AD/Cycle中，对于应用软件的开发过程作了如下的划分和规定：</p>\n<p>第一阶段：需求分析</p>\n<p>第二阶段：分析与设计阶段</p>\n<p>第三阶段：编程阶段</p>\n<p>第四阶段：测试阶段</p>\n<p>第五阶段：使用及维护阶段</p>\n<p>在标准化方面（如著名的<strong>ISO 9001</strong>标准等），人们主要从2个方面去探索：</p>\n<ol>\n<li>表达方式的标准化</li>\n<li>对工作的质量及检查制定标准</li>\n</ol>\n<p>软件工程的思想主要集中于加强项目管理者的工作上，对于程序员关系不大，这点与结构化程序设计方法正好互相补充。</p>\n<h4 id=\"3-面向对象的程序设计方法\"><a href=\"#3-面向对象的程序设计方法\" class=\"headerlink\" title=\"3. 面向对象的程序设计方法\"></a>3. 面向对象的程序设计方法</h4><p>面向对象的程序设计(Object Oriented Programming–OOP)</p>\n<p>“面向对象”（Object Oriented）这个用于有多种不同的翻译方法，如“面向客体”、“面向目标”、“物件导向”</p>\n<p>“Object”的由来：把信息的<strong>静态属性(数据结构)和对它的处理(功能模块)从根本上结合起来</strong>，数据库(数据结构)和功能的矛盾和冲突就迎刃而解了</p>\n<p>20世纪70年代，<strong>Smalltalk</strong>语言的出现 ，使人们对这种思想的作用刮目相看。这种与众不同的语言把<strong>一切事物都看做Object</strong>，仅用三个最基本的语句（new，send，get）来表明对象的生成、送出消息、得到消息，而把一切动作都作为对象接到信息的反应，通过一套巧妙的递归嵌套，可以发展出任意的、复杂的结构。当C语言接受了这种思想后，发展出C++后，面向对象的思想成为普遍的潮流 </p>\n<p>面向对象的程序设计的基本思想：</p>\n<ol>\n<li><strong>客观世界的任何事物都是对象</strong>，它们都有一些静态属性（相当于数据结构），也都有一些相关的操作（相当于程序模块或方法）。作为一个整体，对象对外不必公开这些属性与操作。这就是所谓的“封装性”（Encapsulation）</li>\n<li>对象之间有抽象与具体</li>\n<li>抽象的、较大的对象所具有的性质，包括静态属性和动态操作，自然地成为它的子类的性质，不必加以说明或规定。这就是所谓的“遗传”（Inheritance）</li>\n<li>对象之间可以互送消息(Message)。这消息可以是传送有一个参数</li>\n</ol>\n<p>面向对象的程序设计之所以能产生巨大的影响，其根本原因在于它提供了认识框架。也正因为这样，认识框架迅速地散步到程序设计语言的范围之外，以至出现了<strong>面向对象的系统分析（OOA）</strong>,<strong>面向对象的系统设计（OOD)<strong>，</strong>面向对象的数据库管理系统（ODBMS）</strong></p>\n<h4 id=\"4-即插即用的程序设计方法\"><a href=\"#4-即插即用的程序设计方法\" class=\"headerlink\" title=\"4. 即插即用的程序设计方法\"></a>4. 即插即用的程序设计方法</h4><p>与即插即用紧密相关的还有<strong>组件程序设计</strong>(Component Programming)，<strong>组合文件</strong>（Compound Document），<strong>宏观程序设计</strong>（Macro Programming）等，这是在<strong>面向对象</strong>的程序设计方法的<strong>基础上</strong>提出来的</p>\n<p>一部分人专门生产软件组件（相当于芯片），而另一部分人构造整个软件的结构（相当于计算机结构），并且把软件组件插入这个结构，以便迅速地完成大型软件的研制工作。这就是即插即用的意思</p>\n<p>实现的困难:</p>\n<ol>\n<li>标准化的问题十分困难</li>\n<li>软件部件的提供方式</li>\n<li>存在多种硬件、多种操作系统</li>\n</ol>\n<p>一些软件公司或机构在这方面作了不少探索，并已经在标准化方面提出了方案，如注明的<strong>CORBA</strong>（Common Object Request Broker Architeeture），就是一种<strong>公用的对象需求的转换结构</strong>，还有<strong>COM101</strong>（Common Object Model 101）等 </p>\n<h4 id=\"5-面向开源软件的程序设计方法\"><a href=\"#5-面向开源软件的程序设计方法\" class=\"headerlink\" title=\"5. 面向开源软件的程序设计方法\"></a>5. 面向开源软件的程序设计方法</h4><p>随着开源软件（Open Source）的出现和发展，利用开源软件进行程序设计，已经成为越来越普遍的方法。对于开源软件，社会上和学术界有不同的看法。支持者认为<strong>这实现了软件的重用，能够大大提高软件生产的效率，是一种革命性的进步</strong></p>\n<p>在一些应用面广，流程比较清晰，比较规范的应用领域，开源代码的重用是比较有把握的。</p>\n<p>使用开源代码并不一定会减轻工作量。实际上这对于软件开发人员，特别是<strong>项目负责人</strong>或软件系统的<strong>架构师</strong>来说，要求更高、更难。</p>\n<h3 id=\"2-3-软件开发过程的管理\"><a href=\"#2-3-软件开发过程的管理\" class=\"headerlink\" title=\"2.3 软件开发过程的管理\"></a>2.3 软件开发过程的管理</h3><p>一般来说，项目管理的要素是进度、质量、费用（开支）、资源利用。对于软件开发来说，核心是<strong>质量问题</strong></p>\n<h4 id=\"1-什么样的软件才是好的软件\"><a href=\"#1-什么样的软件才是好的软件\" class=\"headerlink\" title=\"1. 什么样的软件才是好的软件?\"></a>1. 什么样的软件才是好的软件?</h4><ol>\n<li>正确地实现所要求的<strong>功能</strong>，准确地给出预定的输出结果</li>\n<li>用户<strong>界面友好</strong>，符合实际用户的使用习惯于知识能力</li>\n<li>具有足够的<strong>速度</strong>（而不是越快越好），能在符合用户要求的时间额度内，给出所要求的处理结果</li>\n<li>具有足够的<strong>可靠性</strong>，能够在各种干扰下保持正常的工作</li>\n<li>程序<strong>易读</strong>，<strong>结构良好</strong>，<strong>文档齐全</strong>，从而保证系统易于修改</li>\n</ol>\n<h4 id=\"2-好的程序员与好的项目组\"><a href=\"#2-好的程序员与好的项目组\" class=\"headerlink\" title=\"2. 好的程序员与好的项目组\"></a>2. 好的程序员与好的项目组</h4><p>就单个程序员来说，主要的指标包括以下几个方面：</p>\n<ol>\n<li>具有程序设计所需要的<strong>基本知识与技能</strong>，如关于数理逻辑的知识与训练，关于各类数据结构的概念及处理方法等</li>\n<li>对本项目<strong>所在的领域有较深入的了解</strong>，从而能够准确地理解用户的信息需求，正确地把握有关的信息流程与信息处理原则</li>\n<li>对于软件开发的<strong>技术环境比较熟悉</strong>，包括硬件设备、软件环境和网络环境。特别是对于所用的语言，应当有足够的、实际运用的经验</li>\n</ol>\n<p>就规模超出单个程序员的工作量的大型软件来说：</p>\n<ol>\n<li>保证严格地在<strong>本模块范围内操作</strong>，绝不使用可能干扰其他模块的命令或函数</li>\n<li>严格<strong>按总体设计</strong>的要求和理解去<strong>传递参数值</strong>，绝不随意修改其内容或含义</li>\n<li>在对<strong>公用的文件</strong>或<strong>数据库</strong>进行存取时，必须完全地、准确地统一<strong>规定的格式</strong>去操作，决不能擅自改变 </li>\n<li>在使用<strong>标识符</strong>时，应按照<strong>统一</strong>的原则，尽量使用易于看出逻辑含义的名称。</li>\n<li>严格按照统一的要求编写<strong>文档</strong>，在内容、格式、表达方式、符号使用上遵循项目组的统一规定</li>\n<li>尽量保持程序<strong>风格</strong>的统一，如注释行的安排，行末空格的使用等。</li>\n</ol>\n<h4 id=\"3-怎样建立一个好的项目组\"><a href=\"#3-怎样建立一个好的项目组\" class=\"headerlink\" title=\"3. 怎样建立一个好的项目组?\"></a>3. 怎样建立一个好的项目组?</h4><p>根据CMM模型及其他一些材料，一个好的项目组至少具备以下几个条件：</p>\n<ol>\n<li>有严格的、成文的工作规范和文档标准，而且应当为全体成员所熟知，并且切实得到遵守</li>\n<li>人员之间有严格的分工，除了程序员之外，必须有专门的秘书（负责文档的收集、审核及保管）</li>\n<li>每个项目都要事先制定详细的时间表，并且得到严格执行。每一项目完成之后都有完整的资料，并得到妥善保存</li>\n</ol>\n<h2 id=\"第3章-软件开发工具的理论基础\"><a href=\"#第3章-软件开发工具的理论基础\" class=\"headerlink\" title=\"第3章 软件开发工具的理论基础\"></a>第3章 软件开发工具的理论基础</h2><p>软件开发工具的目的十分明确，就是从<strong>信息管理</strong>与<strong>信息处理</strong>方面，给软件开发人员提供支持与帮助</p>\n<p>本章重点阐述概念模式、信息库（或称为中心库）、人机界面以及项目管理</p>\n<h3 id=\"3-1-软件开发过程的信息需求\"><a href=\"#3-1-软件开发过程的信息需求\" class=\"headerlink\" title=\"3.1 软件开发过程的信息需求\"></a>3.1 软件开发过程的信息需求</h3><p>软件开发过程的<strong>信息</strong>：</p>\n<ol>\n<li>有关<strong>系统环境</strong>、<strong>现状及需求</strong>的信息。此类信息由<strong>用户</strong>提出</li>\n<li>有关软件的<strong>功能设计</strong>与<strong>物理设计</strong>的各种信息。这类信息是由<strong>分析人员</strong>（或设计人员）根据<strong>需求分析</strong>而形成的，它体现为<strong>设计方案</strong></li>\n<li>软件成果本身，包括<strong>程序</strong>与<strong>文档</strong>。<strong>程序代码</strong>必然是在计算机内的，<strong>文档</strong>也常常以联机方式提供</li>\n<li>用户对系统的各种<strong>变更要求</strong>，以及系统的各种变更的记录。而这类信息是<strong>跨软件开发周期的</strong></li>\n</ol>\n<p>围绕以上四类信息，涉及的<strong>信息管理工作</strong>有以下几方面：</p>\n<ol>\n<li>许多信息需要<strong>长期保存</strong>，因为它们并非只用一次，而是需要不断更新，不断被调用</li>\n<li>在许多环节上都要进行数据的<strong>转换</strong>或<strong>加工</strong></li>\n<li>大量的人与人之间的信息交流</li>\n</ol>\n<p>软件开发工具正是为上述四类信息的<strong>合理存储</strong>、<strong>正确转化</strong>和<strong>顺畅流通</strong>提供帮助</p>\n<p>软件开发工具用到的比较重要的<strong>理论和方法</strong>:</p>\n<ol>\n<li>**认知科学(Cognitive Science)<strong>中关于</strong>概念模式(Conceptual Model)**的概念与方法</li>\n<li><strong>数据库技术</strong>的理论与方法</li>\n<li>编译技术<strong>的有关方法</strong></li>\n<li><strong>关于</strong>人机界面<strong>的理论与方法</strong></li>\n<li>管理科学<strong>中关于项目管理与版本管理的理论与方法</strong></li>\n<li><strong>系统科学与系统工程</strong>中的有关理论与方法</li>\n</ol>\n<h3 id=\"3-2-概念模式及其作用\"><a href=\"#3-2-概念模式及其作用\" class=\"headerlink\" title=\"3.2 概念模式及其作用\"></a>3.2 概念模式及其作用</h3><p>Conceptual Model概念模式 ,也译为概念模型。它指人们在认识事物过程中，对于某一事物或某一系统形成的、抽象的、一般化的<strong>框架</strong>。这种概念模式具有<strong>主观性</strong></p>\n<p>概念模式是人们认识客观世界的一种方法，一种工具</p>\n<p>概念模式是人们在长期的实践活动中逐渐形成的</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/12654026/1633332334126-48d2eb69-9cea-4f35-aef9-f203e4070fef.jpeg\" alt=\"img\"></p>\n<p>从上图中可以看出概念模式总是在一定理论、思想指导之下形成的，同时又不断地根据实际情况<strong>修正</strong></p>\n<p>概念模式在认识中的作用十分重要，同时作为<strong>交流</strong>与<strong>表达工具</strong>也是十分重要的</p>\n<p>如何评价概念模式:</p>\n<p>概念模式的意义决定了它的相对性，即面对各种不同的用途，必然会有不同的形式的概念模式。一般来说，它们是各有各的用处，不能互相代替，也无法一般地说哪个更好或更有利。对于有一定的应用领域而言，如果有多种概念模式，则可以从它的表达能力，是否方便易用，是否严格，有没有二义性（容易引起误解）等方面进行评价和比较</p>\n<p>作为表达与交流的工具，必须<strong>简单明了、易于理解</strong></p>\n<p>正确理解、掌握和运用概念模式，是做好软件开发工作的基础，也是掌握和运用软件开发工具的基础</p>\n<p>常见的概念模式有以下:</p>\n<ol>\n<li><strong>框图</strong>(Flow Chart)<ol>\n<li>框图是人们编写软件时用的<strong>最早</strong>的一种概念模式,用来描述程序执行的<strong>逻辑过程。</strong></li>\n<li>当软件规模不太大时，它比较适用</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/12654026/1633334163055-5decab81-0c90-4699-9621-dec830ead1c2.jpeg\" alt=\"img\"></p>\n<ol>\n<li><p><strong>结构图</strong>(Structure Chart)又叫模块结构图</p>\n</li>\n<li><p>它的观点是,程序的调用方式有三种: 顺序调用、选择调用、循环调用</p>\n</li>\n<li><p><strong>数据流程图</strong>(Data Flow Diagram)</p>\n<ol>\n<li>简称DFD</li>\n<li>面对的是一个<strong>系统的信息流程</strong></li>\n<li>它更多地用于描述某一业务处理系统的<strong>信息来源</strong>、<strong>存储</strong>、<strong>处理</strong>、<strong>去向</strong>的全面情况</li>\n<li>基本思想是把信息流看成一个组织或系统运作的<strong>线索</strong>，力图简明扼要地勾画出全局</li>\n<li>和结构图相比，它更适用于<strong>客观描述</strong></li>\n</ol>\n</li>\n<li><p><strong>实体关系图</strong>(Entity-Relationship Diagram)</p>\n<ol>\n<li>简称E-R图</li>\n<li>用于<strong>描述静态数据结构</strong>的概念模式</li>\n<li>它以<strong>实体</strong>、<strong>关系</strong>、<strong>属性</strong>三个基本概念概括数据的基本结构</li>\n<li>广泛应用于<strong>数据库</strong>的设计中</li>\n</ol>\n</li>\n<li><p>**数据字典(**Data Dictionary)</p>\n<ol>\n<li>简称DD</li>\n<li>描述<strong>数据内容</strong>的概念模式</li>\n</ol>\n</li>\n<li><p><strong>时序网络</strong>(Petri Net)</p>\n<ol>\n<li>它主要描述<strong>系统状态</strong>及其转换方式</li>\n<li>常用于一些<strong>实时控制</strong>方面的软件的功能描述</li>\n</ol>\n</li>\n<li><p><strong>数学与逻辑模型</strong></p>\n<ol>\n<li>作为逻辑模型的表达方式，<strong>决策树</strong>和<strong>决策表</strong>也是经常使用的</li>\n</ol>\n</li>\n<li><p>计算机模拟模型</p>\n<ol>\n<li>计算机模拟是一种强有力的概念模式</li>\n<li>利用计算机大量、高速处理信息的能力，在计算机内设置一定的环境（如资源条件等），又以程序来实现客观系统中的某些规律或规则，在二者基础上，计算机就可以高速运行，以便人们观察与预测客观系统的状况<br>软件开发的质量与效率可以由此得到很大的提高。在此基础上，软件开发工具进一步用计算机来帮助人们使用和实现这些概念模式，使软件开发工作提高一步</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"3-3-信息库及其一致性\"><a href=\"#3-3-信息库及其一致性\" class=\"headerlink\" title=\"3.3 信息库及其一致性\"></a>3.3 信息库及其一致性</h3><p>信息库（Repository）译法不统一，有的专家译为中心库、总库、主库等。实际上，从它原义来说，无非就是数据库。但他不同于Database或Data Warehouse</p>\n<p><strong>Database</strong>是在文件系统基础上发展起来的一种<strong>数据管理技术</strong>，它的重点在于合理地<strong>组织数据</strong>，体现出数据之间的<strong>逻辑关系</strong>，并尽可能地帮助用户检索，减少冗余。</p>\n<p>而<strong>数据仓库</strong>(Data Warehouse)是近年来针对大批数据的分析利用而提出来的概念。它的<strong>基本思想</strong>是：现实中的大量原始数据与实际的应用是有相当<strong>距离</strong>的，为了能够切实为企业管理者提出对管理真正<strong>有用</strong>的信息，就要对信息或数据进行多次的<strong>加工或提炼</strong>，从而得出许多派生的或综合的数据</p>\n<p>信息库的<strong>特点</strong>：信息库是一个包罗万象的，随着项目进度不断修改与补充的<strong>数据集合</strong>。作为软件开发全过程的<strong>信息管理总枢纽</strong>，它的数据结构是相当复杂的，而且会随着时间不断变化，因此保持一致性的任务变得十分复杂和艰巨。</p>\n<p>信息库的研究主要在以下方面:</p>\n<ol>\n<li>信息库的内容应当包括哪些方面<ol>\n<li>所述软件的工作环境、功能需求、性能要求、有关的各种<strong>信息来源</strong>的状况、用户状况、硬件环境以及在该专业领域中的作用等外部信息<ol start=\"2\">\n<li><strong>需求分析</strong>阶段中收集的有关用户的各种信息，包括用户本身提供的<ol start=\"3\">\n<li><strong>逻辑设计</strong>阶段的各种调查材料和由此生成的各种文档，包括调查记录 、原始数据、报表及单证的样本、绘制的各种图以及最后生成的系统说明书<ol start=\"4\">\n<li><strong>编程阶段</strong>的所有成果，包括<strong>程序代码</strong>、<strong>框图</strong>、<strong>变量说明</strong>、<strong>测试情况</strong>（测试数据及输出结果）、<strong>验收报告</strong>、<strong>使用说明</strong>等。<ol start=\"5\">\n<li><strong>运行及使用</strong>情况的详细记录<ol start=\"6\">\n<li><strong>维护及修改</strong>的情况<ol start=\"7\">\n<li><strong>项目管理</strong>的有关信息、人员变更、资金投入、进度计划及实施情况。还包括<strong>版本信息</strong></li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>信息库应当具备哪些管理功能<ol>\n<li>需要把计算机内外的信息存储统一起来管理</li>\n<li>信息库面对 分析人员、程序员和维护人员（一般不直接面对用户）等不同的对象，由于他们各有各的权限和使用目标，所以除了规定复杂的内部结构以存放信息外，还需要认真设计有关的界面</li>\n</ol>\n</li>\n<li>如何保持一致性<ol>\n<li>由于软件环境、需求以及它本身都在不断变化，信息库中的信息需要不断更新</li>\n<li>这里说的更新与一般的更新不同，信息库中的内容一般不删除，当有新的信息需要存入时，旧的信息只是加上时间标志移入历史信息中去，并且它还与新的信息保持着历史的、逻辑的联系</li>\n<li>一个模块的更新往往带来其他模块的相应变更，并不是一个模块更新后就能够自然而然地与其他模块一起构成一个新的版本</li>\n<li>对于一些国际性的大软件公司来说，各种语言的资料之间 的一致性同样需要认真的、细致的组织与安排</li>\n</ol>\n</li>\n</ol>\n<p>因保持信息库的<strong>一致性</strong>，是信息库研究中的<strong>核心问题</strong></p>\n<h3 id=\"3-4-人机界面及其管理\"><a href=\"#3-4-人机界面及其管理\" class=\"headerlink\" title=\"3.4 人机界面及其管理\"></a>3.4 人机界面及其管理</h3><p>《用户界面程序设计–原理与实例》。这本书讨论了一系列原则</p>\n<p>关于用户界面的<strong>基本原则</strong>， 该书列举了以下几个方面：</p>\n<ol>\n<li>用户界面的主要功能是<strong>通信</strong></li>\n<li>用户界面必须<strong>始终一致</strong></li>\n<li>用户界面必须使用户随时掌握任务的<strong>进展状况</strong></li>\n<li>用户界面必须能<strong>提供帮助</strong></li>\n<li>宁可让<strong>程序多干</strong>，不可让用户多干 </li>\n</ol>\n<p>该书还特别讨论了在人机界面设计中经常遇到的一个困难的权衡：<strong>灵活性</strong>和<strong>一致性的矛盾</strong></p>\n<p>IBM的AD/Cycle提供了应用系统及其开发过程中的一个总框架，其应用系统框架为<strong>系统应用体系结构</strong>（Systems Application Architecture——SAA）</p>\n<p>SAA包括三个方向的接口：程序员接口（CPI）、通信接口（CCS）、用户接口（CUA）</p>\n<p><strong>人机交互的手段</strong>可归结于8个方面：键盘操作、屏幕滚动、菜单选择、帮助系统、鼠标操作、色彩应用、数据录入、信息显示</p>\n<p>由于技术的发展，这个归纳已经不能说是完全的了</p>\n<h3 id=\"3-5-项目管理与版本管理\"><a href=\"#3-5-项目管理与版本管理\" class=\"headerlink\" title=\"3.5 项目管理与版本管理\"></a>3.5 项目管理与版本管理</h3><h4 id=\"项目管理\"><a href=\"#项目管理\" class=\"headerlink\" title=\"项目管理\"></a>项目管理</h4><p>项目管理是指与固定的生产线上的日常生产管理不同的，具有更大的变动性，时间性的另一类挂你任务。</p>\n<p>项目管理具有以下四个突出的特点：</p>\n<ol>\n<li>子任务<strong>多</strong>，关系<strong>复杂</strong></li>\n<li>任务<strong>不可重复</strong>，形式不断<strong>变更</strong></li>\n<li>协调组织**的任务十分突出，资源浪费闲置的风险与合理地优化组合、提高效益的机会并存</li>\n<li>信息处理工作的作用与意义更为突出</li>\n</ol>\n<p><strong>进度</strong>和<strong>质量</strong>对于软件开发来说，是最关键的问题</p>\n<p>但是，软件开发工作还有自己的不同于一般项目管理的特点。一般工程项目没有<strong>版本更新</strong>的问题</p>\n<p>项目管理的<strong>基本目标</strong>：</p>\n<ol>\n<li>使产品(或工程)的<strong>质量</strong>得到有效的<strong>控制</strong></li>\n<li>保证整个系统按预定的<strong>进度</strong>完成</li>\n<li>有效地利用<strong>各种资源</strong>，尽可能使资源的闲置与浪费减少</li>\n<li>控制与<strong>降低成本</strong> </li>\n</ol>\n<p>项目管理中的<strong>方法</strong>：</p>\n<ol>\n<li>工程计划网络方法（计划评审技术）</li>\n<li>甘特图（Gantt Chart）</li>\n<li>检查点方法（Check Point）</li>\n<li>排队论等</li>\n</ol>\n<h4 id=\"版本管理\"><a href=\"#版本管理\" class=\"headerlink\" title=\"版本管理\"></a>版本管理</h4><p>版本管理的核心是保证<strong>两个一致性</strong>。从时间上说，它的主要关心点是系统的逐步完善，以前达到的成果不要丢失</p>\n<p>每一步新的进步都要切实<strong>与以前的工作一致</strong>，是改进而不是破坏或降低系统的已有功能</p>\n<p>每<strong>一局部与整体保持一致</strong>,合理地判断每一次修改的必要性及影响范围</p>\n<p>版本管理的<strong>具体方法</strong>：</p>\n<ol>\n<li>规定长远的版本更新计划</li>\n<li>制定版本有关的信息范围及收集、管理方法</li>\n<li>在项目组内明确分工</li>\n<li>在程序编写、测试、文档缩写等工作中贯穿项目管理的思想及要求</li>\n</ol>\n<p><strong>用户的反馈信息</strong>是项目管理与版本管理的重要资源。因此在信息库的组织、项目管理或版本管理中，都要有其对应的位置</p>\n<h2 id=\"第4章-软件开发工具的技术要素\"><a href=\"#第4章-软件开发工具的技术要素\" class=\"headerlink\" title=\"第4章 软件开发工具的技术要素\"></a>第4章 软件开发工具的技术要素</h2><p>由于软件开发工具一般都较为复杂、复杂，所以它的<strong>功能设计</strong>与<strong>总体结构</strong>是必须首先认真考虑的</p>\n<h3 id=\"4-1-基本功能与一般结构\"><a href=\"#4-1-基本功能与一般结构\" class=\"headerlink\" title=\"4.1 基本功能与一般结构\"></a>4.1 基本功能与一般结构</h3><h4 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h4><p>软件开发工具的<strong>基本功能</strong>:</p>\n<ol>\n<li>提供描述软件状况及其开发过程的<strong>概念模式</strong>，以协助软件开发人员认识软件工作的环境与要求，合理地组织与管理软件开发的工作过程。</li>\n<li>提供<strong>存储和管理</strong>有关<strong>信息</strong>的机制与手段。简单地说，就是提供一个信息库和一个人机界面</li>\n<li>帮助使用者编制、生成及修改各种<strong>文档</strong>。（实现需信息库的支持）</li>\n<li>帮助使用者编写程序代码，即一般常说的<strong>代码生成</strong></li>\n<li><strong>对于历史信息进行跨生命周期的管理，把</strong>项目进度<strong>与</strong>版本更新<strong>的有关信息科学地</strong>管理**起来</li>\n</ol>\n<p>完整的、一体化的软件开发工具应当具备以上这些功能</p>\n<h4 id=\"一般结构\"><a href=\"#一般结构\" class=\"headerlink\" title=\"一般结构\"></a>一般结构</h4><p><strong>总控</strong>和<strong>人机界面</strong>处于一般结构中的<strong>中间位置</strong>，它是使用者和软件开发工具之间交流信息，实现所有的支持功能的桥梁。总控与人机界面的中心位置是不言而喻的、顺理成章的。</p>\n<p>系统中的另一个重要部分是<strong>信息库及其管理。</strong>信息库的结构框架反映了人们对软件产品及软件开发过程的基本看法，信息库内容的<strong>丰富程度</strong>是软件开发工具的功能与作用的最基本的依据。如果说总控和人机界面使用户面对一个良好的工作环境的话，那么在这个环境中，工作的<strong>范围及深度</strong>取决于信息库的<strong>功能和内容</strong></p>\n<p>除了直接通过人机对话提供查询之外，最重要的两个信息就是<strong>代码生成</strong>与<strong>文档生成</strong></p>\n<p>一般结构中没有反映出来的另一个<strong>技术要素</strong>是<strong>项目管理</strong>和<strong>版本管理</strong></p>\n<p>如果要实现跨越开发周期的信息共享、知识重用以及软件重用，那么它的信息管理功能就必须大大加强</p>\n<h3 id=\"4-2-总控与人机界面\"><a href=\"#4-2-总控与人机界面\" class=\"headerlink\" title=\"4.2 总控与人机界面\"></a>4.2 总控与人机界面</h3><p>作为一个完整的、一体化的软件开发工具，总控和人机界面处于中心的位置</p>\n<p>解决软件配置或集成（Software Configuration）的问题的<strong>实质</strong>: 设立一个<strong>有效的总控</strong>，它能够在各个具体工具之上、实现信息的<strong>正确传递与转换</strong>，帮助人们完成协调与配合的工作，从而形成一个<strong>统一的、完整的支撑环境</strong>，并通过一个统一的、友好的<strong>人机界面与用户对话</strong></p>\n<p>总控和人机界面的<strong>技术要点</strong>：<strong>面向使用者</strong>、<strong>保证信息的准确传递</strong>、<strong>保证系统的开放性（或灵活性）</strong></p>\n<p>AD/Cycle是IBM根据多年软件开发的经验形成的对于软件开发过程的抽象理解，将软件开发过程的每一个周期分为<strong>五个阶段</strong>：</p>\n<ol>\n<li><p>需求分析阶段</p>\n<ol>\n<li>任务是建立逻辑模型</li>\n<li>首先建立起软件所处领域或环境的模型</li>\n<li>其次建立软件所要处理的信息的静态模型，即数据模型</li>\n<li>最后建立信息流通的模型，即信息的来源、去向、存储及处理的逻辑过程</li>\n</ol>\n</li>\n<li><p>分析设计阶段</p>\n<ol>\n<li>包括数据结构的详细设计、处理过程的详细设计、子系统或模块的划分以及它们之间相互联系的具体规定</li>\n<li>还应当完成屏幕设计、报表设计、数据库的物理设计</li>\n</ol>\n</li>\n<li><p>编码阶段</p>\n<ol>\n<li>编码阶段指具体地编写软件的阶段，这里是实际的程序代码的产生点</li>\n</ol>\n</li>\n<li><p>测试阶段</p>\n<p>测试阶段指是对已经完成的各个模块或子系统进行测试、调整，以便最终形成完整的软件。这就需要准备测试数据，收集与分析测试结果</p>\n</li>\n<li><p>维护阶段<br> 维护阶段主要是组织管理软件的日常运行，收集运行中的状态信息及出现的问题，并及时进行局部的修改与完善 </p>\n<p>所谓面向用户，最根本的是要立足于符合实际的应用领域，符合软件开发人员思路的概念模型</p>\n</li>\n</ol>\n<p><strong>软件开发的技术原则</strong>:</p>\n<ol>\n<li><p><strong>面向用户原则</strong>，具体体现在两方面：</p>\n</li>\n<li><ol>\n<li>总控对各部分的调度与安排应当符合上述模式</li>\n<li>向用户提供的统一界面应当体现这个模式</li>\n</ol>\n</li>\n<li><p><strong>保证各部分之间信息的准确传递</strong>。信息能否准确地从一个部分传送到另一个部分，就成为一体化是否成功的关键</p>\n</li>\n<li><p>保证系统的开放型或灵活性</p>\n</li>\n</ol>\n<p>以上三项原则当然是对整个软件开发工具而言的，但是它们的<strong>实现</strong>，主要体现在<strong>总控</strong>和<strong>人机界面</strong>这个中心环节中</p>\n<h3 id=\"4-3-信息库及其管理\"><a href=\"#4-3-信息库及其管理\" class=\"headerlink\" title=\"4.3 信息库及其管理\"></a>4.3 信息库及其管理</h3><p>信息库(Repository)是软件开发工具的<strong>基础</strong>。合理地组织信息库的内容，加强信息库的管理内容，是软件开发工具的又一个重要的技术要素。</p>\n<p>信息库的<strong>技术要素</strong>：</p>\n<ol>\n<li><p>信息库的内容</p>\n</li>\n<li><p>信息库的组织方式</p>\n</li>\n<li><p>信息库的管理功能</p>\n</li>\n<li><p>历史信息的处理方法</p>\n</li>\n</ol>\n<h4 id=\"1-信息库的内容\"><a href=\"#1-信息库的内容\" class=\"headerlink\" title=\"1. 信息库的内容\"></a>1. 信息库的内容</h4><ol>\n<li><p>关于软件应用的领域与环境的状况。主要用于<strong>分析设计阶段</strong></p>\n</li>\n<li><p>设计成果，包括逻辑设计与物理设计的成果。主要包括数据流程图、数据字典、系统结构图、数据库的逻辑设计、各模块的设计要求，以及由此形成的设计文档。主要<strong>是为了组织实际编码工作</strong></p>\n</li>\n<li><p>运行状况的记录。包括 运行运行效率、作用、用户反映、故障情况、故障的原因及处理情况</p>\n</li>\n<li><p>有关项目管理与版本管理的信息。这属于<strong>跨生命周期</strong>的信息</p>\n</li>\n</ol>\n<h4 id=\"2-信息库的组织方式\"><a href=\"#2-信息库的组织方式\" class=\"headerlink\" title=\"2. 信息库的组织方式\"></a>2. 信息库的组织方式</h4><p>人们最初的思路是<strong>集中存储</strong>，集中存储的思想是建立一个庞大的数据库，把上述各种信息都存放在这个数据库中，而各种工具或实现各项单项功能的模块则围绕在这个信息库的周围，对这个信息进行录入、修改、查询、删除。这种想法比较自然，而且充分利用已有的数据库技术，比较<strong>容易保持一致性。</strong>但是，它的<strong>缺点</strong>是<strong>与前面所要求的模块化相冲突</strong></p>\n<p>于是就有<strong>分散存储</strong>的想法出现，即把信息分别存入不同的数据库，由不同的功能模块来处理。这种方法的<strong>优点</strong>是<strong>易于变更和剪裁，一旦某一部分发生变更，不影响整个系统</strong>。但是各部分之间的一致性无从保证。针对这个问题，专家提出了第三种思路：<strong>逻辑上统一，物理上分散</strong>，设立统一的信息库管理模块来进行管理。它通过信息库管理模块来对分散的各个数据库进行存取，并进行一致性的检查与维护。这样一来，数据库与模块都实现了模块化，既保持了一致性，又保证了灵活性</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/12654026/1633702984287-6350d364-03f6-45fd-8ead-016b66159338.jpeg\" alt=\"img\"></p>\n<h4 id=\"3-信息库的管理功能\"><a href=\"#3-信息库的管理功能\" class=\"headerlink\" title=\"3. 信息库的管理功能\"></a>3. 信息库的管理功能</h4><p>图4-1中粗略地画出了三项，录入更新、使用查询、一致性维护。其中许多功能是数据库管理系统所具备的</p>\n<p>与一般数据库管理系统不同的有：</p>\n<ol>\n<li>信息之间<strong>逻辑联系</strong>的识别与记录</li>\n<li>如何实现定量信息与文字信息的协调一致</li>\n</ol>\n<h4 id=\"4-历史信息的处理方法\"><a href=\"#4-历史信息的处理方法\" class=\"headerlink\" title=\"4. 历史信息的处理方法\"></a>4. 历史信息的处理方法</h4><p>如何处理历史信息是信息库的一个困难问题</p>\n<p>实际操作中出现2个具体的困难：</p>\n<ol>\n<li>历史信息的数量太大，占用存储设备过多<ol>\n<li>解决方法：一般采用脱机备份的方法解决</li>\n</ol>\n</li>\n<li>历史信息格式不一致，难以有效地利用<ol>\n<li>解决方法：加强标准化，稳定数据结构</li>\n<li>这需要应用一些智能方法，使得跨越生命周期的信息得以相互转化、实现共享与重用</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"4-4-文档生成与代码生成\"><a href=\"#4-4-文档生成与代码生成\" class=\"headerlink\" title=\"4.4 文档生成与代码生成\"></a>4.4 文档生成与代码生成</h3><p>除了通过屏幕上的对话获取信息支持之外，使用者从软件开发工具得到的<strong>最主要的帮助，应当来自文档生成与代码生成两种方式</strong></p>\n<h5 id=\"1-代码生成-Code-Generator\"><a href=\"#1-代码生成-Code-Generator\" class=\"headerlink\" title=\"1. 代码生成(Code Generator)\"></a>1. 代码生成(Code Generator)</h5><p>代码生成器的基本任务是根据设计要求,自动地或者半自动地产生响应的某种语言的程序</p>\n<p>输出程序代码是这个模块的目标，<strong>输出的代码有两种情况</strong>：</p>\n<ol>\n<li>某种高级程序设计语言的<strong>代码</strong><ol>\n<li>优点：使用者可以在这基础上进一步修改加工，即利用自动生成模块作为一个原型，然后在此基础上形成自己所要求的系统（或系统的一部分）</li>\n<li>缺点：功能比较死，效率不高，因此还需要修改</li>\n</ol>\n</li>\n<li>某种机器（包括硬件和操作系统）环境下可运行的<strong>机器指令</strong><ol>\n<li>优点：可以直接运行，从而立即检查是否符合要求</li>\n</ol>\n</li>\n</ol>\n<p>原则：程序设计归根到底只要由人来做的，任何工具都只能发挥帮助和支持的作用，而不能完全代替人来工作</p>\n<p>生成代码时依据的是三个方面的资料：</p>\n<ol>\n<li>信息库里已有的有关资料</li>\n<li>代码生成器还要利用各种标准模块的框架和构件</li>\n<li>使用者通过屏幕前 的操作送入的信息</li>\n</ol>\n<h5 id=\"2-文档生成\"><a href=\"#2-文档生成\" class=\"headerlink\" title=\"2. 文档生成\"></a>2. 文档生成</h5><p>文档生成的功能与代码生成相比，数量更大，内容更复杂</p>\n<p>文档生成包括：<strong>文章、表格、图形</strong></p>\n<h3 id=\"4-5-项目管理与版本管理\"><a href=\"#4-5-项目管理与版本管理\" class=\"headerlink\" title=\"4.5 项目管理与版本管理\"></a>4.5 项目管理与版本管理</h3><p>从技术上讲，它们的<strong>核心问题</strong>是<strong>跨生命周期的信息的管理问题</strong>。前面章节提到的历史信息的处理也是项目管理与版本管理的关键问题</p>\n<p>项目数据库实际上是信息库的一个组成部分。它的内容与另外几部分不同，它记录的是项目本身进展的各种信息。这里的关键是<strong>质量</strong>、<strong>进度</strong>、<strong>资源配置</strong>和<strong>费用</strong>四个基本问题</p>\n<p>在AD/Cycle的总框架中，对项目管理应当考虑的范围给出了如下的<strong>规定</strong>：</p>\n<ol>\n<li>研究与确定开发工作的方针与方法</li>\n<li>开发任务的划分与分工</li>\n<li>资源状况</li>\n<li>人员情况</li>\n<li>变更情况</li>\n<li>质量情况</li>\n</ol>\n<p>关于版本的信息，有的工具中把它作为项目数据库的一部分处理。它的主要内容是各个版本的编号、功能改变、模块组成、文档状况、推出时间、用户数量（或用户名单）、用户反映、封存情况等。</p>\n<h2 id=\"第5章-软件开发工具的使用与开发\"><a href=\"#第5章-软件开发工具的使用与开发\" class=\"headerlink\" title=\"第5章 软件开发工具的使用与开发\"></a>第5章 软件开发工具的使用与开发</h2><p>人们首先遇到的问题往往是购买现成的软件开发工具还是自己开发专用的工具。对于这个问题，不能简单地回答是或不是，它与具体工作的条件、环境、<strong>人员素质</strong>、项目特征都有不可分割的联系</p>\n<h3 id=\"5-1-购置与开发权衡\"><a href=\"#5-1-购置与开发权衡\" class=\"headerlink\" title=\"5.1 购置与开发权衡\"></a>5.1 购置与开发权衡</h3><p>购买市场上已有的软件开发工具，能帮助人们：</p>\n<ol>\n<li>减轻一定的工作负担</li>\n<li>使工作的组织管理比较规范</li>\n<li>信息的管理与检索比较方便</li>\n</ol>\n<p>真正经过考验的、一体化的软件开发工具还不多。他们的作用于可靠程度还不尽人意。</p>\n<p>自己开发的优点：</p>\n<ol>\n<li>目标明确，切实符合自己的需要，便于进一步扩容和升级</li>\n<li>不存在引进外面产品时不可避免的冲突与不一致</li>\n</ol>\n","text":" 第1章 绪论软件产品的质量、效率、价格已成为各方关注的十分重要的问题。 1.1 软件开发工具的由来 操作系统、汇编程序、汇编系统时软件开发中必不可少的工具，但...","permalink":"/post/examination/tool_for_software_development","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"应试","slug":"应试","count":5,"path":"api/categories/应试.json"}],"tags":[{"name":"升本","slug":"升本","count":3,"path":"api/tags/升本.json"},{"name":"自考","slug":"自考","count":2,"path":"api/tags/自考.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC1%E7%AB%A0-%E7%BB%AA%E8%AE%BA\"><span class=\"toc-text\">第1章 绪论</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E7%94%B1%E6%9D%A5\"><span class=\"toc-text\">1.1 软件开发工具的由来</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1.2 软件开发工具的概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E5%8A%9F%E8%83%BD%E4%B8%8E%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">1.3 软件开发工具的功能与性能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">1. 软件开发的过程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E5%8A%9F%E8%83%BD%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">2. 软件开发工具的功能要求</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">3. 软件开发工具的性能</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E7%B1%BB%E5%88%AB\"><span class=\"toc-text\">1.4 软件开发工具的类别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%8C%89%E5%B7%A5%E4%BD%9C%E9%98%B6%E6%AE%B5%E5%88%92%E5%88%86\"><span class=\"toc-text\">1. 按工作阶段划分</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%8C%89%E9%9B%86%E6%88%90%E7%A8%8B%E5%BA%A6%E5%88%92%E5%88%86\"><span class=\"toc-text\">2. 按集成程度划分</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%8C%89%E4%B8%8E%E7%A1%AC%E4%BB%B6%E3%80%81%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%85%B3%E7%B3%BB%E5%88%92%E5%88%86\"><span class=\"toc-text\">3. 按与硬件、软件的关系划分</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E7%A0%94%E7%A9%B6%E4%B8%8E%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">1.5 软件开发工具的研究与使用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC2%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E5%8F%8A%E5%85%B6%E7%BB%84%E7%BB%87\"><span class=\"toc-text\">第2章 软件开发过程及其组织</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E5%9B%B0%E9%9A%BE\"><span class=\"toc-text\">2.1 软件开发的困难</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">1. 软件开发的基本问题</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%A4%A7%E5%9E%8B%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%9B%B0%E9%9A%BE\"><span class=\"toc-text\">2. 大型软件开发中的困难</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%9B%B0%E9%9A%BE%E4%BA%A7%E7%94%9F%E7%9A%84%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">3. 困难产生的原因</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%91%E5%B1%95\"><span class=\"toc-text\">2.2 软件开发方法的发展</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%BB%93%E6%9E%84%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1. 结构化程序设计方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2. 软件工程方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3. 面向对象的程序设计方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%8D%B3%E6%8F%92%E5%8D%B3%E7%94%A8%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">4. 即插即用的程序设计方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E9%9D%A2%E5%90%91%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">5. 面向开源软件的程序设计方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E7%9A%84%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">2.3 软件开发过程的管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%89%8D%E6%98%AF%E5%A5%BD%E7%9A%84%E8%BD%AF%E4%BB%B6\"><span class=\"toc-text\">1. 什么样的软件才是好的软件?</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%A5%BD%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%8E%E5%A5%BD%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%BB%84\"><span class=\"toc-text\">2. 好的程序员与好的项目组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%80%8E%E6%A0%B7%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%BB%84\"><span class=\"toc-text\">3. 怎样建立一个好的项目组?</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC3%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">第3章 软件开发工具的理论基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E7%9A%84%E4%BF%A1%E6%81%AF%E9%9C%80%E6%B1%82\"><span class=\"toc-text\">3.1 软件开发过程的信息需求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E6%A6%82%E5%BF%B5%E6%A8%A1%E5%BC%8F%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">3.2 概念模式及其作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E4%BF%A1%E6%81%AF%E5%BA%93%E5%8F%8A%E5%85%B6%E4%B8%80%E8%87%B4%E6%80%A7\"><span class=\"toc-text\">3.3 信息库及其一致性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-%E4%BA%BA%E6%9C%BA%E7%95%8C%E9%9D%A2%E5%8F%8A%E5%85%B6%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">3.4 人机界面及其管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B8%8E%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">3.5 项目管理与版本管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">项目管理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">版本管理</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC4%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E6%8A%80%E6%9C%AF%E8%A6%81%E7%B4%A0\"><span class=\"toc-text\">第4章 软件开发工具的技术要素</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD%E4%B8%8E%E4%B8%80%E8%88%AC%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">4.1 基本功能与一般结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">基本功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E8%88%AC%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">一般结构</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E6%80%BB%E6%8E%A7%E4%B8%8E%E4%BA%BA%E6%9C%BA%E7%95%8C%E9%9D%A2\"><span class=\"toc-text\">4.2 总控与人机界面</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E4%BF%A1%E6%81%AF%E5%BA%93%E5%8F%8A%E5%85%B6%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">4.3 信息库及其管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BF%A1%E6%81%AF%E5%BA%93%E7%9A%84%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">1. 信息库的内容</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%BF%A1%E6%81%AF%E5%BA%93%E7%9A%84%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2. 信息库的组织方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E4%BF%A1%E6%81%AF%E5%BA%93%E7%9A%84%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">3. 信息库的管理功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%8E%86%E5%8F%B2%E4%BF%A1%E6%81%AF%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">4. 历史信息的处理方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E4%B8%8E%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90\"><span class=\"toc-text\">4.4 文档生成与代码生成</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90-Code-Generator\"><span class=\"toc-text\">1. 代码生成(Code Generator)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90\"><span class=\"toc-text\">2. 文档生成</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B8%8E%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">4.5 项目管理与版本管理</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC5%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">第5章 软件开发工具的使用与开发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E8%B4%AD%E7%BD%AE%E4%B8%8E%E5%BC%80%E5%8F%91%E6%9D%83%E8%A1%A1\"><span class=\"toc-text\">5.1 购置与开发权衡</span></a></li></ol></li></ol>","author":{"name":"Joshlee","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{}},"mapped":true,"hidden":false,"prev_post":{"title":"《软件开发工具》","uid":"2cc8b90b0dba95b11728dd29144d57a6","slug":"examination/tool for software development","date":"2021-10-03T11:37:25.000Z","updated":"2022-11-12T00:08:57.662Z","comments":true,"path":"api/articles/examination/tool for software development.json","keywords":null,"cover":[],"text":" 第1章 绪论软件产品的质量、效率、价格已成为各方关注的十分重要的问题。 1.1 软件开发工具的由来 操作系统、汇编程序、汇编系统时软件开发中必不可少的工具，但...","permalink":"/post/examination/tool for software development","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"应试","slug":"应试","count":5,"path":"api/categories/应试.json"}],"tags":[{"name":"升本","slug":"升本","count":3,"path":"api/tags/升本.json"},{"name":"自考","slug":"自考","count":2,"path":"api/tags/自考.json"}],"author":{"name":"Joshlee","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{}}},"next_post":{}}