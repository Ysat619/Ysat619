{"title":"树和二叉树","uid":"50552977e0ec8094596ba83ac872ee52","slug":"data-structure/tree","date":"2023-01-23T13:57:29.000Z","updated":"2023-09-13T10:22:16.000Z","comments":true,"path":"api/articles/data-structure/tree.json","keywords":null,"cover":[],"content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"树的性质\"><a href=\"#树的性质\" class=\"headerlink\" title=\"树的性质\"></a>树的性质</h1><ul>\n<li>结点数 = 总度数 + 1</li>\n<li>对于一颗二叉树，其总结点数为 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.357ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 600 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> , 度为 0 的结点个数为  <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.345ex\" height=\"1.375ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1036.6 607.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g></g></g></svg></mjx-container> ，度为 1 的结点个数为 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.345ex\" height=\"1.339ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1036.6 592\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></svg></mjx-container> ，度为 2 的结点个数为 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.345ex\" height=\"1.339ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1036.6 592\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></svg></mjx-container> ，则有：<ul>\n<li><code>结点总数</code> = <code>度为 0 的个数</code> + <code>度为 1 的个数</code> + <code>度为 2 的个数</code>，即： <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16.941ex\" height=\"1.694ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -583 7488.1 748.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(877.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1933.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3192.3,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4192.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5451.3,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6451.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></svg></mjx-container></li>\n<li>设 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.717ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 759 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g></g></g></svg></mjx-container> 为分支总数，因为除了根结点以外所有结点都有且仅有一个直接前驱，所以 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.989ex\" height=\"1.731ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 4415 765\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(877.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1933.6,0)\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2914.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3915,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container>，又因为这些分支由度为 1 或 2 的结点射出，则有 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.322ex\" height=\"1.885ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 5888.1 833\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1036.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2092.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3351.3,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4351.6,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4851.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></svg></mjx-container> ，所以，<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"41.074ex\" height=\"1.92ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 18154.7 848.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(877.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1933.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3192.3,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4192.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5451.3,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6451.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7765.9,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8821.7,0)\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9802.9,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(10803.1,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11580.9,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(12636.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(13895.4,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(14895.7,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(15395.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(16654.4,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(17654.7,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container> ，可得 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.604ex\" height=\"1.881ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 5129.1 831.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1314.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2370.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3628.9,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4629.1,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container></li>\n<li>度为 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 的数和 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 叉树的区别</li>\n<li>度为 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 的树: 至少有一个结点的度 = <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container></li>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 叉树: 允许所有节点的度 &lt; <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container></li>\n<li>度为 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 的树: 一定是非空树，至少有 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.883ex\" height=\"1.692ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 2600.4 748\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1100.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2100.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container> 个结点</li>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 叉树：可以是空树</li>\n</ul>\n</li>\n<li>度为 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 的树第 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.303ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 576 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g></g></svg></mjx-container> 层最多有 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.14ex\" height=\"1.956ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -853.7 2272 864.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(911,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(576,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1354,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></g></svg></mjx-container> 个结点（<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.312ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.451ex\" height=\"1.882ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 2409.6 832\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(853.8,0)\"><path data-c=\"2265\" d=\"M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1909.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container>），<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 叉树同理</li>\n<li>高度为 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.303ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 576 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g></g></svg></mjx-container> 的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 叉树<strong>最多</strong>有 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.912ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.229ex\" height=\"3.178ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1001.7 2311.2 1404.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,398) scale(0.707)\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,363) scale(0.707)\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1368.3,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2146.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mrow\" transform=\"translate(393.3,-345) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(878,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1656,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><rect width=\"2071.2\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></svg></mjx-container> 个结点（高度为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.303ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 576 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g></g></svg></mjx-container>的二叉树最多有<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.137ex\" height=\"2.117ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -853.7 2712.7 935.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(533,363) scale(0.707)\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1212.5,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2212.7,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container>个结点）</li>\n<li>高度为 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.303ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 576 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g></g></svg></mjx-container> 的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 叉树<strong>至少</strong>有 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.303ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 576 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g></g></svg></mjx-container> 个结点</li>\n<li>高度为 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.303ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 576 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g></g></svg></mjx-container>、度为 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 的树<strong>至少</strong>有 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.952ex\" height=\"1.756ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 4398.9 776\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(798.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1798.4,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2898.7,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3898.9,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container> 个结点</li>\n<li>具有 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.357ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 600 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 个结点的 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 叉树的<strong>最小高度</strong>为 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"21.11ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 9330.7 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"2308\" d=\"M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(444,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(742,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1227,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(510,-150) scale(0.707)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2407.8,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2796.8,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3396.8,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3785.8,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4886.1,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5886.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6386.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6997.5,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(7997.7,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8497.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8886.7,0)\"><path data-c=\"2309\" d=\"M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z\"></path></g></g></g></svg></mjx-container></li>\n</ul>\n<h1 id=\"树的存储结构\"><a href=\"#树的存储结构\" class=\"headerlink\" title=\"树的存储结构\"></a>树的存储结构</h1><h2 id=\"双亲表示法-顺序存储\"><a href=\"#双亲表示法-顺序存储\" class=\"headerlink\" title=\"双亲表示法(顺序存储)\"></a>双亲表示法(顺序存储)</h2><p>顺序存储结点数据, 结点中保存父节点在数组中的下标</p>\n<p><strong>优点</strong>：找父节点方便；<strong>缺点</strong>：找孩子不方便</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1627653257112-c99ea12f-534f-4928-abbb-cbd5c0f8d6ee.png#height=294&id=Cw7nk&margin=%5Bobject%20Object%5D&name=image.png&originHeight=391&originWidth=750&originalType=binary&ratio=1&size=137845&status=done&style=none&width=563\" alt=\"image.png\"><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1627653414428-39395399-1608-454a-8723-4fb3855163eb.png#height=505&id=BFRdp&margin=%5Bobject%20Object%5D&name=image.png&originHeight=673&originWidth=260&originalType=binary&ratio=1&size=88299&status=done&style=none&width=195\" alt=\"image.png\"></p>\n<p>上面的树用实际代码(Java)可表示为:</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">ParentTree</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">PTNode</span><span style=\"color: #F8F8F2\"> nodes[]; </span><span style=\"color: #6272A4\">// 双亲表示</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> n; </span><span style=\"color: #6272A4\">// 结点数</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">main</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\">[] </span><span style=\"color: #FFB86C; font-style: italic\">args</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">ParentTree</span><span style=\"color: #F8F8F2\"> parentTree </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">ParentTree</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        parentTree.nodes </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">PTNode</span><span style=\"color: #F8F8F2\">[</span><span style=\"color: #BD93F9\">100</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 根节点固定存储在0, -1表示没有双亲</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        parentTree.nodes[</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">PTNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">A</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">); </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        parentTree.nodes[</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">PTNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">B</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        parentTree.nodes[</span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">PTNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">C</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        parentTree.nodes[</span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">PTNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">D</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        parentTree.nodes[</span><span style=\"color: #BD93F9\">4</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">PTNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">E</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        parentTree.nodes[</span><span style=\"color: #BD93F9\">5</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">PTNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">F</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        parentTree.nodes[</span><span style=\"color: #BD93F9\">6</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">PTNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">G</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        parentTree.nodes[</span><span style=\"color: #BD93F9\">7</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">PTNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">H</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        parentTree.nodes[</span><span style=\"color: #BD93F9\">8</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">PTNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">I</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        parentTree.nodes[</span><span style=\"color: #BD93F9\">9</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">PTNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">J</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        parentTree.nodes[</span><span style=\"color: #BD93F9\">10</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">PTNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">K</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">4</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">PTNode</span><span style=\"color: #F8F8F2\">&lt;elemType&gt; {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    elemType data; </span><span style=\"color: #6272A4\">// 数据元素</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> parent; </span><span style=\"color: #6272A4\">// 双亲位置域</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">PTNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FFB86C; font-style: italic\">elemType</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">data</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">parent</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.data </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> data;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.parent </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> parent;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><h2 id=\"孩子表示法（顺序-链式存储）\"><a href=\"#孩子表示法（顺序-链式存储）\" class=\"headerlink\" title=\"孩子表示法（顺序+链式存储）\"></a>孩子表示法（顺序+链式存储）</h2><p>顺序存储各个节点，每个节点中保存孩子链表头指针</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1627654011593-90843ecf-3f4a-4428-ba37-addf7f3382ad.png#height=388&id=CiQR2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=388&originWidth=680&originalType=binary&ratio=1&size=111825&status=done&style=none&width=680\" alt=\"image.png\"> </p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1627653988617-2bc5dce8-a870-455f-a0c1-d8adbd52cefa.png#height=609&id=V15b8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=609&originWidth=580&originalType=binary&ratio=1&size=150174&status=done&style=none&width=580\" alt=\"image.png\"></p>\n<h2 id=\"孩子兄弟表示法-链式存储\"><a href=\"#孩子兄弟表示法-链式存储\" class=\"headerlink\" title=\"孩子兄弟表示法(链式存储)\"></a>孩子兄弟表示法(链式存储)</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1629386840992-7f01d57e-13a9-423c-b073-cdf349ec42a6.png#clientId=uca8774bb-c645-4&from=paste&height=341&id=u75b96c86&margin=%5Bobject%20Object%5D&name=image.png&originHeight=341&originWidth=350&originalType=binary&ratio=1&size=17654&status=done&style=none&taskId=ua7198bf0-feef-42a6-a894-1b4baa69312&width=350\" alt=\"image.png\"> =&gt; <img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1629386854592-8ab33dac-ab06-4179-9fed-2680fe5cab48.png#clientId=uca8774bb-c645-4&from=paste&height=450&id=u1ecd360e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=450&originWidth=292&originalType=binary&ratio=1&size=16511&status=done&style=none&taskId=ue75d242d-bd38-40f3-87a1-7c888576e37&width=292\" alt=\"image.png\"></p>\n<ul>\n<li>用二叉链表存储树-左孩子右兄弟</li>\n<li>孩子兄弟表示法存储的树, 从存储视角来看形态上和二叉树类似</li>\n</ul>\n<h2 id=\"森林与二叉树的转换\"><a href=\"#森林与二叉树的转换\" class=\"headerlink\" title=\"森林与二叉树的转换\"></a>森林与二叉树的转换</h2><ul>\n<li>本质就是用二叉链表存储森林-<strong>左孩子右兄弟</strong></li>\n<li>森林中各个树的根结点之间视为兄弟关系</li>\n</ul>\n<hr>\n<h1 id=\"二叉树-Binary-tree\"><a href=\"#二叉树-Binary-tree\" class=\"headerlink\" title=\"二叉树(Binary tree)\"></a>二叉树(Binary tree)</h1><h2 id=\"1-二叉树的概念\"><a href=\"#1-二叉树的概念\" class=\"headerlink\" title=\"1. 二叉树的概念\"></a>1. 二叉树的概念</h2><ol>\n<li>可为空二叉树</li>\n<li>任意结点的度≤2</li>\n<li>是有序树，左子树、右子树不可颠倒</li>\n</ol>\n<h2 id=\"2-特殊二叉树\"><a href=\"#2-特殊二叉树\" class=\"headerlink\" title=\"2. 特殊二叉树\"></a>2. 特殊二叉树</h2><h3 id=\"2-1-满二叉树\"><a href=\"#2-1-满二叉树\" class=\"headerlink\" title=\"2.1 满二叉树\"></a>2.1 满二叉树</h3><p>高度为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.303ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 576 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g></g></svg></mjx-container>，含有<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.137ex\" height=\"2.117ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -853.7 2712.7 935.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(533,363) scale(0.707)\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1212.5,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2212.7,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container>个结点的二叉树</p>\n<p><strong>特点:</strong></p>\n<ol>\n<li>只有最后一层有叶子结点</li>\n<li>不存在度为 1 的结点</li>\n<li>按层序从 1 开始编号，结点i的左孩子为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.912ex\" height=\"1.532ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 845 677\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>，右孩子为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.809ex\" height=\"1.692ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 2567.4 748\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1067.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2067.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container>；结点i的父节点为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.052ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2233 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"230A\" d=\"M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(444,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(789,0)\"><g data-mml-node=\"mo\"><path data-c=\"2F\" d=\"M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z\"></path></g></g><g data-mml-node=\"mn\" transform=\"translate(1289,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1789,0)\"><path data-c=\"230B\" d=\"M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z\"></path></g></g></g></svg></mjx-container>(如果有的话)</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1624851363875-76b3c72a-781a-4429-bbb2-f73957017d36.png#height=301&id=Je9i3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=301&originWidth=543&originalType=binary&ratio=1&size=83858&status=done&style=none&width=543\" alt=\"image.png\"><br><a name=\"hd2ep\"></a></p>\n<h3 id=\"2-2-完全二叉树\"><a href=\"#2-2-完全二叉树\" class=\"headerlink\" title=\"2.2 完全二叉树\"></a>2.2 完全二叉树</h3><p>当且仅当其每个结点都与高度为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.303ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 576 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g></g></svg></mjx-container>的满二叉树中编号<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.254ex\" height=\"1.692ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 2322.4 748\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(722.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1722.4,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>的结点一一对应时，称为完全二叉树。</p>\n<p>在满二叉树的基础上可去掉若干个编号更大的结点。</p>\n<p><strong>特点:</strong></p>\n<ol>\n<li>只有最后两层可能有叶子结点</li>\n<li>最多只有一个度为 1 的结点</li>\n<li>按层序从 1 开始编号，结点i的左孩子为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.912ex\" height=\"1.532ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 845 677\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>，右孩子为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.809ex\" height=\"1.692ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 2567.4 748\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1067.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2067.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container>；结点i的父节点为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.676ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2067 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"230A\" d=\"M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(444,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(789,0)\"><g data-mml-node=\"mo\"><path data-c=\"2F\" d=\"M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z\"></path></g></g><g data-mml-node=\"mn\" transform=\"translate(1289,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1789,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g></g></g></svg></mjx-container>(如果有的话)</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1624851729671-f44d05e1-1aba-4782-b3f4-c5d6533ad4c7.png#height=302&id=xon5H&margin=%5Bobject%20Object%5D&name=image.png&originHeight=302&originWidth=520&originalType=binary&ratio=1&size=88646&status=done&style=none&width=520\" alt=\"image.png\"></p>\n<h3 id=\"2-3-二叉排序树\"><a href=\"#2-3-二叉排序树\" class=\"headerlink\" title=\"2.3 二叉排序树\"></a>2.3 二叉排序树</h3><p>左子树关键字 &lt; 根节点关键字 &lt; 右子树关键字，具备此性质的二叉树则称为二叉排序树</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1624852088994-33d690f3-2e6e-4da7-a588-547c5a63b2c6.png#height=350&id=oMrwX&margin=%5Bobject%20Object%5D&name=image.png&originHeight=350&originWidth=596&originalType=binary&ratio=1&size=172184&status=done&style=none&width=596\" alt=\"image.png\"></p>\n<h3 id=\"2-4-平衡二叉树\"><a href=\"#2-4-平衡二叉树\" class=\"headerlink\" title=\"2.4 平衡二叉树\"></a>2.4 平衡二叉树</h3><p>树上任一结点的左右子树深度差不超过1</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1624852187598-d3d3076d-60ca-4e23-907b-3f05fb2e283a.png#height=356&id=PFH9G&margin=%5Bobject%20Object%5D&name=image.png&originHeight=356&originWidth=439&originalType=binary&ratio=1&size=81363&status=done&style=none&width=439\" alt=\"image.png\"></p>\n<h2 id=\"3-二叉树的性质\"><a href=\"#3-二叉树的性质\" class=\"headerlink\" title=\"3. 二叉树的性质\"></a>3. 二叉树的性质</h2><ul>\n<li><p>设非空二叉树中度为0、1和2的结点个数分别为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.345ex\" height=\"1.375ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1036.6 607.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g></g></g></svg></mjx-container>，则<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.604ex\" height=\"1.881ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 5129.1 831.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1314.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2370.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3628.9,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4629.1,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container>（叶子结点比二分支结点多一个）。假设树中结点总数为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.357ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 600 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>，则：<br></p>\n<ul>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 29.587ex;\"><svg style=\"vertical-align: -0.566ex; min-width: 29.587ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"2.262ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -750)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 750) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"4460.8 -750 1 1000\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mn\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">①</text></g><g data-mml-node=\"mo\" transform=\"translate(877.8,0)\"><path data-c=\"3A\" d=\"M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1433.6,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2311.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(3367.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(4625.9,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(5626.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(6884.9,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(7885.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -750 1 1000\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:1\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></li>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 59.043ex;\"><svg style=\"vertical-align: -0.566ex; min-width: 59.043ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"2.262ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -750)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 750) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"10970.6 -750 1 1000\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mn\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">②</text></g><g data-mml-node=\"mo\" transform=\"translate(877.8,0)\"><path data-c=\"3A\" d=\"M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1433.6,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2311.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(3367.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(4625.9,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5626.1,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6126.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7384.9,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(8385.1,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8885.1,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">（</text></g><g data-mml-node=\"mi\" transform=\"translate(9885.1,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">树</text></g><g data-mml-node=\"mi\" transform=\"translate(10885.1,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">的</text></g><g data-mml-node=\"mi\" transform=\"translate(11885.1,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">结</text></g><g data-mml-node=\"mi\" transform=\"translate(12885.1,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">点</text></g><g data-mml-node=\"mi\" transform=\"translate(13885.1,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g><g data-mml-node=\"mo\" transform=\"translate(15162.9,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(16218.7,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">总</text></g><g data-mml-node=\"mi\" transform=\"translate(17218.7,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">度</text></g><g data-mml-node=\"mi\" transform=\"translate(18218.7,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g><g data-mml-node=\"mo\" transform=\"translate(19440.9,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(20441.1,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(20941.1,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">）</text></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -750 1 1000\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:2\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></li>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 30.277ex;\"><svg style=\"vertical-align: -0.566ex; min-width: 30.277ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"2.262ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -750)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 750) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"4613.3 -750 1 1000\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mn\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">①</text></g><g data-mml-node=\"mo\" transform=\"translate(822.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1822.4,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">②</text></g><g data-mml-node=\"mo\" transform=\"translate(2700.2,0)\"><g data-mml-node=\"text\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"text\" transform=\"translate(778,0)\"><path data-c=\"3E\" d=\"M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z\"></path></g></g><g data-mml-node=\"msub\" transform=\"translate(4534,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5848.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6904.1,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7726.3,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(8726.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -750 1 1000\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:3\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></li>\n</ul>\n</li>\n<li><p>二叉树第 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.781ex\" height=\"1.52ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -661 345 672\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 层至多有<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.271ex\" height=\"2.021ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -893.3 1887.6 893.3\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(345,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">－</text></g><g data-mml-node=\"mn\" transform=\"translate(1345,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></g></svg></mjx-container>个结点(i ≥ 1)</p>\n<ul>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>叉树第<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.781ex\" height=\"1.52ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -661 345 672\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 层至多有<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.126ex\" height=\"2.046ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -893.3 2265.6 904.3\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(911,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(345,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">－</text></g><g data-mml-node=\"mn\" transform=\"translate(1345,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></g></svg></mjx-container>个结点(i ≥ 1)<br></li>\n</ul>\n</li>\n<li><p>高度为 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.303ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 576 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g></g></svg></mjx-container> 的二叉树至多有<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.452ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.634ex\" height=\"2.384ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -853.7 2490.3 1053.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(533,363) scale(0.707)\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(990.3,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">－</text></g><g data-mml-node=\"mn\" transform=\"translate(1990.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container> 个结点(满二叉树)</p>\n<ul>\n<li>高度为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.303ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 576 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g></g></svg></mjx-container>的<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>叉树至多有 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.912ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.229ex\" height=\"3.178ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1001.7 2311.2 1404.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,398) scale(0.707)\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,363) scale(0.707)\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1368.3,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2146.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mrow\" transform=\"translate(393.3,-345) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(878,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1656,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><rect width=\"2071.2\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></svg></mjx-container> 个结点<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1624858522819-87eef4c6-4cc9-4b45-9123-d5152c000f3f.png#height=266&id=h9KKh&margin=%5Bobject%20Object%5D&name=image.png&originHeight=266&originWidth=817&originalType=binary&ratio=1&size=81465&status=done&style=none&width=817\" alt=\"image.png\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-完全二叉树的性质\"><a href=\"#4-完全二叉树的性质\" class=\"headerlink\" title=\"4. 完全二叉树的性质\"></a>4. 完全二叉树的性质</h2><ol>\n<li>具有<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.357ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 600 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>个<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.266ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3211.6 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1266.8,0)\"><path data-c=\"3E\" d=\"M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2322.6,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2822.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container> 结点的完全二叉树的高度<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.303ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 576 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g></g></svg></mjx-container>为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"22.208ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 9816 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(298,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(783,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(510,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1696.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2085.6,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2907.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3908,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4408,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4797,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">或</text></g><g data-mml-node=\"mi\" transform=\"translate(5797,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6095,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6580,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(510,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(7493.6,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8315.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(9316,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container><ul>\n<li>高为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.2ex\" height=\"1.756ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 2298.4 776\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(798.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1798.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container>的满二叉树共有<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.537ex\" height=\"2.207ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -893.3 3773.4 975.3\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(576,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">－</text></g><g data-mml-node=\"mn\" transform=\"translate(1576,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(2273.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3273.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container>个结点<br></li>\n<li>高为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.303ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 576 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g></g></svg></mjx-container>的完全二叉树至少 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.64ex\" height=\"2.021ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -893.3 2051 893.3\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(576,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">－</text></g><g data-mml-node=\"mn\" transform=\"translate(1576,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></g></g></svg></mjx-container> 个结点至多 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.452ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.634ex\" height=\"2.384ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -853.7 2490.3 1053.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(533,363) scale(0.707)\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(990.3,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">－</text></g><g data-mml-node=\"mn\" transform=\"translate(1990.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container> 个结点</li>\n</ul>\n</li>\n<li>对于完全二叉树，可以由的结点数<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.357ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 600 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>推出度为0、1和2的结点个数为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.452ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.56ex\" height=\"2.149ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 5109.7 950\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(1036.6,0)\"><g data-mml-node=\"mo\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">、</text></g></g><g data-mml-node=\"msub\" transform=\"translate(2036.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(3073.1,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">和</text></g><g data-mml-node=\"msub\" transform=\"translate(4073.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></svg></mjx-container></li>\n</ol>\n<p><strong>完全二叉树最多只有一个度为1的结点</strong>，即<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.452ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.887ex\" height=\"2.149ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4370.1 950\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1314.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2370.1,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2870.1,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">或</text></g><g data-mml-node=\"mn\" transform=\"translate(3870.1,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container></p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.604ex\" height=\"1.881ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 5129.1 831.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1314.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2370.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3628.9,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4629.1,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container> =&gt; <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.456ex\" height=\"1.694ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -583 3295.6 748.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1258.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2259,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></svg></mjx-container>一定是奇数</p>\n<p>若完全二叉树有<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.31ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 1021 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g></g></g></svg></mjx-container>个(偶数)个结点，则必有<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.452ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24.981ex\" height=\"2.149ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 11041.7 950\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1314.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2370.1,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2870.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(3314.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(4629.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5684.9,0)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6205.9,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6650.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7964.9,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9020.7,0)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9541.7,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">－</text></g><g data-mml-node=\"mn\" transform=\"translate(10541.7,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container></p>\n<p>若完全二叉树有<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.207ex\" height=\"1.756ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 2743.4 776\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1243.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2243.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container>个(奇数)个结点，则必有<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.452ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24.981ex\" height=\"2.149ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 11041.7 950\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1314.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2370.1,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2870.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(3314.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(4629.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5684.9,0)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6205.9,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6650.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7964.9,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9020.7,0)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9541.7,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">－</text></g><g data-mml-node=\"mn\" transform=\"translate(10541.7,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container></p>\n<h2 id=\"5-二叉树的存储结构\"><a href=\"#5-二叉树的存储结构\" class=\"headerlink\" title=\"5. 二叉树的存储结构\"></a>5. 二叉树的存储结构</h2><h3 id=\"5-1-二叉树的顺序存储\"><a href=\"#5-1-二叉树的顺序存储\" class=\"headerlink\" title=\"5.1 二叉树的顺序存储\"></a>5.1 二叉树的顺序存储</h3><p>在二叉树的顺序存储中，一定要把二叉树的结点编号与完全二叉树对应起来</p>\n<ul>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.781ex\" height=\"1.52ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -661 345 672\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>的左孩子 – <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.912ex\" height=\"1.532ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 845 677\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container></li>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.781ex\" height=\"1.52ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -661 345 672\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>的右孩子 – <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.809ex\" height=\"1.692ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 2567.4 748\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1067.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2067.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container></li>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.781ex\" height=\"1.52ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -661 345 672\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>的父节点 – <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.052ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2233 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"230A\" d=\"M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(444,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(789,0)\"><g data-mml-node=\"mo\"><path data-c=\"2F\" d=\"M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z\"></path></g></g><g data-mml-node=\"mn\" transform=\"translate(1289,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1789,0)\"><path data-c=\"230B\" d=\"M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z\"></path></g></g></g></svg></mjx-container></li>\n</ul>\n<p>最坏情况：高度为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.303ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 576 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g></g></svg></mjx-container>且只有<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.303ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 576 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g></g></g></svg></mjx-container>个结点的单支树(所有结点只有右孩子)，也至少需要<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.331ex\" height=\"1.756ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 2798.4 776\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1298.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2298.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container>个存储单元。所以，二叉树的顺序存储结构只适合存储<strong>完全二叉树</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">SeqStorageBinaryTree</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> maxSize </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">100</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">TreeNode</span><span style=\"color: #F8F8F2\">[] t </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">TreeNode</span><span style=\"color: #F8F8F2\">[maxSize];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">main</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\">[] </span><span style=\"color: #FFB86C; font-style: italic\">args</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">; i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> t.length; i</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            t[i] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">TreeNode</span><span style=\"color: #F8F8F2\">(i);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">TreeNode</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * 结点中的数据元素</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> value;</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * 结点是否为空</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">boolean</span><span style=\"color: #F8F8F2\"> isEmpty;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">TreeNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">value</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.value </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> value;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 初始化结点为空</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.isEmpty </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">false</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><h3 id=\"5-2-二叉树的链式存储\"><a href=\"#5-2-二叉树的链式存储\" class=\"headerlink\" title=\"5.2 二叉树的链式存储\"></a>5.2 二叉树的链式存储</h3><p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.357ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 600 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>个结点的二叉链表共有<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.254ex\" height=\"1.692ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 2322.4 748\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(822.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1822.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container>个<strong>空链域<br></strong><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1624865206947-ae5653c5-c42f-49f0-9121-153dec4c71a3.png#height=352&id=XpD17&margin=%5Bobject%20Object%5D&name=image.png&originHeight=352&originWidth=596&originalType=binary&ratio=1&size=90534&status=done&style=none&width=596\" alt=\"image.png\"></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">LinkedStorageBinaryTree</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">main</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\">[] </span><span style=\"color: #FFB86C; font-style: italic\">args</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 构建上图的二叉树, 后面遍历的代码实现都是基于此树.</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">TreeNodeLinked</span><span style=\"color: #F8F8F2\"> root </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">TreeNodeLinked</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">TreeNodeLinked</span><span style=\"color: #F8F8F2\"> node1 </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">TreeNodeLinked</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">TreeNodeLinked</span><span style=\"color: #F8F8F2\"> node1 </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">TreeNodeLinked</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">TreeNodeLinked</span><span style=\"color: #F8F8F2\"> node2 </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">TreeNodeLinked</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">TreeNodeLinked</span><span style=\"color: #F8F8F2\"> node3 </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">TreeNodeLinked</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">5</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">TreeNodeLinked</span><span style=\"color: #F8F8F2\"> node4 </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">TreeNodeLinked</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">6</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">TreeNodeLinked</span><span style=\"color: #F8F8F2\"> node5 </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">TreeNodeLinked</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">7</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">TreeNodeLinked</span><span style=\"color: #F8F8F2\"> node6 </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">TreeNodeLinked</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">11</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">TreeNodeLinked</span><span style=\"color: #F8F8F2\"> node7 </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">TreeNodeLinked</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">12</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        root.lChild </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node1; root.rChild </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node2;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        node1.lChild </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node3;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        node2.lChild </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node4; node2.rChild </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node5;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        node3.rChild </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node6;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        node4.lChild </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node7;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">TreeNodeLinked</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> value; </span><span style=\"color: #6272A4\">// 数据域</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">TreeNodeLinked</span><span style=\"color: #F8F8F2\"> lChild, rChild; </span><span style=\"color: #6272A4\">// 左、右孩子</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">TreeNodeLinked</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">value</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.value </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> value;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.lChild </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.rChild </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><h2 id=\"6-二叉树的遍历\"><a href=\"#6-二叉树的遍历\" class=\"headerlink\" title=\"6. 二叉树的遍历\"></a>6. 二叉树的遍历</h2><h3 id=\"6-1-先序遍历-根、左、右\"><a href=\"#6-1-先序遍历-根、左、右\" class=\"headerlink\" title=\"6.1 先序遍历(根、左、右)\"></a>6.1 先序遍历(根、左、右)</h3><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">preOrder</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">TreeNodeLinked</span><span style=\"color: #F8F8F2\"> tNode) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\">(tNode </span><span style=\"color: #FF79C6\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 访问根结点</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        System.out.</span><span style=\"color: #50FA7B\">print</span><span style=\"color: #F8F8F2\">(tNode.value </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"\"</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 递归遍历左子树</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">preOrder</span><span style=\"color: #F8F8F2\">(tNode.lChild);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 递归遍历右子树</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">preOrder</span><span style=\"color: #F8F8F2\">(tNode.rChild);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><h3 id=\"6-2-中序遍历-左、根、右\"><a href=\"#6-2-中序遍历-左、根、右\" class=\"headerlink\" title=\"6.2 中序遍历(左、根、右)\"></a>6.2 中序遍历(左、根、右)</h3><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">midOrder</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">TreeNodeLinked</span><span style=\"color: #F8F8F2\"> tNode) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\">(tNode </span><span style=\"color: #FF79C6\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 递归遍历左子树</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">preOrder</span><span style=\"color: #F8F8F2\">(tNode.lChild);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 访问根结点</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        System.out.</span><span style=\"color: #50FA7B\">print</span><span style=\"color: #F8F8F2\">(tNode.value </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 递归遍历右子树</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">preOrder</span><span style=\"color: #F8F8F2\">(tNode.rChild);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><h3 id=\"6-3-后序遍历-左、右、根\"><a href=\"#6-3-后序遍历-左、右、根\" class=\"headerlink\" title=\"6.3 后序遍历(左、右、根)\"></a>6.3 后序遍历(左、右、根)</h3><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">postOrder</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">TreeNodeLinked</span><span style=\"color: #F8F8F2\"> tNode) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\">(tNode </span><span style=\"color: #FF79C6\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 递归遍历左子树</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">preOrder</span><span style=\"color: #F8F8F2\">(tNode.lChild);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 递归遍历右子树</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">preOrder</span><span style=\"color: #F8F8F2\">(tNode.rChild);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 访问根结点</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        System.out.</span><span style=\"color: #50FA7B\">print</span><span style=\"color: #F8F8F2\">(tNode.value </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><h3 id=\"6-4-求树的深度-后序遍历算法的变种\"><a href=\"#6-4-求树的深度-后序遍历算法的变种\" class=\"headerlink\" title=\"6.4 求树的深度(后序遍历算法的变种)\"></a>6.4 求树的深度(后序遍历算法的变种)</h3><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">treeDepth</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">TreeNodeLinked</span><span style=\"color: #F8F8F2\"> t) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (t </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> l </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">treeDepth</span><span style=\"color: #F8F8F2\">(t.lChild);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> r </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">treeDepth</span><span style=\"color: #F8F8F2\">(t.rChild);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #6272A4\">// 树的深度 = max(左子树深度, 右子树深度) + 1</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> Math.</span><span style=\"color: #50FA7B\">max</span><span style=\"color: #F8F8F2\">(l, r) </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><h3 id=\"6-5-层序遍历-BFS\"><a href=\"#6-5-层序遍历-BFS\" class=\"headerlink\" title=\"6.5 层序遍历(BFS)\"></a>6.5 层序遍历(BFS)</h3><p>算法思想:</p>\n<ol>\n<li>初始化一个辅助队列</li>\n<li>根节点入队</li>\n<li>若队列非空，则队头结点出队，访问该结点，并将其左、右孩子插入队尾（如果有的话）</li>\n<li>重复3直至队列为空</li>\n</ol>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">levelOrder</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">TreeNodeLinked</span><span style=\"color: #F8F8F2\"> t) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #6272A4\">// 初始化一个辅助队列</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">Queue</span><span style=\"color: #F8F8F2\">&lt;TreeNodeLinked&gt; queue </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">ArrayBlockingQueue</span><span style=\"color: #F8F8F2\">&lt;&gt;(</span><span style=\"color: #BD93F9\">50</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #6272A4\">// 根结点入队</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    queue.</span><span style=\"color: #50FA7B\">add</span><span style=\"color: #F8F8F2\">(t);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">while</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">!</span><span style=\"color: #F8F8F2\">queue.</span><span style=\"color: #50FA7B\">isEmpty</span><span style=\"color: #F8F8F2\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 队头结点出队</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">TreeNodeLinked</span><span style=\"color: #F8F8F2\"> poll </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> queue.</span><span style=\"color: #50FA7B\">poll</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        System.out.</span><span style=\"color: #50FA7B\">print</span><span style=\"color: #F8F8F2\">(poll.value </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 将左右孩子插入队尾</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\">(poll.lChild </span><span style=\"color: #FF79C6\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            queue.</span><span style=\"color: #50FA7B\">add</span><span style=\"color: #F8F8F2\">(poll.lChild);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\">(poll.rChild </span><span style=\"color: #FF79C6\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            queue.</span><span style=\"color: #50FA7B\">add</span><span style=\"color: #F8F8F2\">(poll.rChild);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><h1 id=\"线索二叉树-Threaded-Binary-Tree\"><a href=\"#线索二叉树-Threaded-Binary-Tree\" class=\"headerlink\" title=\"线索二叉树(Threaded Binary Tree)\"></a>线索二叉树(<strong>Threaded Binary Tree</strong>)</h1><p>二叉树添加了直接指向节点的前驱和后继的指针的二叉树称为<strong>线索二叉树(Threaded binary tree)</strong></p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>方便从一个指定结点出发，找到其前驱、后继；方便遍历</p>\n<h2 id=\"存储结构\"><a href=\"#存储结构\" class=\"headerlink\" title=\"存储结构\"></a>存储结构</h2><ul>\n<li>在普通二叉树结点的基础上，增加两个标志位<code> lTag</code> 和<code>rTag</code></li>\n<li><code>lTag == 1</code> 时，表示<code>lChild</code>指向前驱；<code>lTag == 0</code>时，表示<code>lChild</code>指向左孩子</li>\n<li><code>rTag == 1</code> 时，表示<code>rChild</code>指向后继；<code>rTag == 0</code>时，表示<code>lChild</code>指向右孩子</li>\n</ul>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">ThreadNode</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * 数据域</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">private</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> data;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * 左右孩子</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">private</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">ThreadNode</span><span style=\"color: #F8F8F2\"> lChild, rChild;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * 左右线索标志, 1为前驱后继, 0为左右孩子</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">private</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> lTag, rTag;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">ThreadNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">data</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.data </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> data;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.lTag </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.rTag </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #6272A4\">/* get and set... */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><h2 id=\"线索化二叉树\"><a href=\"#线索化二叉树\" class=\"headerlink\" title=\"线索化二叉树\"></a>线索化二叉树</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1625073348657-dab77de3-d9b8-440d-aeb5-7f4576080389.png#height=357&id=zr8mV&margin=%5Bobject%20Object%5D&name=image.png&originHeight=475&originWidth=674&originalType=binary&ratio=1&size=27535&status=done&style=none&width=506\" alt=\"image.png\"></h3><h3 id=\"中序线索化二叉树\"><a href=\"#中序线索化二叉树\" class=\"headerlink\" title=\"中序线索化二叉树\"></a>中序线索化二叉树</h3><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6272A4\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * 中序线索化二叉树</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #6272A4\"> 二叉树的根节点</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">threadedNodes</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">ThreadNode</span><span style=\"color: #F8F8F2\"> node) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }\t</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 处理当前结点的前驱结点</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">threadedNodes</span><span style=\"color: #F8F8F2\">(node.</span><span style=\"color: #50FA7B\">getlChild</span><span style=\"color: #F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node.</span><span style=\"color: #50FA7B\">getlChild</span><span style=\"color: #F8F8F2\">() </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            node.</span><span style=\"color: #50FA7B\">setlChild</span><span style=\"color: #F8F8F2\">(pre);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            node.</span><span style=\"color: #50FA7B\">setlTag</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 处理当前结点的后继结点</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (pre </span><span style=\"color: #FF79C6\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> pre.</span><span style=\"color: #50FA7B\">getrChild</span><span style=\"color: #F8F8F2\">() </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            pre.</span><span style=\"color: #50FA7B\">setrChild</span><span style=\"color: #F8F8F2\">(node);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            pre.</span><span style=\"color: #50FA7B\">setrTag</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 每处理完一个结点后, 让当前结点是下一个结点的前驱结点</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        pre </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">threadedNodes</span><span style=\"color: #F8F8F2\">(node.</span><span style=\"color: #50FA7B\">getrChild</span><span style=\"color: #F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span></code></pre></div><h2 id=\"遍历线索二叉树\"><a href=\"#遍历线索二叉树\" class=\"headerlink\" title=\"遍历线索二叉树\"></a>遍历线索二叉树</h2><h3 id=\"遍历中序线索二叉树\"><a href=\"#遍历中序线索二叉树\" class=\"headerlink\" title=\"遍历中序线索二叉树\"></a>遍历中序线索二叉树</h3><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6272A4\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * 遍历中序线索二叉树</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #6272A4\"> 根节点</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">threadedNodesList</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">ThreadNode</span><span style=\"color: #F8F8F2\"> node) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">ThreadNode</span><span style=\"color: #F8F8F2\"> current </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">while</span><span style=\"color: #F8F8F2\">(current </span><span style=\"color: #FF79C6\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">while</span><span style=\"color: #F8F8F2\">(current.</span><span style=\"color: #50FA7B\">getlTag</span><span style=\"color: #F8F8F2\">() </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                current </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> current.</span><span style=\"color: #50FA7B\">getlChild</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            System.out.</span><span style=\"color: #50FA7B\">println</span><span style=\"color: #F8F8F2\">(current.</span><span style=\"color: #50FA7B\">getData</span><span style=\"color: #F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #6272A4\">// 如果当前结点的右指针指向的是后继结点, 则一直访问</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">while</span><span style=\"color: #F8F8F2\">(current.</span><span style=\"color: #50FA7B\">getrTag</span><span style=\"color: #F8F8F2\">() </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                current </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> current.</span><span style=\"color: #50FA7B\">getrChild</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                System.out.</span><span style=\"color: #50FA7B\">println</span><span style=\"color: #F8F8F2\">(current.</span><span style=\"color: #50FA7B\">getData</span><span style=\"color: #F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            current </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> current.</span><span style=\"color: #50FA7B\">getrChild</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span></code></pre></div><h1 id=\"堆-Heap\"><a href=\"#堆-Heap\" class=\"headerlink\" title=\"堆(Heap)\"></a>堆(Heap)</h1><h2 id=\"堆的概念\"><a href=\"#堆的概念\" class=\"headerlink\" title=\"堆的概念\"></a>堆的概念</h2><ul>\n<li><strong>堆</strong>(Heap)是一种特别的完全二叉树。</li>\n<li>堆分为两种: 最大堆(<strong>大根堆</strong>)和最小堆(<strong>小跟堆</strong>), 大顶堆在堆排序中用于<strong>升序排序</strong>，而小顶堆则是<strong>降序排序</strong></li>\n<li>在最大堆中, 父节点的值比每一个子结点的值都要大。在最小堆中，父节点的值比每一个子结点都要小。这就是所谓的“堆属性”, <strong>并且这个属性对堆中的每一个节点都成立.</strong></li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1629213818334-1fac258d-c57f-4642-b2f8-6da08cd5e709.png#height=161&id=R4IHB&margin=%5Bobject%20Object%5D&name=image.png&originHeight=161&originWidth=190&originalType=binary&ratio=1&size=8154&status=done&style=none&width=190\" alt=\"image.png\"></p>\n<h2 id=\"堆节点的访问\"><a href=\"#堆节点的访问\" class=\"headerlink\" title=\"堆节点的访问\"></a>堆节点的访问</h2><p>数组起始位置为0情况下:</p>\n<ul>\n<li>父节点<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.781ex\" height=\"1.52ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -661 345 672\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>的左子节点在位置 <strong><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.569ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3345.4 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(389,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(889,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1456.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2456.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2956.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></strong></li>\n<li>父节点<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.781ex\" height=\"1.52ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -661 345 672\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>的右子节点在位置 <strong><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.569ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3345.4 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(389,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(889,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1456.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2456.4,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2956.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></strong></li>\n<li>子节点<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.781ex\" height=\"1.52ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -661 345 672\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>的父节点在位置 <strong><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10.709ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4733.4 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"230A\" d=\"M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(444,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(833,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1400.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2400.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2900.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(3289.4,0)\"><g data-mml-node=\"mo\"><path data-c=\"2F\" d=\"M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z\"></path></g></g><g data-mml-node=\"mn\" transform=\"translate(3789.4,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4289.4,0)\"><path data-c=\"230B\" d=\"M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z\"></path></g></g></g></svg></mjx-container></strong></li>\n</ul>\n<h2 id=\"堆排序-Heap-Sort\"><a href=\"#堆排序-Heap-Sort\" class=\"headerlink\" title=\"堆排序(Heap Sort)\"></a>堆排序(Heap Sort)</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2021/gif/12654026/1629214723149-8afaab7a-d770-4a9a-be89-f447481eaa6f.gif#height=214&id=Ml82E&margin=%5Bobject%20Object%5D&name=%E5%A0%86%E6%8E%92%E5%BA%8F.gif&originHeight=214&originWidth=280&originalType=binary&ratio=1&size=281018&status=done&style=none&width=280\" alt=\"堆排序.gif\"><br>最优/最坏时间复杂度: <strong><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.052ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4001 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(763,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1152,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1752,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2050,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2535,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3012,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3612,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></strong></p>\n<h3 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h3><p>a. 假设给定无序序列结构如下:<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1629215874494-ee73001f-b0b2-4355-9863-8ac7453a9e93.png#height=327&id=YNR2t&margin=%5Bobject%20Object%5D&name=image.png&originHeight=654&originWidth=702&originalType=binary&ratio=1&size=45849&status=done&style=none&width=351\" alt=\"image.png\"><br><a name=\"GxqlI\"></a></p>\n<h4 id=\"1-调整成堆\"><a href=\"#1-调整成堆\" class=\"headerlink\" title=\"1.调整成堆\"></a>1.调整成堆</h4><p><strong>将待排序序列构造成一个最大堆/最小堆</strong></p>\n<p>b. 此时我们从最后一个非叶子节点(<code>arr.length/2-1</code>或<code>(i-1)/2 =&gt; (arr.length-1-1)/2</code>)开始, 从左至右, 从下至上进行调整</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1629216045313-0e2aff76-b59d-4969-bc8a-794cfbabe718.png#height=341&id=PcpqF&margin=%5Bobject%20Object%5D&name=image.png&originHeight=682&originWidth=1708&originalType=binary&ratio=1&size=86047&status=done&style=none&width=854\" alt=\"image.png\"></p>\n<p>c. 找到第二个非叶子节点4, 由于[4,9,8]中9元素最大, 4和9交换</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1629216365207-25c523a6-dbb8-401c-ad4f-f3d415226ef3.png#height=349&id=oQQtE&margin=%5Bobject%20Object%5D&name=image.png&originHeight=698&originWidth=1680&originalType=binary&ratio=1&size=83612&status=done&style=none&width=840\" alt=\"image.png\"></p>\n<p>d. 这时交换导致了子根节点[4,5,6]结构混乱, 继续调整, 将4和6交换</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1629216456881-90c28427-d4d4-4faa-9af6-38dc91618ba7.png#height=329&id=w6s4f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=658&originWidth=1720&originalType=binary&ratio=1&size=99253&status=done&style=none&width=860\" alt=\"image.png\"></p>\n<p>此时, 就已经将一个无序序列构造成一个大顶堆了</p>\n<h4 id=\"2-交换元素\"><a href=\"#2-交换元素\" class=\"headerlink\" title=\"2.交换元素\"></a>2.交换元素</h4><p><strong>将堆顶元素与末尾元素交换, 使得最大/最小元素在数组末端</strong></p>\n<p>e. 将堆顶元素9和末尾元素4进行交换</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1629217432931-458e8e20-0b3c-430f-a8b1-aa09579d83ee.png#height=327&id=yNVVx&margin=%5Bobject%20Object%5D&name=image.png&originHeight=654&originWidth=1800&originalType=binary&ratio=1&size=98590&status=done&style=none&width=900\" alt=\"image.png\"></p>\n<h4 id=\"3-反复执行1、2\"><a href=\"#3-反复执行1、2\" class=\"headerlink\" title=\"3.反复执行1、2\"></a>3.反复执行1、2</h4><p><strong>执行完2的交换元素后, 再执行1进行重新调整结构, 使其满足堆的定义, 然后继续执行2…反复执行至序列有序</strong><br>f. 重新调整结构, 使其满足堆定义<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1629217607016-4a001d69-a885-435c-84d5-61eda3afeb20.png#height=314&id=E3gz5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=628&originWidth=1684&originalType=binary&ratio=1&size=96371&status=done&style=none&width=842\" alt=\"image.png\"><br>g. 再将顶堆元素8与末尾元素5进行交换, 得到第二大元素8<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1629217638920-ea9956b8-ffb5-4b7a-80f3-31cdd97d19fb.png#height=321&id=v5kSm&margin=%5Bobject%20Object%5D&name=image.png&originHeight=642&originWidth=1690&originalType=binary&ratio=1&size=73556&status=done&style=none&width=845\" alt=\"image.png\">    <br>e.  反复执行1、2，直至序列有序<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1629217731580-42ed8743-49a4-4434-ab3d-42bca7257b11.png#height=346&id=XJPZg&margin=%5Bobject%20Object%5D&name=image.png&originHeight=692&originWidth=782&originalType=binary&ratio=1&size=41223&status=done&style=none&width=391\" alt=\"image.png\"><br><a name=\"akIih\"></a></p>\n<h3 id=\"代码实现-Java\"><a href=\"#代码实现-Java\" class=\"headerlink\" title=\"代码实现(Java)\"></a>代码实现(Java)</h3><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">import</span><span style=\"color: #F8F8F2\"> java.util.Arrays;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">HeapSort</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">main</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\">[] </span><span style=\"color: #FFB86C; font-style: italic\">args</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\">[] arr </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> {</span><span style=\"color: #BD93F9\">4</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">6</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">8</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">5</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">9</span><span style=\"color: #F8F8F2\">};</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">heapSort</span><span style=\"color: #F8F8F2\">(arr);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">heapSort</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\">[] </span><span style=\"color: #FFB86C; font-style: italic\">arr</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> temp </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 1. 将无序序列构建成一个堆, 根据升序降序需求选择大顶堆或小顶堆</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> arr.length </span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">; i </span><span style=\"color: #FF79C6\">&gt;=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i</span><span style=\"color: #FF79C6\">--</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #50FA7B\">adjustHeap</span><span style=\"color: #F8F8F2\">(arr, i, arr.length);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 2.将顶堆元素与末尾元素交换, 将最大元素移动到数组末端</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> j </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> arr.length </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">; j </span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; j</span><span style=\"color: #FF79C6\">--</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            temp </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> arr[j];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            arr[j] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> arr[</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            arr[</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> temp;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #50FA7B\">adjustHeap</span><span style=\"color: #F8F8F2\">(arr, </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">, j);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 3. 重新调整结构, 使其满足堆定义, 然后继续交换顶堆元素与当前末尾元素, 反复执行2,3, 直到整个序列有序</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        System.out.</span><span style=\"color: #50FA7B\">println</span><span style=\"color: #F8F8F2\">(Arrays.</span><span style=\"color: #50FA7B\">toString</span><span style=\"color: #F8F8F2\">(arr));</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * 将一个二叉树, 调整成大顶堆</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">arr</span><span style=\"color: #6272A4\">    待调整的数组</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">i</span><span style=\"color: #6272A4\">      表示非叶子结点在数组中索引</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">length</span><span style=\"color: #6272A4\"> 表示对多少个元素继续调整, length是在逐渐的减少</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">adjustHeap</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\">[] </span><span style=\"color: #FFB86C; font-style: italic\">arr</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">i</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">length</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> temp </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> arr[i];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 循环将以i为父结点的树的最大值放在最顶</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> k </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">; k </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> length; k </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> k </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #6272A4\">// 如果左子结点小于右子结点的值, 则k指向右子结点</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (k </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> length </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> arr[k] </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> arr[k </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">]) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                k</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #6272A4\">// 如果子结点大于父节点</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (arr[k] </span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> temp) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #6272A4\">// 把较大值赋给当前结点</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                arr[i] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> arr[k];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #6272A4\">// i指向k, 继续循环比较</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> k;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">break</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 将temp值放到调整后的位置</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        arr[i] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> temp;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><h1 id=\"哈夫曼树-Huffman-Tree\"><a href=\"#哈夫曼树-Huffman-Tree\" class=\"headerlink\" title=\"哈夫曼树(Huffman Tree)\"></a>哈夫曼树(Huffman Tree)</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><strong>结点的权</strong>: 有某种现实含义的数值(如：表示结点的重要性等)</p>\n<p><strong>结点的带权路径长度</strong>：从树的根到该结点的路径长度（经过的边数）与该结点上的权值的乘机，简言之就是<code>经过的边数*权值</code></p>\n<p><strong>树的带权路径长度</strong>：树中所有叶结点的带权路径长度之和（<strong>WPL, Weighted Path Length</strong>）</p>\n<p>在含有n个带权叶结点的二叉树中，其中<strong>带权路径长度（WPL）最小的二叉树</strong>称为<strong>哈夫曼树</strong>，也称<strong>最优二叉树</strong></p>\n<p>下图中的第二和第三颗二叉树就是哈夫曼树</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1629254672555-ab36dcf8-3dad-4f0f-9565-9ad05862aba4.png#height=226&id=IDO44&margin=%5Bobject%20Object%5D&name=image.png&originHeight=452&originWidth=1532&originalType=binary&ratio=1&size=252338&status=done&style=none&width=766\" alt=\"image.png\"></p>\n<h2 id=\"构造哈夫曼树\"><a href=\"#构造哈夫曼树\" class=\"headerlink\" title=\"构造哈夫曼树\"></a>构造哈夫曼树</h2><p><a name=\"SN1gQ\"></a></p>\n<h3 id=\"算法思路-1\"><a href=\"#算法思路-1\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h3><p>给定<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.357ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 600 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>个权值分别为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.029ex\" height=\"1.441ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -443 6201 637\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1152.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1597.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2749.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3194.4,0)\"><path data-c=\"2026\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4533.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4977.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container>的结点，构造哈夫曼树的算法描述如下：<br>（1）将这<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.357ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 600 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>个结点分别作为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.357ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 600 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>棵仅含一个结点的二叉树，构成森林<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.695ex\" height=\"1.538ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -680 749 680\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"></path></g></g></g></svg></mjx-container></p>\n<p>（2）构造一个新结点，从<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.695ex\" height=\"1.538ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -680 749 680\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"></path></g></g></g></svg></mjx-container>中选取两颗根结点权值最小的树作为新结点的左、右子树，并且将新结点的权值置为左、右子树上根结点的权值之和</p>\n<p>（3）从<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.695ex\" height=\"1.538ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -680 749 680\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"></path></g></g></g></svg></mjx-container>中删除刚才选出的两棵树，同时将新得到的树加入<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.695ex\" height=\"1.538ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -680 749 680\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"></path></g></g></g></svg></mjx-container>中</p>\n<p>（4）重复(2)和(3)，直至<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.695ex\" height=\"1.538ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -680 749 680\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"></path></g></g></g></svg></mjx-container>中只剩下一棵树为止</p>\n<p>如下图:</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1629255984834-e518842c-e91e-42ee-8208-156ddb576e98.png#height=239&id=kwBiB&margin=%5Bobject%20Object%5D&name=image.png&originHeight=477&originWidth=1473&originalType=binary&ratio=1&size=451262&status=done&style=none&width=737\" alt=\"image.png\"></p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">import</span><span style=\"color: #F8F8F2\"> java.util.ArrayList;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">import</span><span style=\"color: #F8F8F2\"> java.util.Collections;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">import</span><span style=\"color: #F8F8F2\"> java.util.List;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">HuffmanTree</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">main</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\">[] </span><span style=\"color: #FFB86C; font-style: italic\">args</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\">[] arr </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> {</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">7</span><span style=\"color: #F8F8F2\">};</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">HuffmanNode</span><span style=\"color: #F8F8F2\"> root </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">createHuffmanTree</span><span style=\"color: #F8F8F2\">(arr);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">preOrder</span><span style=\"color: #F8F8F2\">(root); </span><span style=\"color: #6272A4\">// 15 7 8 3 1 2 5 2 3</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        System.out.</span><span style=\"color: #50FA7B\">println</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">midOrder</span><span style=\"color: #F8F8F2\">(root); </span><span style=\"color: #6272A4\">// 7 15 1 3 2 8 2 5 3</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">HuffmanNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">createHuffmanTree</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\">[] </span><span style=\"color: #FFB86C; font-style: italic\">arr</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">List</span><span style=\"color: #F8F8F2\">&lt;HuffmanNode&gt; huffmanNodes </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">ArrayList</span><span style=\"color: #F8F8F2\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">:</span><span style=\"color: #F8F8F2\"> arr) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            huffmanNodes.</span><span style=\"color: #50FA7B\">add</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">HuffmanNode</span><span style=\"color: #F8F8F2\">(i));</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">while</span><span style=\"color: #F8F8F2\">(huffmanNodes.</span><span style=\"color: #50FA7B\">size</span><span style=\"color: #F8F8F2\">() </span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            Collections.</span><span style=\"color: #50FA7B\">sort</span><span style=\"color: #F8F8F2\">(huffmanNodes);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #8BE9FD; font-style: italic\">HuffmanNode</span><span style=\"color: #F8F8F2\"> parentNode </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">HuffmanNode</span><span style=\"color: #F8F8F2\">(huffmanNodes.</span><span style=\"color: #50FA7B\">get</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">).value </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> huffmanNodes.</span><span style=\"color: #50FA7B\">get</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">).value);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            parentNode.left </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> huffmanNodes.</span><span style=\"color: #50FA7B\">get</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            parentNode.right </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> huffmanNodes.</span><span style=\"color: #50FA7B\">get</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            huffmanNodes.</span><span style=\"color: #50FA7B\">add</span><span style=\"color: #F8F8F2\">(parentNode);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            huffmanNodes.</span><span style=\"color: #50FA7B\">remove</span><span style=\"color: #F8F8F2\">(parentNode.left);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            huffmanNodes.</span><span style=\"color: #50FA7B\">remove</span><span style=\"color: #F8F8F2\">(parentNode.right);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> huffmanNodes.</span><span style=\"color: #50FA7B\">get</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">preOrder</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">HuffmanNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        System.out.</span><span style=\"color: #50FA7B\">print</span><span style=\"color: #F8F8F2\">(node.value </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">preOrder</span><span style=\"color: #F8F8F2\">(node.left);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">preOrder</span><span style=\"color: #F8F8F2\">(node.right);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">midOrder</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">HuffmanNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">midOrder</span><span style=\"color: #F8F8F2\">(node.left);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        System.out.</span><span style=\"color: #50FA7B\">print</span><span style=\"color: #F8F8F2\">(node.value </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">midOrder</span><span style=\"color: #F8F8F2\">(node.right);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">HuffmanNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">implements</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">Comparable</span><span style=\"color: #F8F8F2\">&lt;HuffmanNode&gt; {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> value;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">HuffmanNode</span><span style=\"color: #F8F8F2\"> left;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">HuffmanNode</span><span style=\"color: #F8F8F2\"> right;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">HuffmanNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">value</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.value </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> value;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    @</span><span style=\"color: #8BE9FD; font-style: italic\">Override</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">compareTo</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">HuffmanNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">o</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.value </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> o.value;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    @</span><span style=\"color: #8BE9FD; font-style: italic\">Override</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">toString</span><span style=\"color: #F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">HuffmanNode{</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">value=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> value </span><span style=\"color: #FF79C6\">+</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">, left=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> left </span><span style=\"color: #FF79C6\">+</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">, right=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> right </span><span style=\"color: #FF79C6\">+</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">}</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><h2 id=\"哈夫曼编码-Huffman-Coding\"><a href=\"#哈夫曼编码-Huffman-Coding\" class=\"headerlink\" title=\"哈夫曼编码(Huffman Coding)\"></a>哈夫曼编码(Huffman Coding)</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><ul>\n<li>霍夫曼编码（英语：Huffman Coding），又译为哈夫曼编码、赫夫曼编码，是一种用于无损数据压缩的<strong>熵编码</strong>（权编码）算法。由美国计算机科学家大卫·霍夫曼（David Albert Huffman）在1952年发明。</li>\n<li>Huffman编码是可变长(VLC)编码的一种, Huffman编码是前缀编码.</li>\n<li><strong>固定长度编码</strong>: 每个字符用相等长度的二进制位表示</li>\n<li><strong>可变长度编码(VLC)</strong>: 允许对不同字符用不等长的二进制位表示</li>\n<li><strong>前缀编码(prefix code)</strong>: 任何字符的编码都不是另一字符编码的前缀, 即可做到无二义地解码</li>\n</ul>\n<p>例子:</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1629304838645-73562267-9785-4f21-ae3f-f7dd4519a445.png#clientId=u7ad2ad38-e44f-4&from=paste&height=494&id=u3a17f232&margin=%5Bobject%20Object%5D&name=image.png&originHeight=659&originWidth=1024&originalType=binary&ratio=1&size=93792&status=done&style=none&taskId=u98154458-1fe9-406f-8fd7-9b742967046&width=768\" alt=\"image.png\"><br>这个句子“this is an example of a huffman tree”中得到的字母频率来构建哈夫曼树。句中字母的编码和频率如图所示。编码此句子需要135 bit（不包括保存树所用的空间）</p>\n<table>\n<thead>\n<tr>\n<th>字母</th>\n<th>频率</th>\n<th>编码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>space</td>\n<td>7</td>\n<td>111</td>\n</tr>\n<tr>\n<td>a</td>\n<td>4</td>\n<td>010</td>\n</tr>\n<tr>\n<td>e</td>\n<td>4</td>\n<td>000</td>\n</tr>\n<tr>\n<td>f</td>\n<td>3</td>\n<td>1101</td>\n</tr>\n<tr>\n<td>h</td>\n<td>2</td>\n<td>1010</td>\n</tr>\n<tr>\n<td>i</td>\n<td>2</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>m</td>\n<td>2</td>\n<td>0111</td>\n</tr>\n<tr>\n<td>n</td>\n<td>2</td>\n<td>0010</td>\n</tr>\n<tr>\n<td>s</td>\n<td>2</td>\n<td>1011</td>\n</tr>\n<tr>\n<td>t</td>\n<td>2</td>\n<td>0110</td>\n</tr>\n<tr>\n<td>l</td>\n<td>1</td>\n<td>11001</td>\n</tr>\n<tr>\n<td>o</td>\n<td>1</td>\n<td>00110</td>\n</tr>\n<tr>\n<td>p</td>\n<td>1</td>\n<td>10011</td>\n</tr>\n<tr>\n<td>r</td>\n<td>1</td>\n<td>11000</td>\n</tr>\n<tr>\n<td>u</td>\n<td>1</td>\n<td>00111</td>\n</tr>\n<tr>\n<td>x</td>\n<td>1</td>\n<td>10010</td>\n</tr>\n</tbody></table>\n<h3 id=\"算法思路-2\"><a href=\"#算法思路-2\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h3><ol>\n<li>统计字符串各个字符对应的个数</li>\n<li>对照字符出现的次数构建一颗<strong>哈夫曼树</strong>, <strong>次数作为权值</strong><ol>\n<li>从小到大进行排序, 将每一个数据, 每个数据都是一个节点, 每个节点可以看成是一颗最简单的二叉树</li>\n<li>取出根结点权值最小的两颗二叉树组成一颗新的二叉树, 该新的二叉树的根节点的权值是前面两颗二叉树根节点权值的和</li>\n<li>再将这颗新的二叉树以根节点的权值大小再次排序, 不断重复a-b-c, 直至数列中所有数据都处理完毕构建成哈夫曼树</li>\n</ol>\n</li>\n<li>根据哈夫曼树给各个字符进行规定编码(前缀编码), <strong>向左的路径为0, 向右的路径为1</strong></li>\n<li>对字符串进行哈夫曼编码处理:<ol>\n<li>编码(压缩)<ol>\n<li>将哈夫曼码的字符串<code>str</code>的长度对8取余(<code>(str.length()+7)/8</code>)得到长度<code>len</code></li>\n<li>创建长度为<code>len</code>的字节数组<code>huffmanCodeBytes</code>用于存放压缩的数据</li>\n<li>以跨度为8循环遍历<code>str</code>, 将取出的每8个子字符串(bit)转化为<strong>字节类型</strong>并放入<code>huffmanCodeBytes</code>中</li>\n</ol>\n</li>\n<li>解码(解压)<ol>\n<li>将经过哈夫曼编码的字节数组转换成二进制字符串</li>\n<li>遍历二进制字符串对照Huffman编码表进行解码(需要将字节转换成二进制的字符串)</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">import</span><span style=\"color: #F8F8F2\"> java.util.</span><span style=\"color: #BD93F9; font-style: italic\">*</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">HuffmanCoding</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">Map</span><span style=\"color: #F8F8F2\">&lt;Byte, String&gt; huffmanCodesMap;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">main</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\">[] </span><span style=\"color: #FFB86C; font-style: italic\">args</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\"> str </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">this is an example of a huffman tree</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        System.out.</span><span style=\"color: #50FA7B\">println</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">source =&gt; </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> Arrays.</span><span style=\"color: #50FA7B\">toString</span><span style=\"color: #F8F8F2\">(str.</span><span style=\"color: #50FA7B\">getBytes</span><span style=\"color: #F8F8F2\">()));</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">byte</span><span style=\"color: #F8F8F2\">[] zip </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">huffmanZip</span><span style=\"color: #F8F8F2\">(str.</span><span style=\"color: #50FA7B\">getBytes</span><span style=\"color: #F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        System.out.</span><span style=\"color: #50FA7B\">println</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">压缩哈弗曼编码后 =&gt; </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> Arrays.</span><span style=\"color: #50FA7B\">toString</span><span style=\"color: #F8F8F2\">(zip));</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">byte</span><span style=\"color: #F8F8F2\">[] decode </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">decode</span><span style=\"color: #F8F8F2\">(huffmanCodesMap, zip);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        System.out.</span><span style=\"color: #50FA7B\">println</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">解码哈弗曼编码后 =&gt; </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> Arrays.</span><span style=\"color: #50FA7B\">toString</span><span style=\"color: #F8F8F2\">(decode));</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * 哈夫曼解码</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     *</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">huffmanCodesMap</span><span style=\"color: #6272A4\"> 哈夫曼码表</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">huffmanBytes</span><span style=\"color: #6272A4\">    哈夫曼字节数组</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@return</span><span style=\"color: #6272A4\"> 解码后的字节数组</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">private</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">byte</span><span style=\"color: #F8F8F2\">[] </span><span style=\"color: #50FA7B\">decode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">Map</span><span style=\"color: #F8F8F2\">&lt;Byte, String&gt; </span><span style=\"color: #FFB86C; font-style: italic\">huffmanCodesMap</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #8BE9FD; font-style: italic\">byte</span><span style=\"color: #F8F8F2\">[] </span><span style=\"color: #FFB86C; font-style: italic\">huffmanBytes</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">StringBuilder</span><span style=\"color: #F8F8F2\"> stringBuilder </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">StringBuilder</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 将经过哈夫曼编码后的字节数组转换成二进制字符串</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> huffmanBytes.length; i</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #8BE9FD; font-style: italic\">byte</span><span style=\"color: #F8F8F2\"> b </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> huffmanBytes[i];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #6272A4\">// 判断是否是最后一个字节</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #8BE9FD; font-style: italic\">boolean</span><span style=\"color: #F8F8F2\"> flag </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (i </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> huffmanBytes.length </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            stringBuilder.</span><span style=\"color: #50FA7B\">append</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #50FA7B\">byteToBitString</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">!</span><span style=\"color: #F8F8F2\">flag, b));</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 方便进行反查</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">Map</span><span style=\"color: #F8F8F2\">&lt;String, Byte&gt; map </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">HashMap</span><span style=\"color: #F8F8F2\">&lt;String, Byte&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #8BE9FD; font-style: italic\">Map</span><span style=\"color: #F8F8F2\">.</span><span style=\"color: #8BE9FD; font-style: italic\">Entry</span><span style=\"color: #F8F8F2\">&lt;Byte, String&gt; entry </span><span style=\"color: #FF79C6\">:</span><span style=\"color: #F8F8F2\"> huffmanCodesMap.</span><span style=\"color: #50FA7B\">entrySet</span><span style=\"color: #F8F8F2\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            map.</span><span style=\"color: #50FA7B\">put</span><span style=\"color: #F8F8F2\">(entry.</span><span style=\"color: #50FA7B\">getValue</span><span style=\"color: #F8F8F2\">(), entry.</span><span style=\"color: #50FA7B\">getKey</span><span style=\"color: #F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">List</span><span style=\"color: #F8F8F2\">&lt;Byte&gt; list </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">ArrayList</span><span style=\"color: #F8F8F2\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> stringBuilder.</span><span style=\"color: #50FA7B\">length</span><span style=\"color: #F8F8F2\">(); ) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> count </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #8BE9FD; font-style: italic\">Byte</span><span style=\"color: #F8F8F2\"> b;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">while</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #BD93F9\">true</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\"> key </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> stringBuilder.</span><span style=\"color: #50FA7B\">substring</span><span style=\"color: #F8F8F2\">(i, i </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> count);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> ((b </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> map.</span><span style=\"color: #50FA7B\">get</span><span style=\"color: #F8F8F2\">(key)) </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    count</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                    </span><span style=\"color: #FF79C6\">break</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            list.</span><span style=\"color: #50FA7B\">add</span><span style=\"color: #F8F8F2\">(b);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            i </span><span style=\"color: #FF79C6\">+=</span><span style=\"color: #F8F8F2\"> count;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">byte</span><span style=\"color: #F8F8F2\">[] b </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">byte</span><span style=\"color: #F8F8F2\">[list.</span><span style=\"color: #50FA7B\">size</span><span style=\"color: #F8F8F2\">()];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> b.length; i</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            b[i] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> list.</span><span style=\"color: #50FA7B\">get</span><span style=\"color: #F8F8F2\">(i);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> b;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * 将字节转换成二进制的字符串</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     *</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">flag</span><span style=\"color: #6272A4\"> 是否需要补高位, true为需要补高位, false则不补(最后一个字节则无需补高位)</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">b</span><span style=\"color: #6272A4\">    byte</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@return</span><span style=\"color: #6272A4\"> 二进制字符串</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">private</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">byteToBitString</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">boolean</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">flag</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #8BE9FD; font-style: italic\">byte</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">b</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> temp </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> b;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (flag) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            temp </span><span style=\"color: #FF79C6\">|=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">256</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\"> str </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> Integer.</span><span style=\"color: #50FA7B\">toBinaryString</span><span style=\"color: #F8F8F2\">(temp);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (flag) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> str.</span><span style=\"color: #50FA7B\">substring</span><span style=\"color: #F8F8F2\">(str.</span><span style=\"color: #50FA7B\">length</span><span style=\"color: #F8F8F2\">() </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">8</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> str;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * 哈夫曼编码压缩</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     *</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">bytes</span><span style=\"color: #6272A4\"> 待压缩的字节数组</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@return</span><span style=\"color: #6272A4\"> 压缩后的字节数组</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">private</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">byte</span><span style=\"color: #F8F8F2\">[] </span><span style=\"color: #50FA7B\">huffmanZip</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">byte</span><span style=\"color: #F8F8F2\">[] </span><span style=\"color: #FFB86C; font-style: italic\">bytes</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">Map</span><span style=\"color: #F8F8F2\">&lt;Byte, Integer&gt; countMap </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">HashMap</span><span style=\"color: #F8F8F2\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #8BE9FD; font-style: italic\">byte</span><span style=\"color: #F8F8F2\"> c </span><span style=\"color: #FF79C6\">:</span><span style=\"color: #F8F8F2\"> bytes) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (countMap.</span><span style=\"color: #50FA7B\">containsKey</span><span style=\"color: #F8F8F2\">(c)) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                countMap.</span><span style=\"color: #50FA7B\">put</span><span style=\"color: #F8F8F2\">(c, countMap.</span><span style=\"color: #50FA7B\">get</span><span style=\"color: #F8F8F2\">(c) </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                countMap.</span><span style=\"color: #50FA7B\">put</span><span style=\"color: #F8F8F2\">(c, </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">HuffmanNode</span><span style=\"color: #F8F8F2\"> huffmanTreeRootNode </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> HuffmanTree.</span><span style=\"color: #50FA7B\">createHuffmanTree</span><span style=\"color: #F8F8F2\">(countMap);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">Map</span><span style=\"color: #F8F8F2\">&lt;Byte, String&gt; codeMap </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">getCodeMap</span><span style=\"color: #F8F8F2\">(huffmanTreeRootNode);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 放到全局变量中, 方便调用测试</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        huffmanCodesMap </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> codeMap;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 将各个字符进行哈夫曼编码</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">StringBuilder</span><span style=\"color: #F8F8F2\"> compressedStr </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">StringBuilder</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #8BE9FD; font-style: italic\">byte</span><span style=\"color: #F8F8F2\"> b </span><span style=\"color: #FF79C6\">:</span><span style=\"color: #F8F8F2\"> bytes) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            compressedStr.</span><span style=\"color: #50FA7B\">append</span><span style=\"color: #F8F8F2\">(codeMap.</span><span style=\"color: #50FA7B\">get</span><span style=\"color: #F8F8F2\">(b));</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 对哈夫曼编码进行压缩</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">zip</span><span style=\"color: #F8F8F2\">(compressedStr.</span><span style=\"color: #50FA7B\">toString</span><span style=\"color: #F8F8F2\">(), codeMap);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * 压缩哈弗曼编码</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     *</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">huffmanCodeStr</span><span style=\"color: #6272A4\"> 哈夫曼编码后的字符串</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">codeMap</span><span style=\"color: #6272A4\">        哈弗曼编码表</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@return</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">private</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">byte</span><span style=\"color: #F8F8F2\">[] </span><span style=\"color: #50FA7B\">zip</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">huffmanCodeStr</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #8BE9FD; font-style: italic\">Map</span><span style=\"color: #F8F8F2\">&lt;Byte, String&gt; </span><span style=\"color: #FFB86C; font-style: italic\">codeMap</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// 对8取余</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> len </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (huffmanCodeStr.</span><span style=\"color: #50FA7B\">length</span><span style=\"color: #F8F8F2\">() </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">7</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">8</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">byte</span><span style=\"color: #F8F8F2\">[] huffmanCodeBytes </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">byte</span><span style=\"color: #F8F8F2\">[len];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">, index </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> huffmanCodeStr.</span><span style=\"color: #50FA7B\">length</span><span style=\"color: #F8F8F2\">(); i </span><span style=\"color: #FF79C6\">+=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">8</span><span style=\"color: #F8F8F2\">, index</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\"> strByte;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (i </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">8</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> huffmanCodeStr.</span><span style=\"color: #50FA7B\">length</span><span style=\"color: #F8F8F2\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                strByte </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> huffmanCodeStr.</span><span style=\"color: #50FA7B\">substring</span><span style=\"color: #F8F8F2\">(i);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                strByte </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> huffmanCodeStr.</span><span style=\"color: #50FA7B\">substring</span><span style=\"color: #F8F8F2\">(i, i </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">8</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #6272A4\">// !!!难点!!!</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            huffmanCodeBytes[index] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #8BE9FD; font-style: italic\">byte</span><span style=\"color: #F8F8F2\">) Integer.</span><span style=\"color: #50FA7B\">parseInt</span><span style=\"color: #F8F8F2\">(strByte, </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> huffmanCodeBytes;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * 获取哈夫曼编码表</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     *</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">root</span><span style=\"color: #6272A4\"> 哈夫曼树头结点</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@return</span><span style=\"color: #6272A4\"> 编码表</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">private</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">Map</span><span style=\"color: #F8F8F2\">&lt;Byte, String&gt; </span><span style=\"color: #50FA7B\">getCodeMap</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">HuffmanNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">root</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">Map</span><span style=\"color: #F8F8F2\">&lt;Byte, String&gt; map </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">HashMap</span><span style=\"color: #F8F8F2\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">getRouteToMap</span><span style=\"color: #F8F8F2\">(root, </span><span style=\"color: #E9F284\">\"\"</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">StringBuilder</span><span style=\"color: #F8F8F2\">(), map);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> map;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * 递归获取路径</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     *</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #6272A4\"> 哈夫曼树节点</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">code</span><span style=\"color: #6272A4\"> 0表示左, 1表示右</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">sb</span><span style=\"color: #6272A4\">   拼接的路径</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">map</span><span style=\"color: #6272A4\">  最终形成的哈弗曼编码表</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">private</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">getRouteToMap</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">HuffmanNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">code</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #8BE9FD; font-style: italic\">StringBuilder</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">sb</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #8BE9FD; font-style: italic\">Map</span><span style=\"color: #F8F8F2\">&lt;Byte, String&gt; </span><span style=\"color: #FFB86C; font-style: italic\">map</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">StringBuilder</span><span style=\"color: #F8F8F2\"> stringBuilder </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">StringBuilder</span><span style=\"color: #F8F8F2\">(sb);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        stringBuilder.</span><span style=\"color: #50FA7B\">append</span><span style=\"color: #F8F8F2\">(code);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node.left </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> node.right </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #6272A4\">// 是叶子结点</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            map.</span><span style=\"color: #50FA7B\">put</span><span style=\"color: #F8F8F2\">(node.data, stringBuilder.</span><span style=\"color: #50FA7B\">toString</span><span style=\"color: #F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">getRouteToMap</span><span style=\"color: #F8F8F2\">(node.left, </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">0</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, stringBuilder, map);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">getRouteToMap</span><span style=\"color: #F8F8F2\">(node.right, </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">1</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">, stringBuilder, map);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">HuffmanTree</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">HuffmanNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">createHuffmanTree</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">Map</span><span style=\"color: #F8F8F2\">&lt;Byte, Integer&gt; </span><span style=\"color: #FFB86C; font-style: italic\">countMap</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">List</span><span style=\"color: #F8F8F2\">&lt;HuffmanNode&gt; huffmanNodes </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">ArrayList</span><span style=\"color: #F8F8F2\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #8BE9FD; font-style: italic\">Byte</span><span style=\"color: #F8F8F2\"> data </span><span style=\"color: #FF79C6\">:</span><span style=\"color: #F8F8F2\"> countMap.</span><span style=\"color: #50FA7B\">keySet</span><span style=\"color: #F8F8F2\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #8BE9FD; font-style: italic\">Integer</span><span style=\"color: #F8F8F2\"> height </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> countMap.</span><span style=\"color: #50FA7B\">get</span><span style=\"color: #F8F8F2\">(data);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            huffmanNodes.</span><span style=\"color: #50FA7B\">add</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">HuffmanNode</span><span style=\"color: #F8F8F2\">(data, height));</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">while</span><span style=\"color: #F8F8F2\"> (huffmanNodes.</span><span style=\"color: #50FA7B\">size</span><span style=\"color: #F8F8F2\">() </span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            Collections.</span><span style=\"color: #50FA7B\">sort</span><span style=\"color: #F8F8F2\">(huffmanNodes);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #8BE9FD; font-style: italic\">HuffmanNode</span><span style=\"color: #F8F8F2\"> parentNode </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">HuffmanNode</span><span style=\"color: #F8F8F2\">(huffmanNodes.</span><span style=\"color: #50FA7B\">get</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">).height </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> huffmanNodes.</span><span style=\"color: #50FA7B\">get</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">).height);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            parentNode.left </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> huffmanNodes.</span><span style=\"color: #50FA7B\">get</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            parentNode.right </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> huffmanNodes.</span><span style=\"color: #50FA7B\">get</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            huffmanNodes.</span><span style=\"color: #50FA7B\">add</span><span style=\"color: #F8F8F2\">(parentNode);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            huffmanNodes.</span><span style=\"color: #50FA7B\">remove</span><span style=\"color: #F8F8F2\">(parentNode.left);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            huffmanNodes.</span><span style=\"color: #50FA7B\">remove</span><span style=\"color: #F8F8F2\">(parentNode.right);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> huffmanNodes.</span><span style=\"color: #50FA7B\">get</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">HuffmanNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">implements</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">Comparable</span><span style=\"color: #F8F8F2\">&lt;HuffmanNode&gt; {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">Byte</span><span style=\"color: #F8F8F2\"> data;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> height;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">HuffmanNode</span><span style=\"color: #F8F8F2\"> left;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">HuffmanNode</span><span style=\"color: #F8F8F2\"> right;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    @</span><span style=\"color: #8BE9FD; font-style: italic\">Override</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">compareTo</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">HuffmanNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">o</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.height </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> o.height;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">HuffmanNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">height</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.height </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> height;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">HuffmanNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">Byte</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">data</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">height</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.data </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> data;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.height </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> height;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    @</span><span style=\"color: #8BE9FD; font-style: italic\">Override</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">toString</span><span style=\"color: #F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">HuffmanNode{</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">data=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> data </span><span style=\"color: #FF79C6\">+</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">, height=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> height </span><span style=\"color: #FF79C6\">+</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">, left=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> left </span><span style=\"color: #FF79C6\">+</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">, right=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> right </span><span style=\"color: #FF79C6\">+</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">}</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><h1 id=\"二叉排序树-BST\"><a href=\"#二叉排序树-BST\" class=\"headerlink\" title=\"二叉排序树(BST)\"></a>二叉排序树(BST)</h1><h2 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1629431374791-56773dbc-c2ac-42a2-a4c3-1f7ea6bafe59.png#clientId=u7225f57d-83ba-4&from=paste&height=233&id=uff76088d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1600&originWidth=1920&originalType=binary&ratio=1&size=139801&status=done&style=none&taskId=u267a1b66-b249-4d74-82da-70b2c3e0549&width=279\" alt=\"image.png\"></p>\n<ul>\n<li><p><strong>二叉排序树</strong>(Binary Sort Tree), 也称为<strong>有序二叉树</strong>(ordered binary tree)或<strong>二叉查找树</strong>(Binary Search Tree), 是一颗空树或具有以下性质的二叉树:</p>\n<ol>\n<li>若任意若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；</li>\n<li>若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；</li>\n<li>任意节点的左、右子树也分别为二叉查找树；</li>\n</ol>\n</li>\n<li><p>BST相比于其他数据结构的优势在于<strong>查找、插入的时间复杂度较低</strong>。为<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.695ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3401 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(763,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1152,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1450,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1935,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2412,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3012,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container>。</p>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th><strong>平均</strong></th>\n<th><strong>最差</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>空间</td>\n<td>O(<em>n</em>)</td>\n<td>O(<em>n</em>)</td>\n</tr>\n<tr>\n<td>搜索</td>\n<td>O(log <em>n</em>)</td>\n<td>O(<em>n</em>)</td>\n</tr>\n<tr>\n<td>插入</td>\n<td>O(log <em>n</em>)</td>\n<td>O(<em>n</em>)</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>O(log <em>n</em>)</td>\n<td>O(<em>n</em>)</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>BST是基础性数据结构，用于构建更为抽象的数据结构，如集合、多重集、关联数组等。</p>\n</li>\n</ul>\n<h2 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h2><p>我们将要插入的结点称为node, 则插入node</p>\n<ol>\n<li>如果node为空则直接返回</li>\n<li>如果当前要插入节点</li>\n</ol>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><ol>\n<li>如果当前node为空, 则搜索失败</li>\n<li>如果要搜索的值等于当前node的值, 则查找成功</li>\n<li>如果当前node的值&gt;要搜索的值, 则搜索左子树; 否则搜索右子树</li>\n</ol>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><p>BST的删除情况比较复杂, 有下面三种情况需要考虑</p>\n<ol>\n<li><p>**删除叶子节点(比如1, 4, 7, 13)\t**</p>\n<ol>\n<li>先找到要删除的节点<code>targetNode</code></li>\n<li>找到<code>targetNode</code>的父节点<code>parent</code></li>\n<li>判断<code>targetNode</code>是<code>parent</code>的左还是右子节点对应删除</li>\n</ol>\n</li>\n<li><p><strong>删除只有一颗子树的节点(比如14)</strong></p>\n<ol>\n<li>先找到要删除的节点<code>targetNode</code></li>\n<li>找到<code>targetNode</code>的父节点<code>parent</code></li>\n<li>确定<code>targetNode</code>的子节点是左子节点还是子节点</li>\n<li>确定<code>targetNode</code>是<code>parent</code>的左子节点还是右子节点</li>\n<li>如果targetNode有<strong>左子节点</strong><ul>\n<li><p>如果<code>targetNode</code>是<code>parent</code>的**左子节点 **=&gt; <code>parent.left = targetNode.left;</code></p>\n</li>\n<li><p>如果<code>targetNode</code>是<code>parent</code>的<strong>右子节点</strong> =&gt; <code>parent.right = targetNode.left;</code></p>\n</li>\n</ul>\n</li>\n<li>如果targetNode有<strong>右子节点</strong><ul>\n<li><p>如果<code>targetNode</code>是<code>parent</code>的<strong>左子节点</strong> =&gt; <code>parent.left = targetNode.right;</code></p>\n</li>\n<li><p>如果<code>targetNode</code>是<code>parent</code>的<strong>右子节点</strong> =&gt; <code>parent.right = targetNode.right;</code></p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p><strong>删除两颗子树的节点(比如8, 3, 6)</strong></p>\n<ol>\n<li>先找到要删除的节点<code>targetNode</code></li>\n<li>找到<code>targetNode</code>的父节点<code>parent</code></li>\n<li>从<code>targetNode</code>的<strong>右子树中找到最小的节点(中序遍历)</strong></li>\n<li>用一个临时变量将最小节点的值保存并删除该结点</li>\n<li>targetNode.value = temp</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">BinarySearchTree</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">private</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">BSTNode</span><span style=\"color: #F8F8F2\"> root </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">add</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">BSTNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.root </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #6272A4\">// root is empty then put the node.</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.root </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.root.</span><span style=\"color: #50FA7B\">add</span><span style=\"color: #F8F8F2\">(node);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">BSTNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">searchParent</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">targetVal</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">searchParent</span><span style=\"color: #F8F8F2\">(targetVal, </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.root);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * find the parent node of the target node</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     *</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">targetVal</span><span style=\"color: #6272A4\"> Value of the target node</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #6272A4\">      BST node</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@return</span><span style=\"color: #6272A4\"> Parent node of the target</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">private</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">BSTNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">searchParent</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">targetVal</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #8BE9FD; font-style: italic\">BSTNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> ((node.left </span><span style=\"color: #FF79C6\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> node.left.value </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> targetVal) </span><span style=\"color: #FF79C6\">||</span><span style=\"color: #F8F8F2\"> (node.right </span><span style=\"color: #FF79C6\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> node.right.value </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> targetVal)) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> node;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (targetVal </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> node.value) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">searchParent</span><span style=\"color: #F8F8F2\">(targetVal, node.left);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (targetVal </span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> node.value) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">searchParent</span><span style=\"color: #F8F8F2\">(targetVal, node.right);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">BSTNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">search</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">targetVal</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">search</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.root, targetVal);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">private</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">BSTNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">search</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">BSTNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">targetVal</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node.value </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> targetVal) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> node;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node.value </span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> targetVal) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">search</span><span style=\"color: #F8F8F2\">(node.left, targetVal);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">search</span><span style=\"color: #F8F8F2\">(node.right, targetVal);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">BSTNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">searchMinNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">BSTNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node.left </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> node;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">searchMinNode</span><span style=\"color: #F8F8F2\">(node.left);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">delete</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">value</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">BSTNode</span><span style=\"color: #F8F8F2\"> targetNode </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">search</span><span style=\"color: #F8F8F2\">(value);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\">(targetNode </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            System.out.</span><span style=\"color: #50FA7B\">println</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">Cannot found target node.</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// Only one node.</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\">(root.left </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> root.right </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            root </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">BSTNode</span><span style=\"color: #F8F8F2\"> parent </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">searchParent</span><span style=\"color: #F8F8F2\">(value);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// case 1: target node is the leaf node.</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (targetNode.left </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> targetNode.right </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (parent.left </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> targetNode) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                parent.left </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (parent.right </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> targetNode) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                parent.right </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                System.out.</span><span style=\"color: #50FA7B\">println</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">delete fail(case 1)</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// case 2: target node has only left or right child tree.</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (targetNode.left </span><span style=\"color: #FF79C6\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> targetNode.right </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (parent.left </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> targetNode) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                parent.left </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> targetNode.left;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (parent.right </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> targetNode) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                parent.right </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> targetNode.left;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                System.out.</span><span style=\"color: #50FA7B\">println</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">delete fail(case 2)</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (targetNode.right </span><span style=\"color: #FF79C6\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> targetNode.left </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (parent.left </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> targetNode) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                parent.left </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> targetNode.right;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (parent.right </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> targetNode) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                parent.right </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> targetNode.right;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                System.out.</span><span style=\"color: #50FA7B\">println</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">delete fail(case 2)</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// case 3: target node has two child tree.</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (targetNode.left </span><span style=\"color: #FF79C6\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> targetNode.right </span><span style=\"color: #FF79C6\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #8BE9FD; font-style: italic\">BSTNode</span><span style=\"color: #F8F8F2\"> minNode </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">searchMinNode</span><span style=\"color: #F8F8F2\">(targetNode.right);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> minVal </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> minNode.value;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #8BE9FD; font-style: italic\">BSTNode</span><span style=\"color: #F8F8F2\"> minNodeParent </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">searchParent</span><span style=\"color: #F8F8F2\">(minNode.value);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #6272A4\">// delete min node.</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #50FA7B\">delete</span><span style=\"color: #F8F8F2\">(minNode.value);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #6272A4\">// assign the value of min node of the right child tree to the target node.</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            targetNode.value </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> minVal;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">main</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\">[] </span><span style=\"color: #FFB86C; font-style: italic\">args</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">BinarySearchTree</span><span style=\"color: #F8F8F2\"> bst </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">BinarySearchTree</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\">[] arr </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> {</span><span style=\"color: #BD93F9\">8</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">10</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">6</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">14</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">4</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">7</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">13</span><span style=\"color: #F8F8F2\">};</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">:</span><span style=\"color: #F8F8F2\"> arr) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            bst.</span><span style=\"color: #50FA7B\">add</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">BSTNode</span><span style=\"color: #F8F8F2\">(i));</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        bst.</span><span style=\"color: #50FA7B\">delete</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">6</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        System.out.</span><span style=\"color: #50FA7B\">println</span><span style=\"color: #F8F8F2\">(bst.root);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">BSTNode</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> value;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * left child tree</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">BSTNode</span><span style=\"color: #F8F8F2\"> left;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * right child tree</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">BSTNode</span><span style=\"color: #F8F8F2\"> right;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">BSTNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">value</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.value </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> value;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * insert node</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     *</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     * </span><span style=\"color: #FF79C6\">@param</span><span style=\"color: #6272A4\"> </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #6272A4\"> node to insert</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">     */</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">add</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">BSTNode</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// judge whether the value of the target node is smaller than the value of the current node.</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node.value </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.value) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.left </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.left </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.left.</span><span style=\"color: #50FA7B\">add</span><span style=\"color: #F8F8F2\">(node);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.right </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.right </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.right.</span><span style=\"color: #50FA7B\">add</span><span style=\"color: #F8F8F2\">(node);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    @</span><span style=\"color: #8BE9FD; font-style: italic\">Override</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">toString</span><span style=\"color: #F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">BSTNode{</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">value=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> value </span><span style=\"color: #FF79C6\">+</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">, left=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> left </span><span style=\"color: #FF79C6\">+</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">, right=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> right </span><span style=\"color: #FF79C6\">+</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">}</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span></code></pre></div><h1 id=\"平衡二叉树-AVL树\"><a href=\"#平衡二叉树-AVL树\" class=\"headerlink\" title=\"平衡二叉树(AVL树)\"></a>平衡二叉树(AVL树)</h1><h2 id=\"概念-2\"><a href=\"#概念-2\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ul>\n<li><strong>自平衡二叉查找树</strong>, 简称平衡树(AVL树, Adelson-Velsky and Landis Tree)</li>\n<li>树上任一结点的左子树和右子树高度只差<strong>不超过1</strong></li>\n<li>结点的平衡因子 = 左子树高 - 右子树高</li>\n<li>平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等。<table>\n<thead>\n<tr>\n<th><strong>算法</strong></th>\n<th><strong>平均</strong></th>\n<th><strong>最差</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>空间</strong></td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td><strong>搜索</strong></td>\n<td>O(log n)</td>\n<td>O(log n)</td>\n</tr>\n<tr>\n<td><strong>插入</strong></td>\n<td>O(log n)</td>\n<td>O(log n)</td>\n</tr>\n<tr>\n<td><strong>删除</strong></td>\n<td>O(log n)</td>\n<td>O(log n)</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h2 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h2><ul>\n<li>AVL树和二叉排序树一样，找到合适的位置插入</li>\n<li>新插入的结点可能导致其祖先们平衡因子改变，导致失衡</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1629616363299-83d3e76e-b3d8-4f80-bc49-732d1bc7ab84.png#clientId=u304205d3-5fcc-4&from=paste&height=376&id=u00612a8a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=614&originWidth=1345&originalType=binary&ratio=1&size=135983&status=done&style=none&taskId=ucc09dfbf-1432-4ef1-a05b-ded5789f689&width=823\" alt=\"image.png\"></p>\n<h2 id=\"调整”不平衡”\"><a href=\"#调整”不平衡”\" class=\"headerlink\" title=\"调整”不平衡”\"></a>调整”不平衡”</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2021/gif/12654026/1629617628007-4178edb0-422e-4145-939d-a388efd0efb8.gif#clientId=u304205d3-5fcc-4&from=ui&id=u15052d84&margin=%5Bobject%20Object%5D&name=AVL_Tree_Example.gif&originHeight=180&originWidth=320&originalType=binary&ratio=1&size=238993&status=done&style=none&taskId=u0586b492-b3d6-4b3f-87b8-a9f0a40313e\" alt=\"AVL_Tree_Example.gif\"></p>\n<p>找到最小不平衡子树进行调整, 记最小不平衡子树的根为<strong>A</strong>, 则:</p>\n<table>\n<thead>\n<tr>\n<th><strong>位置</strong></th>\n<th><strong>调整</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>LL</strong>(在A的左孩子的左子树中插入导致不平衡)</td>\n<td>将A的<strong>左孩子右上旋</strong></td>\n</tr>\n<tr>\n<td><strong>RR</strong>(在A的右孩子的右子树中插入导致不平衡)</td>\n<td>将A的<strong>右孩子左上旋</strong></td>\n</tr>\n<tr>\n<td><strong>LR</strong>(在A的左孩子的右子树中插入导致不平衡)</td>\n<td>将A的<strong>左孩子的右孩子</strong> <strong>先左上旋再右上旋</strong></td>\n</tr>\n<tr>\n<td><strong>RL</strong>(在A的右孩子的左子树中插入导致不平衡)</td>\n<td>将A的<strong>右孩子的左孩子</strong> <strong>先右上旋再左上旋</strong></td>\n</tr>\n</tbody></table>\n<h3 id=\"左旋\"><a href=\"#左旋\" class=\"headerlink\" title=\"左旋\"></a>左旋</h3><ol>\n<li>创建一个新的结点<code>newNode</code>, 其值为最小不平衡子树的根结点的值(以下都称为<strong>当前结点</strong>)</li>\n<li>把<code>newNode</code>的左子树设置成当前结点的左子树</li>\n<li>把<code>newNode</code>的右子树设置成当前结点的右子树的左子树</li>\n<li>把当前结点的值换成右子树的值</li>\n<li>把当前结点的右子树设置成右子树的右子树</li>\n<li>把当前结点的左子树设置成<code>newNode</code></li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1629645127037-64dec933-ec84-478d-947f-c46d449ba236.png#clientId=u8687c898-964a-4&from=paste&height=198&id=u5c17d55d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=264&originWidth=962&originalType=binary&ratio=1&size=38616&status=done&style=none&taskId=uff959ef8-6ab2-4571-88cc-4e9eb808c28&width=722\" alt=\"image.png\"></p>\n<h3 id=\"右旋\"><a href=\"#右旋\" class=\"headerlink\" title=\"右旋\"></a>右旋</h3><ol>\n<li>创建一个新的结点<code>newNode</code>, 其值为最小不平衡子树的根结点的值(以下都称为<strong>当前结点</strong>)</li>\n<li>把<code>newNode</code>的右子树设置成当前结点的右子树</li>\n<li>把<code>newNode</code>的左子树设置成当前结点的左子树的右子树</li>\n<li>把当前结点的值换成左子树的值</li>\n<li>把当前结点的左子树设置成左子树的右子树</li>\n<li>把当前结点的右子树设置成<code>newNode</code></li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1629645298433-421b681d-ccb3-4b7b-a160-6d153cb9613a.png#clientId=u8687c898-964a-4&from=paste&height=291&id=u792911c6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=388&originWidth=1002&originalType=binary&ratio=1&size=77783&status=done&style=none&taskId=u4f4a726c-aa4e-4b7b-b8cb-854c9dc6038&width=752\" alt=\"image.png\"></p>\n<h2 id=\"代码实现-3\"><a href=\"#代码实现-3\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">AVLTree</span><span style=\"color: #F8F8F2\">&lt;T </span><span style=\"color: #FF79C6\">extends</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">Comparable</span><span style=\"color: #F8F8F2\">&lt;T&gt;&gt; {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">private</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;T&gt; root;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;T&gt; </span><span style=\"color: #50FA7B\">search</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">T</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">targetVal</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">search</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.root, targetVal);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">private</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;T&gt; </span><span style=\"color: #50FA7B\">searchParent</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">T</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">targetVal</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">searchParent</span><span style=\"color: #F8F8F2\">(targetVal, </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.root);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">addNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;T&gt; </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.root </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.root </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;T&gt; parentNode </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">searchParent</span><span style=\"color: #F8F8F2\">(node.value, root);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> cmp </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node.value.</span><span style=\"color: #50FA7B\">compareTo</span><span style=\"color: #F8F8F2\">(parentNode.value);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (cmp </span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            parentNode.right </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            parentNode.left </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #6272A4\">// adjust imbalance</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (Math.</span><span style=\"color: #50FA7B\">abs</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #50FA7B\">getLeftTreeHeight</span><span style=\"color: #F8F8F2\">() </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">getRightTreeHeight</span><span style=\"color: #F8F8F2\">()) </span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;T&gt; minImbalanceNode </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">searchParent</span><span style=\"color: #F8F8F2\">(parentNode.value);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (minImbalanceNode.left </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> parentNode </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> parentNode.left </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> node) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #6272A4\">// LL</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #50FA7B\">rotateRight</span><span style=\"color: #F8F8F2\">(minImbalanceNode);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (minImbalanceNode.right </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> parentNode </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> parentNode.right </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> node) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #6272A4\">// RR</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #50FA7B\">rotateLeft</span><span style=\"color: #F8F8F2\">(minImbalanceNode);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (minImbalanceNode.left </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> parentNode </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> parentNode.right </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> node) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #6272A4\">// LR</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #50FA7B\">rotateLeft</span><span style=\"color: #F8F8F2\">(minImbalanceNode);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #50FA7B\">rotateRight</span><span style=\"color: #F8F8F2\">(minImbalanceNode);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (minImbalanceNode.right </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> parentNode </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> parentNode.left </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> node) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #6272A4\">// RL</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #50FA7B\">rotateRight</span><span style=\"color: #F8F8F2\">(minImbalanceNode);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #50FA7B\">rotateLeft</span><span style=\"color: #F8F8F2\">(minImbalanceNode);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">private</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;T&gt; </span><span style=\"color: #50FA7B\">search</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;T&gt; </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #8BE9FD; font-style: italic\">T</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">targetVal</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> cmp </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node.value.</span><span style=\"color: #50FA7B\">compareTo</span><span style=\"color: #F8F8F2\">(targetVal);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (cmp </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> node;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (cmp </span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">search</span><span style=\"color: #F8F8F2\">(node.left, targetVal);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">search</span><span style=\"color: #F8F8F2\">(node.right, targetVal);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">private</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;T&gt; </span><span style=\"color: #50FA7B\">searchParent</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">T</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">targetVal</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;T&gt; </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> cmp </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> targetVal.</span><span style=\"color: #50FA7B\">compareTo</span><span style=\"color: #F8F8F2\">(node.value);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> ((node.left </span><span style=\"color: #FF79C6\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> node.left.value </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> targetVal) </span><span style=\"color: #FF79C6\">||</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                (node.right </span><span style=\"color: #FF79C6\">!=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> node.right.value </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> targetVal)) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> node;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (cmp </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node.left </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> node;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">searchParent</span><span style=\"color: #F8F8F2\">(targetVal, node.left);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        } </span><span style=\"color: #FF79C6\">else</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (cmp </span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node.right </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> node;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">searchParent</span><span style=\"color: #F8F8F2\">(targetVal, node.right);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">getTreeHeight</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;T&gt; </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (node </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">null</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> Math.</span><span style=\"color: #50FA7B\">max</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #50FA7B\">getTreeHeight</span><span style=\"color: #F8F8F2\">(node.left), </span><span style=\"color: #50FA7B\">getTreeHeight</span><span style=\"color: #F8F8F2\">(node.right)) </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">getLeftTreeHeight</span><span style=\"color: #F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">getTreeHeight</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.root.left);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">getRightTreeHeight</span><span style=\"color: #F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">getTreeHeight</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.root.right);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">rotateLeft</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;T&gt; </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;T&gt; newNode </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;&gt;(node.value);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        newNode.left </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node.left;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        newNode.right </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node.right.left;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        node.value </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node.right.value;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        node.right </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node.right.right;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        node.left </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> newNode;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">rotateRight</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;T&gt; </span><span style=\"color: #FFB86C; font-style: italic\">node</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;T&gt; newNode </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;&gt;(node.value);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        newNode.right </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node.right;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        newNode.left </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node.left.right;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        node.value </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node.left.value;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        node.left </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> node.left.left;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        node.right </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> newNode;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">static</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">main</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\">[] </span><span style=\"color: #FFB86C; font-style: italic\">args</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\">[] arr </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> {</span><span style=\"color: #BD93F9\">50</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">26</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">66</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">21</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">30</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">60</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">70</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">68</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">67</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">99</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">88</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">41</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">22</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">55</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">61</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">46</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">46</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #BD93F9\">10</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">4</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">55</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">99</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">46</span><span style=\"color: #F8F8F2\"> ,</span><span style=\"color: #BD93F9\">40</span><span style=\"color: #F8F8F2\">};</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">AVLTree</span><span style=\"color: #F8F8F2\">&lt;Integer&gt; tree </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">AVLTree</span><span style=\"color: #F8F8F2\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #8BE9FD; font-style: italic\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">:</span><span style=\"color: #F8F8F2\"> arr) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            tree.</span><span style=\"color: #50FA7B\">addNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;&gt;(i));</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        System.out.</span><span style=\"color: #50FA7B\">println</span><span style=\"color: #F8F8F2\">(tree.root);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        System.out.</span><span style=\"color: #50FA7B\">println</span><span style=\"color: #F8F8F2\">(tree.</span><span style=\"color: #50FA7B\">search</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">70</span><span style=\"color: #F8F8F2\">));</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        System.out.</span><span style=\"color: #50FA7B\">println</span><span style=\"color: #F8F8F2\">(tree.</span><span style=\"color: #50FA7B\">getLeftTreeHeight</span><span style=\"color: #F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        System.out.</span><span style=\"color: #50FA7B\">println</span><span style=\"color: #F8F8F2\">(tree.</span><span style=\"color: #50FA7B\">getRightTreeHeight</span><span style=\"color: #F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">class</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;T </span><span style=\"color: #FF79C6\">extends</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">Comparable</span><span style=\"color: #F8F8F2\">&lt;T&gt;&gt; {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">T</span><span style=\"color: #F8F8F2\"> value;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;T&gt; left;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">AVLNode</span><span style=\"color: #F8F8F2\">&lt;T&gt; right;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">AVLNode</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">T</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">value</span><span style=\"color: #F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #BD93F9; font-style: italic\">this</span><span style=\"color: #F8F8F2\">.value </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> value;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    @</span><span style=\"color: #8BE9FD; font-style: italic\">Override</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">String</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">toString</span><span style=\"color: #F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">AVLNode{</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">value=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> value </span><span style=\"color: #FF79C6\">+</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">, left=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> left </span><span style=\"color: #FF79C6\">+</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F1FA8C\">, right=</span><span style=\"color: #E9F284\">\"</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> right </span><span style=\"color: #FF79C6\">+</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #E9F284\">'</span><span style=\"color: #F1FA8C\">}</span><span style=\"color: #E9F284\">'</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre></div>","text":" 树的性质 结点数 = 总度数 + 1 对于一颗二叉树，其总结点数为 , 度为 0 的结点个数为 ，度为 1 的结点个数为 ，度为 2 的结点个数为 ，则有： ...","permalink":"/post/data-structure/tree","photos":[],"count_time":{"symbolsCount":"32k","symbolsTime":"29 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":3,"path":"api/categories/数据结构.json"}],"tags":[{"name":"考研","slug":"考研","count":3,"path":"api/tags/考研.json"},{"name":"树","slug":"树","count":1,"path":"api/tags/树.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8\"><span class=\"toc-text\">树的性质</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">树的存储结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95-%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">双亲表示法(顺序存储)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%EF%BC%88%E9%A1%BA%E5%BA%8F-%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%EF%BC%89\"><span class=\"toc-text\">孩子表示法（顺序+链式存储）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%A9%E5%AD%90%E5%85%84%E5%BC%9F%E8%A1%A8%E7%A4%BA%E6%B3%95-%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">孩子兄弟表示法(链式存储)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A3%AE%E6%9E%97%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">森林与二叉树的转换</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91-Binary-tree\"><span class=\"toc-text\">二叉树(Binary tree)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. 二叉树的概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E7%89%B9%E6%AE%8A%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">2. 特殊二叉树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">2.1 满二叉树</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">2.2 完全二叉树</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91\"><span class=\"toc-text\">2.3 二叉排序树</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">2.4 平衡二叉树</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8\"><span class=\"toc-text\">3. 二叉树的性质</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8\"><span class=\"toc-text\">4. 完全二叉树的性质</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">5. 二叉树的存储结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">5.1 二叉树的顺序存储</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">5.2 二叉树的链式存储</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">6. 二叉树的遍历</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86-%E6%A0%B9%E3%80%81%E5%B7%A6%E3%80%81%E5%8F%B3\"><span class=\"toc-text\">6.1 先序遍历(根、左、右)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86-%E5%B7%A6%E3%80%81%E6%A0%B9%E3%80%81%E5%8F%B3\"><span class=\"toc-text\">6.2 中序遍历(左、根、右)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-3-%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86-%E5%B7%A6%E3%80%81%E5%8F%B3%E3%80%81%E6%A0%B9\"><span class=\"toc-text\">6.3 后序遍历(左、右、根)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-4-%E6%B1%82%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6-%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%8F%98%E7%A7%8D\"><span class=\"toc-text\">6.4 求树的深度(后序遍历算法的变种)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-5-%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86-BFS\"><span class=\"toc-text\">6.5 层序遍历(BFS)</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91-Threaded-Binary-Tree\"><span class=\"toc-text\">线索二叉树(Threaded Binary Tree)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">作用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">存储结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%B4%A2%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">线索化二叉树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E5%BA%8F%E7%BA%BF%E7%B4%A2%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">中序线索化二叉树</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">遍历线索二叉树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86%E4%B8%AD%E5%BA%8F%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">遍历中序线索二叉树</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A0%86-Heap\"><span class=\"toc-text\">堆(Heap)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A0%86%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">堆的概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A0%86%E8%8A%82%E7%82%B9%E7%9A%84%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">堆节点的访问</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A0%86%E6%8E%92%E5%BA%8F-Heap-Sort\"><span class=\"toc-text\">堆排序(Heap Sort)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">算法思路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E8%B0%83%E6%95%B4%E6%88%90%E5%A0%86\"><span class=\"toc-text\">1.调整成堆</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%BA%A4%E6%8D%A2%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">2.交换元素</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%8F%8D%E5%A4%8D%E6%89%A7%E8%A1%8C1%E3%80%812\"><span class=\"toc-text\">3.反复执行1、2</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-Java\"><span class=\"toc-text\">代码实现(Java)</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91-Huffman-Tree\"><span class=\"toc-text\">哈夫曼树(Huffman Tree)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91\"><span class=\"toc-text\">构造哈夫曼树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%80%9D%E8%B7%AF-1\"><span class=\"toc-text\">算法思路</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81-Huffman-Coding\"><span class=\"toc-text\">哈夫曼编码(Huffman Coding)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%80%9D%E8%B7%AF-2\"><span class=\"toc-text\">算法思路</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-1\"><span class=\"toc-text\">代码实现</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91-BST\"><span class=\"toc-text\">二叉排序树(BST)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5-1\"><span class=\"toc-text\">概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5\"><span class=\"toc-text\">插入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">查找</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">删除</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-2\"><span class=\"toc-text\">代码实现</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91-AVL%E6%A0%91\"><span class=\"toc-text\">平衡二叉树(AVL树)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5-2\"><span class=\"toc-text\">概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">插入操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E6%95%B4%E2%80%9D%E4%B8%8D%E5%B9%B3%E8%A1%A1%E2%80%9D\"><span class=\"toc-text\">调整”不平衡”</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B7%A6%E6%97%8B\"><span class=\"toc-text\">左旋</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%B3%E6%97%8B\"><span class=\"toc-text\">右旋</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-3\"><span class=\"toc-text\">代码实现</span></a></li></ol></li></ol>","author":{"name":"Joshlee","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{}},"mapped":true,"hidden":false,"prev_post":{"title":"我的专升本心路历程","uid":"3217b66f0cb1b9a96a16a01e025f7ee8","slug":"examination/zhuanshengben_review","date":"2023-05-25T11:54:02.000Z","updated":"2023-12-24T02:14:47.695Z","comments":true,"path":"api/articles/examination/zhuanshengben_review.json","keywords":null,"cover":[],"text":"2023年广东普通专升本碎碎念对于这次考试，我的自我评价是：寄！ 在我大一大二的时候，总能听到师兄师姐们说：插本？很简单的啦，比高考还简单，一月份（大概三、四月...","permalink":"/post/examination/zhuanshengben_review","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"应试","slug":"应试","count":7,"path":"api/categories/应试.json"}],"tags":[{"name":"复盘","slug":"复盘","count":1,"path":"api/tags/复盘.json"}],"author":{"name":"Joshlee","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{}}},"next_post":{"title":"英语基础知识","uid":"f12ce06ce5d8a863449fc851c0631b6b","slug":"english/grammar_note","date":"2023-01-18T13:33:26.000Z","updated":"2023-01-18T13:59:52.000Z","comments":true,"path":"api/articles/english/grammar_note.json","keywords":null,"cover":[],"text":" 速查表(Cheat Sheet)音标 https://www.bilibili.com/video/BV1VL4y147vv 用于不定冠词要使用不定冠词 a ...","permalink":"/post/english/grammar_note","photos":[],"count_time":{"symbolsCount":"60k","symbolsTime":"54 mins."},"categories":[{"name":"英语","slug":"英语","count":5,"path":"api/categories/英语.json"}],"tags":[{"name":"英语","slug":"英语","count":5,"path":"api/tags/英语.json"},{"name":"笔记","slug":"笔记","count":2,"path":"api/tags/笔记.json"}],"author":{"name":"Joshlee","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{}}}}