{"title":"How to Using FiddlerEverywhere","uid":"3f945107ce99195b9c8dafd2737a8d45","slug":"testing/Fiddler Everywhere抓包","date":"2021-12-30T02:43:04.000Z","updated":"2022-07-14T04:43:58.329Z","comments":true,"path":"api/articles/testing/Fiddler Everywhere抓包.json","keywords":null,"cover":[],"content":"<meta name=\"referrer\" content=\"no-referrer\">\n\n<h1 id=\"Fiddler-EveryWhere-环境安装\"><a href=\"#Fiddler-EveryWhere-环境安装\" class=\"headerlink\" title=\"Fiddler EveryWhere 环境安装\"></a>Fiddler EveryWhere 环境安装</h1><h2 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h2><p>Fiddler 功能强大，同时占用空间小，能记录所有的客户端和服务器端的 http 和https 请求，方便测试人员进行接口测试。官方下载地址：<a href=\"https://www.telerik.com/fiddler/fiddler-everywhere\">https://www.telerik.com/fiddler/fiddler-everywhere</a><br>由于笔者使用的是Mac OS，而经典版的只支持Windows，所以我们这里下载最新版的Fiddler EveryWhere，安装步骤如下：</p>\n<ol>\n<li>打开下载好的Flddler Everywhere.dmg, 弹出如下界面，点击Agree同意</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640593811469-23c32878-d752-4194-ad64-440e49715942.png#clientId=u91997ebf-e755-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=462&id=u65574b15&margin=%5Bobject%20Object%5D&name=image.png&originHeight=924&originWidth=1292&originalType=binary&ratio=1&rotation=0&showTitle=false&size=238581&status=done&style=none&taskId=ue5ead5d1-6ea0-451e-9e83-e8502853275&title=&width=646\" alt=\"image.png\"></p>\n<center>图1 同意许可证协议</center>\n\n<ol start=\"2\">\n<li>将左侧Fiddler的LOGO拖拽到右侧的Applications文件夹即可完成安装</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640593831598-f0e34881-5d53-4a6a-b09e-9608a0e7bd44.png#clientId=u91997ebf-e755-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=260&id=u78250005&margin=%5Bobject%20Object%5D&name=image.png&originHeight=520&originWidth=1000&originalType=binary&ratio=1&rotation=0&showTitle=false&size=143184&status=done&style=none&taskId=u2f4daead-5a3a-48f2-beee-a8bdbcb51af&title=&width=500\" alt=\"image.png\"></p>\n<center>图2 拖拽到Applications完成安装</center>\n\n<ol start=\"3\">\n<li>软件安装过程非常简单，读者可自行完成安装。笔者安装的 Fiddler Everywhere 为 3.0.1 版。安装完成后，启动 Fiddler Everywhere，出现如下图的欢迎界面（需要注册并登陆）。意思是你可以有三种方法去使用Fiddler：</li>\n</ol>\n<ul>\n<li><a href=\"https://docs.telerik.com/fiddler-everywhere/traffic/capture-traffic#system-capturing\">System Traffic Capturing（系统流量捕捉）</a></li>\n<li><a href=\"https://docs.telerik.com/fiddler-everywhere/traffic/capture-traffic#preconfigured-browser-capturing\">Preconfigured Browser Capturing（预先配置的浏览器捕捉）</a></li>\n<li><a href=\"https://docs.telerik.com/fiddler-everywhere/traffic/configure-android\">Debug mobile devices（调试手机设备）</a></li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640610425935-14fa3ade-cfbc-498a-a95a-ea6e35a91c0e.png#clientId=u91997ebf-e755-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=953&id=u58ccdcc3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1906&originWidth=3360&originalType=binary&ratio=1&rotation=0&showTitle=false&size=739273&status=done&style=none&taskId=ub2fb9fbc-24dd-4fb9-8a28-e2ad414ac8c&title=&width=1680\" alt=\"image.png\"></p>\n<center>图3 欢迎界面</center>\n\n<h2 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h2><p>程序界面如下图所示：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640615048826-4606e2fe-b4d1-4640-86de-e580e43c7efe.png#clientId=u0480e3e3-b0c3-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=430&id=u8ed2e18e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=859&originWidth=1373&originalType=binary&ratio=1&rotation=0&showTitle=false&size=564110&status=done&style=none&taskId=u7ed7e4e3-23db-4148-9f5f-afe4e60a8fc&title=&width=686.5\" alt=\"image.png\"><br>图4 Fidder Everywhere界面示意图</p>\n<ul>\n<li>工具条：即选项卡，可以选择实时流量抓取区（Live Traffic）和对接口进行测试（Composer），Fiddler Everywhere 的 Composer 比较类似 Postman ，接口测试起来非常方便</li>\n<li>会话区：Fiddler Everywhere 捕获的流量会实时呈现在这里</li>\n<li>请求存储区：用于存储接口</li>\n</ul>\n<p>目前许多网站都会采用https 协议来进行传输，相比于 http 协议，主要是增加了传输加密和安全认证等功能，从而提高了传输的安全性。但需要注意的是，Fiddler 刚安装完成是并不能显示 https 协议的会话，需要进行相应的设置，并进行证书安装。Mac下操作步骤如下：</p>\n<ol>\n<li>进入设置</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640615943351-7d8fdaaa-1f92-4ed9-b21f-8e03edf02e4a.png#clientId=u0480e3e3-b0c3-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=207&id=ucd6a5d79&margin=%5Bobject%20Object%5D&name=image.png&originHeight=413&originWidth=660&originalType=binary&ratio=1&rotation=0&showTitle=false&size=44416&status=done&style=none&taskId=ub7c9bfa6-accc-43ff-9824-5212f1cc15d&title=&width=330\" alt=\"image.png\"><br>图5 进入设置</p>\n<ol start=\"2\">\n<li><code>Trust root certificate</code>，信任根证书，并勾选<code>Capture HTTPS traffic</code>和<code>Ignore server certificate errors(unsafe)</code>即可，如下图所示：</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640616079974-b82653d1-c1a3-47e1-84d6-d4ef5a0c2ee9.png#clientId=u0480e3e3-b0c3-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=371&id=ucdab4c85&margin=%5Bobject%20Object%5D&name=image.png&originHeight=741&originWidth=815&originalType=binary&ratio=1&rotation=0&showTitle=false&size=62167&status=done&style=none&taskId=u5f58a4a9-daea-4b9a-9ef3-b9c2abb8f89&title=&width=407.5\" alt=\"image.png\"><br>图6 设置</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>为什么要先学fiddler？</strong><br>学习接口测试必学http协议，如果直接先讲协议，为了更好的理解协议，先从抓包开始。结合抓包工具讲http协议更容易学一些。<br><strong>为什么使用Fiddler Everywhere而不是经典版的Fiddler？</strong><br>Fiddler Everywhere是一款跨平台（Windows、Mac、Linux）的Web调试代理工具，<strong>本文将用Mac系统进行演示</strong></p></blockquote>\n<h1 id=\"Fiddler-Everywhere-的使用\"><a href=\"#Fiddler-Everywhere-的使用\" class=\"headerlink\" title=\"Fiddler Everywhere 的使用\"></a>Fiddler Everywhere 的使用</h1><h2 id=\"1-证书问题\"><a href=\"#1-证书问题\" class=\"headerlink\" title=\"1. 证书问题\"></a>1. 证书问题</h2><h3 id=\"为什么需要证书？\"><a href=\"#为什么需要证书？\" class=\"headerlink\" title=\"为什么需要证书？\"></a>为什么需要证书？</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640657551777-7933a31f-cf65-415f-b510-26da8db10270.png#clientId=ud5a02840-c4ce-4&from=paste&id=u0f9bb090&margin=%5Bobject%20Object%5D&name=image.png&originHeight=629&originWidth=1253&originalType=binary&ratio=1&size=346351&status=done&style=none&taskId=u8c5067a6-2133-4b94-a0a8-590dbb2155f\" alt=\"image.png\"><br>先说结论：<strong>捕获HTTPS必须要导入Fiddler的证书。</strong><br>知道什么是证书之前需要了解下 “非对称加密”</p>\n<ul>\n<li>对称加密：客户端和服务器用一个秘钥加密和解密。对称加密效率高</li>\n<li>非对称加密：将公钥公布于众，客户端拿公钥加密，服务器拿自己的私钥解密，这样即使数据被截获，别人也解密不出明文内容。效率低。</li>\n</ul>\n<p>非对称加密有两个秘钥，公钥和私钥，而这两个秘钥只要用一个加密，另一个就能解密，我们正常加密数据用公钥加密，用私钥解密<br>而我们还有一种用法就是服务器发数据用私钥加密，客户端用公钥解密，那么客户如果用公钥正确解密出数据，那么就证明这个数据一定是服务器发的，因为私钥只有它知道，这个过程我们一般不叫加密，叫签名，也就是服务器对数据签个名，代表这个确确实实是它发的。<br>其实我们正常情况下因为对称加密效率虽高，但是不安全，因为它告诉对方秘钥的时候这个秘钥容易被截获，但是我们如果用非对称加密，安全是安全，效率又太低，所以一般采用对称加密来加密数据，非对称加密配送对称加密的秘钥。<br>因为公钥是在网络上进行传输的，那么假如遭遇了如下图所示的中间人攻击，那么A的私钥就可能是伪造的。那么如何验证公钥的合法性呢？——证书</p>\n<h4 id=\"什么是证书？\"><a href=\"#什么是证书？\" class=\"headerlink\" title=\"什么是证书？\"></a>什么是证书？</h4><p>证书就是由认证机构，采用它们自己的私钥，对发送方的公钥和发送方的信息进行数字加密。各大CA（认证机构）的证书已经默认被添加到了浏览器和操作系统中。<br>服务器生成自己的密匙对——公钥和私钥<br>服务器在认证机构注册自己的公钥<br>认证机构（CA）用自己机构的私钥对，服务器的公钥进行数字签名并生成证书（里面带了这个签名过得公钥和服务器一些信息）<br>认证机构把证书给客户端<br>客户端用认证机构的公钥验证数字签名<br>认证成功后用里面带的服务器的公钥加密并发消息给服务器<br>服务器用自己的私钥解密<br>这样一来就可以解决数据传输的安全问题了<br><strong>问题：</strong></p>\n<ol>\n<li>如果黑客在服务器在认证机构注册公钥的时候截取数据呢？</li>\n</ol>\n<p>这个完全不用担心，CA证书的申请，流程很多，而且较为严格，比如准备很多文件，再比如CA那边如果通过后还会要申请方这边的管理员验证之类的。</p>\n<ol start=\"2\">\n<li>认证机构的公钥咋传输的？如果黑客改了呢？<br>  如果改了那么这个证书就不会验证成功，其实各大CA的公钥已经在系统和浏览器中内置了。看下边的例子：</li>\n</ol>\n<p>百度的证书信息：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640657019644-95dc849d-9b2d-4497-a9bf-38f700db26e1.png#clientId=ud5a02840-c4ce-4&from=paste&height=503&id=u971f78d8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1006&originWidth=968&originalType=binary&ratio=1&size=129821&status=done&style=none&taskId=u6d626c1f-a67e-4d7b-a974-3311ad40176&width=484\" alt=\"image.png\"><br>系统自带的CA证书：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640657126234-7e8885c9-17ca-4db4-aaad-62f3835f5948.png#clientId=ud5a02840-c4ce-4&from=paste&height=533&id=u229763fe&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1066&originWidth=1754&originalType=binary&ratio=1&size=348068&status=done&style=none&taskId=uafb0f014-a246-4b14-8352-6569d8b2609&width=877\" alt=\"image.png\"></p>\n<h4 id=\"抓包工具为什么需要导入证书？\"><a href=\"#抓包工具为什么需要导入证书？\" class=\"headerlink\" title=\"抓包工具为什么需要导入证书？\"></a>抓包工具为什么需要导入证书？</h4><p>1.客户端发一个HTTPS请求，被Fiddler拦截并且Fiddler伪装成客户端发请求给服务器</p>\n<ol start=\"2\">\n<li>服务器向假装成客户端的FIddler返回了CA证书</li>\n<li>自己制作了一张证书，假装服务器给客户端发了自己做的证书。获取服务器的公钥</li>\n<li>客户端生成对称秘钥，并用Fiddler假冒的公钥加密发送</li>\n<li>Fiddler用自己的私钥解密获取对称秘钥</li>\n<li>……<br>这样的话Fiddler能完全获取解析到双方加密的数据。<br>实验证明：<br>当我们正常访问百度，查看证书：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640657378811-5edc519b-5f5c-4a6e-94da-775332ec912e.png#clientId=ud5a02840-c4ce-4&from=paste&height=274&id=u5f70cca6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=548&originWidth=968&originalType=binary&ratio=1&size=77921&status=done&style=none&taskId=u91663e24-17c8-4f55-9b8d-e393d8b6fbc&width=484\" alt=\"image.png\"><br>开启Fiddler后，我们再访问百度：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640657457772-adaccab7-dd63-47f0-8038-8ff363591a70.png#clientId=ud5a02840-c4ce-4&from=paste&height=274&id=u93bfe19f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=548&originWidth=968&originalType=binary&ratio=1&size=69522&status=done&style=none&taskId=u02f6a0b0-7e1c-41f1-a193-d0ee7adfc81&width=484\" alt=\"image.png\"></li>\n</ol>\n<h3 id=\"安装根证书\"><a href=\"#安装根证书\" class=\"headerlink\" title=\"安装根证书\"></a>安装根证书</h3><ol>\n<li>点击<code>Trust root certificate</code> （Mac会需要输入系统密码）</li>\n<li>勾选<code>Capture HTTPS traffic</code></li>\n<li>Save保存即可安装成功，就可以开始抓HTTPS啦（可能需要重启Fiddler Everywhere）</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640653855844-db0b09d5-1c20-48a7-9ccd-5d4b8deeca57.png#clientId=ud5a02840-c4ce-4&from=paste&height=457&id=u1b989ab2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=914&originWidth=1374&originalType=binary&ratio=1&size=86091&status=done&style=none&taskId=u130e6fde-0a0e-4df1-908e-03aa1ca453a&width=687\" alt=\"image.png\"></p>\n<h3 id=\"删除证书\"><a href=\"#删除证书\" class=\"headerlink\" title=\"删除证书\"></a>删除证书</h3><p><del>如果之前装过一些fiddler证书，安装的姿势不对，导致新的证书不起作用，这时候需要先删掉之前的证书了</del></p>\n<ol>\n<li>在启动台（Launchpad）的其他中找到钥匙串（Keychain Access），或者在聚焦搜索(spotlight search)中搜钥匙串(Keychain Access)也可以找到。</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640653360285-2fc1515d-b37b-4778-ad89-28da9124f386.png#clientId=ud5a02840-c4ce-4&from=paste&height=428&id=u5a106717&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1710&originWidth=1940&originalType=binary&ratio=1&size=1536904&status=done&style=none&taskId=u6653436e-1d22-4f68-b857-f754941ef5a&width=485\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>我们可以在Default keychains -&gt; login -&gt; Certificerts 中可以找到Fiddler的根证书<code>DO_NOT_TRUST_FiddlerRoot</code>，右键即可删除。</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640653053085-f7c72e1e-ace3-42bd-9e06-9d70abc43c24.png#clientId=ud5a02840-c4ce-4&from=drop&height=525&id=ufd76be43&margin=%5Bobject%20Object%5D&name=Screen%20Shot%202021-12-28%20at%208.56.31%20AM.png&originHeight=1050&originWidth=1730&originalType=binary&ratio=1&size=333806&status=done&style=none&taskId=u88402c20-ecee-4452-aefd-3ce5dc2079f&width=865\" alt=\"Screen Shot 2021-12-28 at 8.56.31 AM.png\"></p>\n<h2 id=\"2-手机APP抓包\"><a href=\"#2-手机APP抓包\" class=\"headerlink\" title=\"2. 手机APP抓包\"></a>2. 手机APP抓包</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>fiddler在抓手机app的请求时候，通常也会抓到来自PC的请求，导致会话消息太多，那么如何把来自pc的请求过滤掉，只抓来自APP的请求呢？<br>必备环境：<br>1.电脑上已装fiddler<br>2.手机和电脑在同一局域网</p>\n<h3 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h3><ol>\n<li>Fiddler Everywhere -&gt; Settings -&gt; Connections，勾选<code>Allow remote computers to connect</code></li>\n<li>8866端口为Fiddler的监听端口，后续手机中会用到。我这里的端口默认是8866，具体的端口号按实际情况来。</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640657823128-00ac8f66-acb9-4ced-8651-255538277d2e.png#clientId=ud5a02840-c4ce-4&from=paste&height=462&id=ub0a896eb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=924&originWidth=1220&originalType=binary&ratio=1&size=98985&status=done&style=none&taskId=u235089de-adcf-4e1e-98dc-191c6a769a8&width=610\" alt=\"image.png\"></p>\n<h3 id=\"查看本机IP\"><a href=\"#查看本机IP\" class=\"headerlink\" title=\"查看本机IP\"></a>查看本机IP</h3><p>打开终端（Terminal），输入<code>ifconfig</code>（Windows下为<code>ipconfig</code>），找到IP，如下图：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640658171429-b5397f86-f69e-4b0b-9604-bbe5e5962711.png#clientId=ud5a02840-c4ce-4&from=paste&height=490&id=udce83a69&margin=%5Bobject%20Object%5D&name=image.png&originHeight=980&originWidth=1460&originalType=binary&ratio=1&size=315478&status=done&style=none&taskId=u90757d8b-ad51-4872-8cd6-ed175d15843&width=730\" alt=\"image.png\"></p>\n<h3 id=\"手机设置代理\"><a href=\"#手机设置代理\" class=\"headerlink\" title=\"手机设置代理\"></a>手机设置代理</h3><ol>\n<li>手机设置-&gt;WLAN设置-&gt;选择该wifi，点右边的箭头（有的手机是长按弹出选项框）。</li>\n<li>将代理换为手动进行配置：<ol>\n<li>配置主机名：与主机IP保持一致</li>\n<li>端口：8866（Fiddler的监听端口）</li>\n</ol>\n</li>\n<li>保存后即可抓取手机上的请求了</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640658467018-d3b6cd03-14f7-46b6-98fb-b928e64c1152.png#clientId=ud5a02840-c4ce-4&from=paste&height=600&id=u514a9a0f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2400&originWidth=1080&originalType=binary&ratio=1&size=386468&status=done&style=none&taskId=ud2bfee96-4063-4cea-a081-b7d6b9ab64b&width=270\" alt=\"image.png\"></p>\n<h3 id=\"抓取HTTPS请求\"><a href=\"#抓取HTTPS请求\" class=\"headerlink\" title=\"抓取HTTPS请求\"></a>抓取HTTPS请求</h3><ol>\n<li>如果app都是http请求，是不需要安装证书，能直接抓到的，如果是https请求，这时候手机就需要下载证书了</li>\n<li>打开手机浏览器输入地址：<code>[主机IP]:[Fiddler端口]</code>，比如我这里是<code>172.20.249.225:8866</code></li>\n<li>出现如下画面，点箭头所指的位置，点击安装就可以了。</li>\n<li>不同手机安装证书方法可能会有所差异</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640658621484-fb4a1cf4-80fe-41fc-818a-58440f08e7be.png#clientId=ud5a02840-c4ce-4&from=paste&height=600&id=u03fe8fa4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2400&originWidth=1080&originalType=binary&ratio=1&size=336559&status=done&style=none&taskId=u27b8e1d7-e322-40d4-a12b-f78086b3563&width=270\" alt=\"image.png\"></p>\n<h2 id=\"3-查看GET和POST请求\"><a href=\"#3-查看GET和POST请求\" class=\"headerlink\" title=\"3. 查看GET和POST请求\"></a>3. 查看GET和POST请求</h2><h3 id=\"前言-1\"><a href=\"#前言-1\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>前面讲了关于Fiddler Everywhere抓包的一些基本配置，配置完之后就可以抓到我们想要的数据了，接下来就是如何去分析这些数据。<br>本篇以<del>洛谷</del>的请求为例，简单分析get与post数据有何不一样，以后也能分辨出哪些是get，哪些是post了。</p>\n<h3 id=\"GET请求\"><a href=\"#GET请求\" class=\"headerlink\" title=\"GET请求\"></a>GET请求</h3><ol>\n<li>打开Fiddler Everywhere，然后浏览器输入<del>洛谷</del>首页地址：<a href=\"https://www.luogu.com.cn/\">https://www.luogu.com.cn/</a></li>\n<li>点开右侧Inspectors下的Headers区域，查看Request Headers</li>\n<li>Request Headers区域里面的就是请求头信息，可以看到打开<del>洛谷</del>首页的是get请求</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640660392365-f227b5e8-9069-46c7-805a-f2fa8233e8d2.png#clientId=ud5a02840-c4ce-4&from=paste&height=847&id=u161f5b42&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1694&originWidth=2954&originalType=binary&ratio=1&size=658107&status=done&style=none&taskId=ue5c0bb18-7e7a-4067-a07c-f9752707051&width=1477\" alt=\"image.png\"></p>\n<h3 id=\"POST请求\"><a href=\"#POST请求\" class=\"headerlink\" title=\"POST请求\"></a>POST请求</h3><ol>\n<li>打开登录首页：<a href=\"https://www.luogu.com.cn/auth/login\">https://www.luogu.com.cn/auth/login</a></li>\n<li>输入账号和密码点击登录后，查看箭头所指的地方，可以看出是post请求</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640660623396-078060b0-1b7d-47df-b1ef-b8c6a443c3ef.png#clientId=ud5a02840-c4ce-4&from=paste&height=836&id=uc99a67de&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1672&originWidth=2930&originalType=binary&ratio=1&size=570133&status=done&style=none&taskId=u374eef56-514e-43a8-a692-c5936ffb4c9&width=1465\" alt=\"image.png\"></p>\n<h3 id=\"如何找出需要的请求\"><a href=\"#如何找出需要的请求\" class=\"headerlink\" title=\"如何找出需要的请求\"></a>如何找出需要的请求</h3><ol>\n<li>点开漏斗（Advanced Filters）</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640661222167-1c7904fc-d43f-4409-8662-5de3c49934be.png#clientId=ud5a02840-c4ce-4&from=paste&height=149&id=u17cf6361&margin=%5Bobject%20Object%5D&name=image.png&originHeight=298&originWidth=738&originalType=binary&ratio=1&size=47448&status=done&style=none&taskId=u7af8db3e-4942-4107-8c82-a23a58cced9&width=369\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>比如我们要只抓<del>洛谷</del>的请求，那我们可以设置条件：<code>url contains luogu.com.cn</code>，如下图：</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640661346550-3182c8b7-9dd1-4a4d-ab72-1e5818db18db.png#clientId=ud5a02840-c4ce-4&from=paste&height=243&id=u060ca743&margin=%5Bobject%20Object%5D&name=image.png&originHeight=486&originWidth=1584&originalType=binary&ratio=1&size=46528&status=done&style=none&taskId=u4f7538bd-3a8a-420c-a76e-04bf000edc8&width=792\" alt=\"image.png\"></p>\n<ol start=\"3\">\n<li>APPLY后即可只抓取<del>洛谷</del>的请求了</li>\n</ol>\n<h3 id=\"GET和POST请求的区别\"><a href=\"#GET和POST请求的区别\" class=\"headerlink\" title=\"GET和POST请求的区别\"></a>GET和POST请求的区别</h3><ol>\n<li>关于get和post的功能上区别就不说了，大家自己查资料，这里主要从fiddler抓包的层面查看请求参数上的区别</li>\n<li>get请求的Raw参数查看，主要分三部分：</li>\n</ol>\n<ul>\n<li>第1部分是请求url地址</li>\n<li>第2部分是host地址</li>\n<li>第3部分是请求头部信息header</li>\n</ul>\n<ol start=\"3\">\n<li>再查看博客登录请求的Raw信息，post的信息分四部分。<br>–前面3块内容都一样，第3部分和第4部分中间会空一行<br>–第4部分内容就是post请求的请求body（get请求是没body的）</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640661504949-a98643d2-a5fa-4f9e-8ab6-59602fd2653a.png#clientId=ud5a02840-c4ce-4&from=paste&id=u4315b707&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1206&originWidth=2728&originalType=binary&ratio=1&size=241764&status=done&style=none&taskId=u8744e3da-02e0-4ef5-a6b3-f561cd156c8\" alt=\"image.png\"></p>\n<h2 id=\"4-工具介绍\"><a href=\"#4-工具介绍\" class=\"headerlink\" title=\"4. 工具介绍\"></a>4. 工具介绍</h2><p>本篇简单的介绍下fiddler界面的几块区域，以及各自区域到底是干什么用的，以便于更好的掌握这个工具<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640674569685-f19f6c91-3935-4b47-a33c-3fff8b1807a2.png#clientId=u7122d5b3-7751-4&from=paste&id=u622d3926&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1720&originWidth=2684&originalType=binary&ratio=1&size=1062283&status=done&style=none&taskId=ua5bcab46-db78-41ea-ad7f-577c8aec7dd\" alt=\"image.png\"></p>\n<h3 id=\"会话框\"><a href=\"#会话框\" class=\"headerlink\" title=\"会话框\"></a>会话框</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640674701033-185c7bfa-9c48-404c-897c-5fe9a93b88e1.png#clientId=u7122d5b3-7751-4&from=paste&height=752&id=uaa55e174&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1504&originWidth=2374&originalType=binary&ratio=1&size=432729&status=done&style=none&taskId=uc55ecb15-82d5-4f31-8724-927bed613f5&width=1187\" alt=\"image.png\"><br>会话框主要查看请求的一些请求的一些基本信息，如# 、URL、HTTP Version、Result、Method、Process、Remote IP、Body Size、Comments，具体如下表：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>#</td>\n<td>这一栏是代表这个请求大概是什么内容</td>\n</tr>\n<tr>\n<td>URL</td>\n<td>请求的路径</td>\n</tr>\n<tr>\n<td>HTTP Version</td>\n<td>HTTP的版本，如HTTP/1.1</td>\n</tr>\n<tr>\n<td>Result</td>\n<td>HTTP状态码，如200(成功)、3xx（重定向相关）、4xx（找不到资源，一般是请求地址有问题）、5xx（一般是服务器本身的错误）</td>\n</tr>\n<tr>\n<td>Method</td>\n<td>请求方法，如：GET、POST、HEAD、OPTIONS、PUT、PATCH、DELETE、CONNECT</td>\n</tr>\n<tr>\n<td>Process</td>\n<td>进程</td>\n</tr>\n<tr>\n<td>Remote IP</td>\n<td>远程IP</td>\n</tr>\n<tr>\n<td>Body Size</td>\n<td>请求产生的数据大小</td>\n</tr>\n<tr>\n<td>Comments</td>\n<td>类似于备注，可以右键一个请求进行Comment</td>\n</tr>\n</tbody></table>\n<h3 id=\"Request和Response\"><a href=\"#Request和Response\" class=\"headerlink\" title=\"Request和Response\"></a>Request和Response</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640675940937-4f16b1f9-14fd-4209-b0ae-6ece73471d70.png#clientId=u7122d5b3-7751-4&from=paste&height=705&id=ua59d7701&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1410&originWidth=1668&originalType=binary&ratio=1&size=202806&status=done&style=none&taskId=u36979706-d773-404f-9176-e507ccb2675&width=834\" alt=\"image.png\"></p>\n<ol>\n<li>Request是客户端发出去的数据，Response是服务端返回过来的数据，这两块区域功能差不多</li>\n<li>headers:请求头，这里包含client、cookies、transport等</li>\n<li>Params：请求时所带的参数</li>\n<li>cookies:查看cookie详情</li>\n<li>raw:查看一个完整请求的内容，可以直接复制</li>\n<li>body：经过格式化后的主体</li>\n</ol>\n<h3 id=\"decode解码\"><a href=\"#decode解码\" class=\"headerlink\" title=\"decode解码\"></a>decode解码</h3><p>Fiddler Everywhere 会自动进行解码，无需再手动执行了</p>\n<h2 id=\"5-接口测试（Composer）\"><a href=\"#5-接口测试（Composer）\" class=\"headerlink\" title=\"5. 接口测试（Composer）\"></a>5. 接口测试（Composer）</h2><h3 id=\"前言-2\"><a href=\"#前言-2\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Fiddler最大的优势在于抓包，我们大部分使用的功能也在抓包的功能上，fiddler做接口测试也是非常方便的。<br>Fiddler Everywhere的Composer功能非常强大又简单易用，逐渐向Postman靠齐</p>\n<h3 id=\"Composer简介\"><a href=\"#Composer简介\" class=\"headerlink\" title=\"Composer简介\"></a>Composer简介</h3><p>点开右侧Composer区域，可以看到如下界面，就是测试接口的界面了<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640678119078-90c576d1-dbdd-47b0-990e-978e4fcf271b.png#clientId=u7122d5b3-7751-4&from=paste&height=743&id=u5a285ff6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1486&originWidth=2160&originalType=binary&ratio=1&size=379324&status=done&style=none&taskId=u552d1256-9edc-456b-a7ae-ccc9676dc49&width=1080\" alt=\"image.png\"></p>\n<h3 id=\"JSON数据\"><a href=\"#JSON数据\" class=\"headerlink\" title=\"JSON数据\"></a>JSON数据</h3><p>1.有些post的请求参数和返回参数是Json格式的，如洛谷的登录请求：<a href=\"https://www.luogu.com.cn/api/auth/userPassLogin\">https://www.luogu.com.cn/api/auth/userPassLogin</a><br>2.在登录页面手动输入账号和密码，登录成功。<br>3.找到这个登录成功的会话，查看json数据如下图：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640678847288-a5b7a450-e9c8-46fe-9a4f-ee96c6f454e0.png#clientId=u4eb01b0d-14ef-4&from=paste&height=708&id=eIMOk&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1416&originWidth=2672&originalType=binary&ratio=1&size=418635&status=done&style=none&taskId=u74c2a5e5-08eb-4f19-b253-a43cc0a84b7&width=1336\" alt=\"image.png\"></p>\n<h3 id=\"模拟GET请求\"><a href=\"#模拟GET请求\" class=\"headerlink\" title=\"模拟GET请求\"></a>模拟GET请求</h3><ol>\n<li>在Composer区域地址栏输入博客首页：<a href=\"http://luogu.com.cn/\">http://luogu.com.cn</a></li>\n<li>选择GET请求，点Execute执行，请求就可以发送成功啦</li>\n<li>请求成功下方的Response会生成会话记录，可以查看本条请求的响应详情</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640678533645-70089a68-edda-494c-bd72-0351f7f580a8.png#clientId=u4eb01b0d-14ef-4&from=paste&height=703&id=ue62eb919&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1406&originWidth=2134&originalType=binary&ratio=1&size=236423&status=done&style=none&taskId=u1888eaa3-d645-467e-bd7e-5111dc4c8d9&width=1067\" alt=\"image.png\"></p>\n<h3 id=\"模拟POST请求-实战登陆洛谷\"><a href=\"#模拟POST请求-实战登陆洛谷\" class=\"headerlink\" title=\"模拟POST请求(实战登陆洛谷)\"></a>模拟POST请求(实战登陆洛谷)</h3><p>这里的模拟POST请求我们以登陆洛谷为案例进行讲解。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640679522748-884ae901-a8e4-4556-ad4c-558c02cd6cc3.png#clientId=u4eb01b0d-14ef-4&from=paste&height=543&id=uc7fa684c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1086&originWidth=776&originalType=binary&ratio=1&size=109193&status=done&style=none&taskId=ub1045001-cc79-4974-af7e-5b8923c6105&width=388\" alt=\"image.png\"></p>\n<p>洛谷登陆链接：<a href=\"https://www.luogu.com.cn/auth/login\">https://www.luogu.com.cn/auth/login</a><br>如上图，洛谷的登陆需要输入用户名+密码+验证码才能登陆成功，从表面上来看，我们只需要两个接口就能登陆成功，一个是<strong>获取验证码的GET请求接口</strong>，一个是<strong>登陆的POST接口</strong>，先GET验证码，然后根据验证码加上我们的用户名和密码调用登陆接口进行登陆，但实际并非想象中的那么简单，以下为抓包流程：</p>\n<h4 id=\"1-过滤\"><a href=\"#1-过滤\" class=\"headerlink\" title=\"1. 过滤\"></a>1. 过滤</h4><p>我们只需要抓取洛谷的接口，如下图，在Search栏输入洛谷的域名：<code>luogu.com.cn</code>，就只会抓取洛谷的请求了<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640679920250-1800bbf6-6542-4f72-a15f-608ec6d1e714.png#clientId=u4eb01b0d-14ef-4&from=paste&height=197&id=u66e6e53f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=394&originWidth=1290&originalType=binary&ratio=1&size=50517&status=done&style=none&taskId=ua69cadf4-eb38-4b7a-9b31-76402404643&width=645\" alt=\"image.png\"></p>\n<h4 id=\"2-抓取验证码接口\"><a href=\"#2-抓取验证码接口\" class=\"headerlink\" title=\"2. 抓取验证码接口\"></a>2. 抓取验证码接口</h4><p>在洛谷的登陆界面点击刷新验证码，抓到验证码的接口，可以在Response-&gt;Prieview中看到验证码的图像<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640680063693-89a861ee-f97a-401f-85ea-2e9eef7b1fcd.png#clientId=u4eb01b0d-14ef-4&from=paste&height=682&id=uc0ef65ba&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1364&originWidth=2674&originalType=binary&ratio=1&size=242834&status=done&style=none&taskId=u21211102-ccde-40bd-bb67-297f4682ab6&width=1337\" alt=\"image.png\">为了方便接口测试，我们右键这个验证码请求-&gt;点击Edit in Composer，如下图：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640680123720-dfdbd993-de7a-4b1b-9a83-c840fd916da0.png#clientId=u4eb01b0d-14ef-4&from=paste&height=335&id=u49fa8116&margin=%5Bobject%20Object%5D&name=image.png&originHeight=670&originWidth=1046&originalType=binary&ratio=1&size=49333&status=done&style=none&taskId=u03e6dc20-240d-4bea-bb3f-a3d536b1a65&width=523\" alt=\"image.png\"><br>可以发现接口的地址为：<a href=\"https://www.luogu.com.cn/api/verify/captcha?_t=1640680004860.4568\">https://www.luogu.com.cn/api/verify/captcha?_t=1640680004860.4568</a>。参数<code>_t</code>为时间，也就是距 1970 年 1 月 1 日之间的毫秒数，如下图：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640680624518-6a756b3d-a096-40e1-8e36-a29b7450732e.png#clientId=u4eb01b0d-14ef-4&from=paste&height=635&id=udc03cbb7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1270&originWidth=2148&originalType=binary&ratio=1&size=156076&status=done&style=none&taskId=u3a05d164-db91-47c1-9929-a6ce4a15298&width=1074\" alt=\"image.png\"><br>我们还可以将这个请求进行保存，点击EXCUTE旁边的<strong>SAVE</strong>，输入<strong>请求的名称</strong>，<strong>选择所在的文件夹</strong>，点击SAVE保存即可，如下图：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640680867409-20134ab2-2eaf-4f40-af98-c69259c82574.png#clientId=u4eb01b0d-14ef-4&from=paste&height=518&id=u93b8417b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1036&originWidth=1288&originalType=binary&ratio=1&size=77625&status=done&style=none&taskId=uf22bae5f-2da3-48e9-94a5-ecc7620cf5b&width=644\" alt=\"image.png\"></p>\n<h4 id=\"3-抓取登陆接口\"><a href=\"#3-抓取登陆接口\" class=\"headerlink\" title=\"3. 抓取登陆接口\"></a>3. 抓取登陆接口</h4><p>我们在洛谷输入正确的用户名、密码和验证码后点击登陆。<br>在Fiddler中寻找刚才发送的登陆请求，由于我们已知洛谷的登陆请求为POST方法，所以可以根据Method排序去找POST请求。找到一个POST请求的Request区Body中有刚刚输入的账号/密码/验证码的信息，这个就是洛谷登陆接口了<code>[https://www.luogu.com.cn/api/auth/userPassLogin](https://www.luogu.com.cn/api/auth/userPassLogin)</code>，如下图：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640681255480-a2d083a1-c8ad-436f-be70-42a30caaeccf.png#clientId=u4eb01b0d-14ef-4&from=paste&height=699&id=uebdbca2d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1398&originWidth=2624&originalType=binary&ratio=1&size=400274&status=done&style=none&taskId=u7f8ae96b-d6cf-4a8d-9438-39ae85509ec&width=1312\" alt=\"image.png\"><br>接下来我们还是跟步骤2一样存储一下这次的请求，右键登陆请求 -&gt; Edit in Composer，然后SAVE一下Request（我这边把请求名称取名为了“登陆”），现在我们左下角的的Requests区就有了两个请求：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640681766877-7cdaa757-34ff-4f6f-8606-fbff738b9676.png#clientId=u4eb01b0d-14ef-4&from=paste&height=132&id=u4c1f6935&margin=%5Bobject%20Object%5D&name=image.png&originHeight=264&originWidth=390&originalType=binary&ratio=1&size=12811&status=done&style=none&taskId=u3ab5c7e8-8a16-4089-b2b3-8fa602e1e39&width=195\" alt=\"image.png\"></p>\n<h4 id=\"4-测试登陆\"><a href=\"#4-测试登陆\" class=\"headerlink\" title=\"4. 测试登陆\"></a>4. 测试登陆</h4><p>按照最初的想法，先调用验证码接口，查看到验证码：<code>zn22</code><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640683611672-ce0f90f7-f8d3-4363-a5d1-e0fe80dc9190.png#clientId=u4eb01b0d-14ef-4&from=paste&height=521&id=u4d687e0e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1042&originWidth=2544&originalType=binary&ratio=1&size=346273&status=done&style=none&taskId=u89dcd9ea-a95d-40c3-8e25-28d592a57b5&width=1272\" alt=\"image.png\"><br>然后使用<code>zn22</code>这个验证码加上我们自己的用户名密码去调用登陆接口，登陆请求的Body中有三个参数<code>username</code>、<code>password</code>、<code>captcha</code>分别对应着用户名、密码、验证码，这些我们根据实际情况去修改，如下图：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640683934041-dcfc086b-3a9b-47b5-8f3b-7f0b5fc37605.png#clientId=u4eb01b0d-14ef-4&from=paste&height=252&id=u4e470572&margin=%5Bobject%20Object%5D&name=image.png&originHeight=504&originWidth=858&originalType=binary&ratio=1&size=45399&status=done&style=none&taskId=u895971f9-f0f8-4b3c-92ef-493603f47b5&width=429\" alt=\"image.png\"><br>修改完请求体后点击EXCUTE执行，响应体中给我们提示报错了，提示<code>会话超时，请刷新页面后重试</code>：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640684089545-777b1546-e274-4dc7-ba3f-ff83945717cf.png#clientId=u4eb01b0d-14ef-4&from=paste&height=241&id=uebfd7d54&margin=%5Bobject%20Object%5D&name=image.png&originHeight=482&originWidth=840&originalType=binary&ratio=1&size=48262&status=done&style=none&taskId=u83836e9b-c26c-465f-a140-b986337051a&width=420\" alt=\"image.png\"><br>出现这种类似的错误信息，原因一定出在请求的请求头中，服务器对请求头进行了限制，比如验证Cookies、和为了防止跨站攻击而设置的验证<code>X-CSRF-TOKEN</code>等，所以才会出现此类情况。<br>接下来，分析POST登陆请求的请求头：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Host:www.luogu.com.cn\nConnection:keep-alive\nContent-Length:82\nsec-ch-ua:\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"96\", \"Google Chrome\";v=\"96\"\nX-CSRF-TOKEN:1640768448:U3hwS2h4azHVGgygSHLD9oaY7Z+4Bf9U8VwT1rWLEYQ=\nsec-ch-ua-mobile:?0\nUser-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\nContent-Type:application/json\nAccept:application/json, text/plain, */*\nX-Requested-With:XMLHttpRequest\nsec-ch-ua-platform:\"macOS\"\nOrigin:https://www.luogu.com.cn\nSec-Fetch-Site:same-origin\nSec-Fetch-Mode:cors\nSec-Fetch-Dest:empty\nReferer:https://www.luogu.com.cn/auth/login\nAccept-Encoding:gzip, deflate, br\nAccept-Language:en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7\nCookie:__client_id=d60b5430b77152d9bc168bca64ace8883254e127; _uid=0</code></pre>\n\n<p>上述的请求头中，除了<code>X-CSRF-TOKEN</code>和<code>Cookie</code>其他都不需要变动。<br><code>X-CSRF-TOKEN</code>可以在GET <a href=\"https://www.luogu.com.cn/auth/login\">https://www.luogu.com.cn/auth/login</a>的Body中找到，如下图：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640688812956-20ce959d-ce0f-4311-98f5-84c5a21cea30.png#clientId=u4eb01b0d-14ef-4&from=paste&height=743&id=u528184f2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1486&originWidth=1540&originalType=binary&ratio=1&size=184730&status=done&style=none&taskId=u343124f6-1b1c-4d8b-a016-c406532aa9c&width=770\" alt=\"image.png\"><br>而<code>Cookes</code>可以在Response -&gt; Cookies中找到，右键Value可以进行复制，如下图：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640689021227-5188ab7e-6e1a-48eb-823b-77b99fcdd62a.png#clientId=u4eb01b0d-14ef-4&from=paste&id=u4cc5b6bc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1382&originWidth=1496&originalType=binary&ratio=1&size=120132&status=done&style=none&taskId=ua6a3b551-06d2-464e-b4b5-224bec993e4\" alt=\"image.png\"><br>知道了这两个是如何获取的就可以继续我们的测试登陆了，具体步骤也就变成了：</p>\n<ol>\n<li>GET <a href=\"https://www.luogu.com.cn/auth/login\">https://www.luogu.com.cn/auth/login</a>，获取到<code>Cookies</code>和<code>X-CSRF-TOKEN</code>，并记录下来。</li>\n<li>带上<code>Cookies</code>去GET <a href=\"https://www.luogu.com.cn/api/verify/captcha?_t=1640680004860.4568\">https://www.luogu.com.cn/api/verify/captcha</a>，记录下获取到的验证码。</li>\n<li>POST <a href=\"https://www.luogu.com.cn/api/auth/userPassLogin\">https://www.luogu.com.cn/api/auth/userPassLogin</a>：需要修改Headers中的<code>Cookies</code>和<code>X-CSRF-TOKEN</code>，请求体Body中的<code>captcha</code>参数更换为步骤二获取到的验证码。</li>\n</ol>\n<p>登陆成功如下图，就可以拿<code>syncToken</code>以及响应的<code>Cookies</code>去请求需要登陆的接口了。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640700817965-537e93ad-4fa3-45e1-b067-6b70febf4e5f.png#clientId=u4eb01b0d-14ef-4&from=paste&height=500&id=u3a621cd4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1000&originWidth=2140&originalType=binary&ratio=1&size=140955&status=done&style=none&taskId=u57548a35-5a70-41ba-8b3e-2ea933b1fd8&width=1070\" alt=\"image.png\"></p>\n<h3 id=\"GET请求（URL详解）\"><a href=\"#GET请求（URL详解）\" class=\"headerlink\" title=\"GET请求（URL详解）\"></a>GET请求（URL详解）</h3><h4 id=\"前言-3\"><a href=\"#前言-3\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>上一篇介绍了Composer的功能，可以模拟get和post请求，get请求有些是不带参数的，这种比较容易，直接放到url地址栏就行。有些get请求会带有参数，本篇详细介绍url地址格式。</p>\n<h4 id=\"url详解\"><a href=\"#url详解\" class=\"headerlink\" title=\"url详解\"></a>url详解</h4><ol>\n<li>url就是我们平常打开百度在地址栏输入的：<a href=\"https://link.zhihu.com/?target=https://www.baidu.com/\">https://www.baidu.com</a>,如下图，这个是最简单的url地址，打开的是百度的主页<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640701252513-7680a86d-de60-4bce-b171-5473698d02f7.png#clientId=u4eb01b0d-14ef-4&from=paste&height=109&id=u243fddf2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=218&originWidth=872&originalType=binary&ratio=1&size=20716&status=done&style=none&taskId=u3de04a31-96bf-4429-a26e-da56e92cc34&width=436\" alt=\"image.png\"></li>\n<li>再看一个稍微复杂一点的url，在百度输入框输入：洛谷</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640701349404-6f4d7e89-e811-4073-bb88-761e64113ca9.png#clientId=u4eb01b0d-14ef-4&from=paste&height=290&id=uae1bd74d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=580&originWidth=1550&originalType=binary&ratio=1&size=258004&status=done&style=none&taskId=u099d85b7-adfd-4682-9bd7-f001a8fe6b7&width=775\" alt=\"image.png\"></p>\n<ol start=\"3\">\n<li>查看url地址栏，对比之前的百度首页url地址，后面多了很多参数。当然最主要的参数是:wd=上海悠悠博客园（后面的一大串可以暂时忽略）</li>\n<li>那么问题来了，这些参数有什么作用呢？<br>可以做个简单的对比，在地址栏分别输入：<br><a href=\"https://link.zhihu.com/?target=https://www.baidu.com/\">https://www.baidu.com</a><br><a href=\"https://www.baidu.com/s?wd=%E6%B4%9B%E8%B0%B7\">https://www.baidu.com/s?wd=洛谷</a><br>对比打开的页面有什么不一样，现在知道作用了吧，也就是说这个多的”/s？wd=洛谷”就是搜索的结果页面</li>\n</ol>\n<h4 id=\"url解析\"><a href=\"#url解析\" class=\"headerlink\" title=\"url解析\"></a>url解析</h4><ol>\n<li>以<a href=\"https://www.baidu.com/s?wd=%E6%B4%9B%E8%B0%B7\">https://www.baidu.com/s?wd=洛谷</a>这个URL请求为例</li>\n<li>那么一个完整的url地址，基本格式：<code>https://host:port/path?xxx=aaa&amp;ooo=bbb</code></li>\n</ol>\n<ul>\n<li>http/https：这个是协议类型，如图中所示</li>\n<li>host:服务器的IP地址或者域名，如图中2所示</li>\n<li>port:HTTP服务器的默认端口是80，这种情况下端口号可以省略。<br>如果使用了别的端口，必须指明，例如：192.168.3.111:8080，这里的8080就是端口</li>\n<li>path:访问资源的路径,如图中3所示/s (图中3是把path和请求参数放一起了)</li>\n<li>？:url里面的？这个符号是个分割线，用来区分问号前面的是path，问号后面的是参数</li>\n<li>url-params:问号后面的是请求参数，格式：xxx=aaa，如图4区域就是请求参数</li>\n<li>&amp;：多个参数用&amp;符号连接</li>\n</ul>\n<h4 id=\"UrlEncode编码\"><a href=\"#UrlEncode编码\" class=\"headerlink\" title=\"UrlEncode编码\"></a>UrlEncode编码</h4><ol>\n<li>如果url地址的参数带有中文的，一般在url里面会是这样的，如第二点里的wd=%E6%B4%9B%E8%B0%B7。像看到%B4这种编码的就是经过url编码过的，需要解码就能看到是什么中文了</li>\n<li>用urlencode在线编码/解码工具，地址：<a href=\"https://www.urldecoder.org/\">https://www.urldecoder.org/</a></li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640702305942-3954b68c-a956-4bba-81e2-25222443f9c5.png#clientId=u4eb01b0d-14ef-4&from=paste&height=514&id=e6hEL&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1028&originWidth=1296&originalType=binary&ratio=1&size=101970&status=done&style=none&taskId=u61e52925-c969-44c2-9d8e-c32a529ed71&width=648\" alt=\"image.png\"></p>\n<h4 id=\"请求参数（params）\"><a href=\"#请求参数（params）\" class=\"headerlink\" title=\"请求参数（params）\"></a>请求参数（params）</h4><ol>\n<li>在url里面请求参数一般叫params，每个参数对应的都有name和value值</li>\n<li>多个参数情况如下：</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640702120243-36a51902-8455-4de3-be58-cdd9b4415bd2.png#clientId=u4eb01b0d-14ef-4&from=paste&height=301&id=u49b080c6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=602&originWidth=1322&originalType=binary&ratio=1&size=54926&status=done&style=none&taskId=uf9718da2-c8b4-4dac-b051-7afae7b74e4&width=661\" alt=\"image.png\"></p>\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><h3 id=\"POST请求（body）\"><a href=\"#POST请求（body）\" class=\"headerlink\" title=\"POST请求（body）\"></a>POST请求（body）</h3><p>前言上一篇讲过get请求的参数都在url里，post的请求相对于get请求多了个body部分，本篇就详细讲解下body部分参数的几种形式。<br>注意：post请求的参数可以放在url，也可以放在body，也可以同时放在url和body，当然post请求也可以不带参数。<br>只是一般来说，post请求的参数习惯放到body部分</p>\n<h4 id=\"body数据类型\"><a href=\"#body数据类型\" class=\"headerlink\" title=\"body数据类型\"></a>body数据类型</h4><p>常见的post提交数据类型有四种：</p>\n<ol>\n<li>第一种：application/json：这是最常见的json格式，也是非常友好的深受小伙伴喜欢的一种，比如：</li>\n</ol>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">{“input1”:”xxx”,”input2”:”ooo”,”remember”:false}</code></pre>\n\n<ol start=\"2\">\n<li>第二种：application/x-www-form-urlencoded：浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">input1=xxx&amp;input2=ooo&amp;remember=false</code></pre>\n\n<ol start=\"3\">\n<li>第三种：multipart/form-data:这一种是表单格式的，数据类型如下：</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">WebKitFormBoundaryrGKCBY7qhFd3TrwA \nContent-Disposition: form-data; \nname=”file”; \nfilename=”chrome.png” \nContent-Type: image/png PNG\ncontent of chrome.png \nWebKitFormBoundaryrGKCBY7qhFd3TrwA</code></pre>\n\n<ol start=\"4\">\n<li>第四种：text/xml:这种直接传的xml格式</li>\n</ol>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!--?xml version=\"1.0\"?--&gt;\n&lt;methodcall&gt;\n\t&lt;methodname&gt;examples.getStateName&lt;/methodname&gt;\n\t&lt;params&gt;\n\t\t&lt;param&gt;\n\t\t\t&lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt;\n\t\t&lt;/param&gt;\n\t&lt;/params&gt;\n&lt;/methodcall&gt;</code></pre>\n\n<h4 id=\"x-www-form-urlencoded\"><a href=\"#x-www-form-urlencoded\" class=\"headerlink\" title=\"x-www-form-urlencoded\"></a>x-www-form-urlencoded</h4><p>浏览器的原生 <form> 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。请求类似于下面这样（无关的请求头在本文中都省略掉了）：</form></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">POST http://www.example.com HTTP/1.1\nContent-Type: application/x-www-form-urlencoded;charset=utf-8\n\ntitle=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3</code></pre>\n\n<p>首先，Content-Type 被指定为 application/x-www-form-urlencoded；其次，提交的数据按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码。大部分服务端语言都对这种方式有很好的支持。例如 PHP 中，<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"33.25ex\" height=\"2.283ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -759 14696.5 1009\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"></g><g data-mml-node=\"mi\" transform=\"translate(33,-150) scale(0.707)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(614,0)\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1377,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2022,0)\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2726,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3004,0)\"><path data-c=\"2035\" d=\"M12 501Q12 527 31 542T63 558Q73 560 77 560Q114 560 128 528Q133 518 188 293T244 61Q244 56 223 50T195 43Q192 43 190 45T102 263T14 486Q12 496 12 501Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3279,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3640,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3985,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4346,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(4644,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(499,363) scale(0.707)\"><path data-c=\"2032\" d=\"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5387.5,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5665.5,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">可</text></g><g data-mml-node=\"mi\" transform=\"translate(6565.5,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">以</text></g><g data-mml-node=\"mi\" transform=\"translate(7465.5,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">获</text></g><g data-mml-node=\"mi\" transform=\"translate(8365.5,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">取</text></g><g data-mml-node=\"mi\" transform=\"translate(9265.5,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">到</text></g><g data-mml-node=\"mi\" transform=\"translate(10165.5,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10526.5,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(10871.5,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(11232.5,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(11530.5,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(11996.5,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">的</text></g><g data-mml-node=\"mi\" transform=\"translate(12896.5,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">值</text></g><g data-mml-node=\"mi\" transform=\"translate(13796.5,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">，</text></g></g></g></svg></mjx-container>_POST[‘sub’] 可以得到 sub 数组。<br>很多时候，我们用 Ajax 提交数据时，也是使用这种方式。例如 <a href=\"http://jquery.com/\">JQuery</a> 和 QWrap 的 Ajax，Content-Type 默认值都是「application/x-www-form-urlencoded;charset=utf-8」。</p>\n<h2 id=\"6-HTTP协议简介\"><a href=\"#6-HTTP协议简介\" class=\"headerlink\" title=\"6. HTTP协议简介\"></a>6. HTTP协议简介</h2><h3 id=\"什么是HTTP\"><a href=\"#什么是HTTP\" class=\"headerlink\" title=\"什么是HTTP\"></a>什么是HTTP</h3><p>1.HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。<br>2.HTTP（HyperText Transfer Protocol）协议是基于TCP的应用层协议，它不关心数据传输的细节，主要是用来规定客户端和服务端的数据传输格式，最初是用来向客户端传输HTML页面的内容。默认端口是80<br>3.http（超文本传输协议）是一个基于请求与响应模式的、无状态的、应用层的协议</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640619386343-78d9e46e-62bc-423c-b83e-ee57ccc6796f.png#clientId=ud5a02840-c4ce-4&from=paste&height=91&id=udb6ab925&margin=%5Bobject%20Object%5D&name=image.png&originHeight=181&originWidth=551&originalType=binary&ratio=1&size=91585&status=done&style=none&taskId=ub4f70909-adf1-4e4d-a0a4-920dd5b7d6d&width=275.5\" alt=\"image.png\"></p>\n<h3 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h3><p>1.HTTP请求报文主要由请求行、请求头部、空一行、请求正文4部分组成<br>（当然，如果不算空的一行，那就是3个部分）</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640619434832-7ad09a62-04a8-4df4-8570-f9b3a3681512.png#clientId=ud5a02840-c4ce-4&from=paste&height=83&id=u16487a5b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=165&originWidth=466&originalType=binary&ratio=1&size=29770&status=done&style=none&taskId=u34948465-9320-4075-9eb7-2b2ea78ff6f&width=233\" alt=\"image.png\"></p>\n<p>2.下图是fiddler工具抓的post请求报文（工具使用看fiddler篇），可以对照上图，更清楚的理解http的请求报文内容。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640619447803-80eee587-fc38-4bb3-b1f4-8d88d93a31c7.png#clientId=ud5a02840-c4ce-4&from=paste&height=304&id=ub4e87829&margin=%5Bobject%20Object%5D&name=image.png&originHeight=405&originWidth=689&originalType=binary&ratio=1&size=286034&status=done&style=none&taskId=u84122fdc-c376-45d9-9187-231148bd61e&width=517\" alt=\"image.png\"></p>\n<h3 id=\"响应报文\"><a href=\"#响应报文\" class=\"headerlink\" title=\"响应报文\"></a>响应报文</h3><p>1.HTTP响应报文主要由状态行、消息报头、空一行、响应正文4部分组成<br>（当然，如果不算空的一行，那就是3个部分）<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640619475314-4d6b4c02-c0f1-48a6-b09e-3b4bf2e23bff.png#clientId=ud5a02840-c4ce-4&from=paste&height=89&id=u69d64ef3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=177&originWidth=480&originalType=binary&ratio=1&size=42588&status=done&style=none&taskId=u37c7f229-951a-4edf-83c0-c25977643ba&width=240\" alt=\"image.png\"><br>2.下图就是一个请求的响应内容，用fiddler抓包工具可以查看<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640619495356-6aabf974-1989-42a7-a231-d22a9010b1e8.png#clientId=ud5a02840-c4ce-4&from=paste&height=266&id=u568c6bf6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=305&originWidth=683&originalType=binary&ratio=1&size=101063&status=done&style=none&taskId=ud945d181-b577-4cf6-bce3-d4fe5c0bebc&width=595.5\" alt=\"image.png\"></p>\n<h3 id=\"完整的HTTP内容\"><a href=\"#完整的HTTP内容\" class=\"headerlink\" title=\"完整的HTTP内容\"></a>完整的HTTP内容</h3><ol>\n<li>一个完整的http协议其实就两块内容，一个是发的请求，一个服务端给的响应。</li>\n<li>以下是请求<a href=\"https://link.zhihu.com/?target=https://github.com/timeline.json\">https://github.com/timeline.json</a> 这个地址后，用fiddler抓包导出为文本，查看完整的http请求内容。（具体操作查看《fiddler 1.10会话保存》）</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640619802283-8e0c2a83-8d8c-49f9-9227-442b22f3687e.png#clientId=ud5a02840-c4ce-4&from=paste&height=249&id=u56bae526&margin=%5Bobject%20Object%5D&name=image.png&originHeight=498&originWidth=720&originalType=binary&ratio=1&size=256217&status=done&style=none&taskId=u2c20f1db-2b85-404c-987b-d02af12f5f1&width=360\" alt=\"image.png\"><br>内容如下：<br>以下是请求报文</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">GET https://github.com/timeline.json HTTP/1.1\nHost: github.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3\nAccept-Encoding: gzip, deflate, br\nCookie: xxx(已省略)</code></pre>\n\n<p>以下是请求报文</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">GET https://github.com/timeline.json HTTP/1.1\nHost: github.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3\nAccept-Encoding: gzip, deflate, br\nCookie: xxx(已省略)\nX-Request-Id: d09e199dc290c6f0dc79fe49007069ab\nX-Runtime: 0.004161\nContent-Security-Policy: xxx(已省略)\nStrict-Transport-Security: xxx(已省略)\nX-Content-Type-Options: nosniff\nX-Frame-Options: deny\nX-XSS-Protection: 1; mode=block\nX-Runtime-rack: 0.007388\nX-GitHub-Request-Id: FE36:2B0A9:177175F:23C092D:594FD998\nContent-Length: 379</code></pre>\n\n<p>以下是响应正文（json格式）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">{“message”:”Hello there, wayfaring stranger. If you’re reading this then you probably didn’t see our blog post a couple of years back announcing that this API would go away: http://git.io/17AROg Fear not, you should be able to get what you need from the shiny new Events API instead.”,”documentation_url”:”https://developer.github.com/v3/activity/events/#list-public-events”}</code></pre>\n\n<h3 id=\"请求行\"><a href=\"#请求行\" class=\"headerlink\" title=\"请求行\"></a>请求行</h3><h4 id=\"8种请求行\"><a href=\"#8种请求行\" class=\"headerlink\" title=\"8种请求行\"></a>8种请求行</h4><p>请求行有三个主要参数：请求方法、url、协议版本。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12654026/1640619977741-e90599f2-d723-465d-96b2-f2140879645d.png#clientId=ud5a02840-c4ce-4&from=paste&height=206&id=u7ea8c926&margin=%5Bobject%20Object%5D&name=image.png&originHeight=227&originWidth=554&originalType=binary&ratio=1&size=52238&status=done&style=none&taskId=u7d0a54bb-1801-431e-be64-4d73ec63556&width=502\" alt=\"image.png\"></p>\n<h4 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h4><p>请求方式简介get请求指定的页面信息，并返回实体主体。post向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。HEAD类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头OPTIONS返回服务器针对特定资源所支持的HTTP请求方法，也可以利用向web服务器发送‘*’的请求来测试服务器的功能性PUT向指定资源位置上传其最新内容DELETE请求服务器删除Request-URL所标识的资源TRACE回显服务器收到的请求，主要用于测试或诊断CONNECTHTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</p>\n<ul>\n<li><strong>注意：</strong><br>1）方法名称是区分大小写的。<br>2）最常见的的就是通常说的get和post方法。</li>\n</ul>\n<h4 id=\"url详解-1\"><a href=\"#url详解-1\" class=\"headerlink\" title=\"url详解\"></a>url详解</h4><p>1.打开百度，在搜索框输入任意文字，搜索后，复制地址栏的url地址：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">https://www.baidu.com/s?wd=%E4%B8%8A%E6%B5%B7%E6%82%A0%E6%82%A0%E5%8D%9A%E5%AE%A2&amp;rsv_spt=1&amp;rsv_iqid=0x91baaabd00070ba2&amp;issp=1&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2</code></pre>\n\n<p>2.那么一个完整的url地址，基本格式如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">https://host:port/path?xxx=aaa&amp;ooo=bbb</code></pre>\n\n<ul>\n<li>http/https：这个是协议类型，如图中1所示</li>\n<li>host:服务器的IP地址或者域名，如图中2所示</li>\n<li>port:HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如：192.168.3.111:8080，这里的8080就是端口</li>\n<li>path:访问资源的路径,如图中3所示/s (图中3是把path和请求参数放一起了)</li>\n<li>？:url里面的？这个符号是个分割线，用来区分问号前面的是path，问号后面的是参数</li>\n<li>url-params:问号后面的是请求参数，格式：xxx=aaa，如图4区域就是请求参数</li>\n<li>&amp;：多个参数用&amp;符号连接</li>\n</ul>\n<h4 id=\"协议版本\"><a href=\"#协议版本\" class=\"headerlink\" title=\"协议版本\"></a>协议版本</h4><p>根据HTTP标准，HTTP请求可以使用多种请求方法。<br>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。<br>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>\n","text":" Fiddler EveryWhere 环境安装1. 安装Fiddler 功能强大，同时占用空间小，能记录所有的客户端和服务器端的 http 和https 请求，方便测试人员进行接口测试。官方下载地址：https://www.telerik.com/fiddler/fiddler...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"测试","slug":"测试","count":1,"path":"api/categories/测试.json"}],"tags":[{"name":"软件测试","slug":"软件测试","count":1,"path":"api/tags/软件测试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Fiddler-EveryWhere-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">Fiddler EveryWhere 环境安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">1. 安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2. 使用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Fiddler-Everywhere-%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">Fiddler Everywhere 的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E8%AF%81%E4%B9%A6%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">1. 证书问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E8%AF%81%E4%B9%A6%EF%BC%9F\"><span class=\"toc-text\">为什么需要证书？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E8%AF%81%E4%B9%A6%EF%BC%9F\"><span class=\"toc-text\">什么是证书？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%AF%BC%E5%85%A5%E8%AF%81%E4%B9%A6%EF%BC%9F\"><span class=\"toc-text\">抓包工具为什么需要导入证书？</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E6%A0%B9%E8%AF%81%E4%B9%A6\"><span class=\"toc-text\">安装根证书</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E8%AF%81%E4%B9%A6\"><span class=\"toc-text\">删除证书</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E6%89%8B%E6%9C%BAAPP%E6%8A%93%E5%8C%85\"><span class=\"toc-text\">2. 手机APP抓包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">设置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E6%9C%AC%E6%9C%BAIP\"><span class=\"toc-text\">查看本机IP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%8B%E6%9C%BA%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">手机设置代理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%93%E5%8F%96HTTPS%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">抓取HTTPS请求</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E6%9F%A5%E7%9C%8BGET%E5%92%8CPOST%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">3. 查看GET和POST请求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80-1\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GET%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">GET请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#POST%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">POST请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E6%89%BE%E5%87%BA%E9%9C%80%E8%A6%81%E7%9A%84%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">如何找出需要的请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GET%E5%92%8CPOST%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">GET和POST请求的区别</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">4. 工具介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%9A%E8%AF%9D%E6%A1%86\"><span class=\"toc-text\">会话框</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Request%E5%92%8CResponse\"><span class=\"toc-text\">Request和Response</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#decode%E8%A7%A3%E7%A0%81\"><span class=\"toc-text\">decode解码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%EF%BC%88Composer%EF%BC%89\"><span class=\"toc-text\">5. 接口测试（Composer）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80-2\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Composer%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">Composer简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JSON%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">JSON数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%8B%9FGET%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">模拟GET请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%8B%9FPOST%E8%AF%B7%E6%B1%82-%E5%AE%9E%E6%88%98%E7%99%BB%E9%99%86%E6%B4%9B%E8%B0%B7\"><span class=\"toc-text\">模拟POST请求(实战登陆洛谷)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">1. 过滤</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%8A%93%E5%8F%96%E9%AA%8C%E8%AF%81%E7%A0%81%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">2. 抓取验证码接口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%8A%93%E5%8F%96%E7%99%BB%E9%99%86%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">3. 抓取登陆接口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E6%B5%8B%E8%AF%95%E7%99%BB%E9%99%86\"><span class=\"toc-text\">4. 测试登陆</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GET%E8%AF%B7%E6%B1%82%EF%BC%88URL%E8%AF%A6%E8%A7%A3%EF%BC%89\"><span class=\"toc-text\">GET请求（URL详解）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80-3\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#url%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">url详解</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#url%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">url解析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#UrlEncode%E7%BC%96%E7%A0%81\"><span class=\"toc-text\">UrlEncode编码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%EF%BC%88params%EF%BC%89\"><span class=\"toc-text\">请求参数（params）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#POST%E8%AF%B7%E6%B1%82%EF%BC%88body%EF%BC%89\"><span class=\"toc-text\">POST请求（body）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#body%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">body数据类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#x-www-form-urlencoded\"><span class=\"toc-text\">x-www-form-urlencoded</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-HTTP%E5%8D%8F%E8%AE%AE%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">6. HTTP协议简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFHTTP\"><span class=\"toc-text\">什么是HTTP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87\"><span class=\"toc-text\">请求报文</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87\"><span class=\"toc-text\">响应报文</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E7%9A%84HTTP%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">完整的HTTP内容</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E8%A1%8C\"><span class=\"toc-text\">请求行</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8%E7%A7%8D%E8%AF%B7%E6%B1%82%E8%A1%8C\"><span class=\"toc-text\">8种请求行</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">请求方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#url%E8%AF%A6%E8%A7%A3-1\"><span class=\"toc-text\">url详解</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E8%AE%AE%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">协议版本</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Jx","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"2021年度总结","uid":"10e799bf47669bd7fff35712248e1c6e","slug":"life/2021年度总结","date":"2021-12-31T12:25:41.000Z","updated":"2022-07-14T04:43:58.290Z","comments":true,"path":"api/articles/life/2021年度总结.json","keywords":null,"cover":[],"text":" 前言写下此文的时候，2021已接近尾声，2022的钟声即将敲响，一年了，发生了什么呢，我又做成了什么呢… 月度 1月：创业园的师兄接到了个项目给我们做，起初这个项目叫维修小店，也就是做一个维修平台的小程序，于是学习了uni-app。 2月：根据产品原型图写前端… 3月：继续维修...","link":"","photos":[],"count_time":{"symbolsCount":780,"symbolsTime":"1 mins."},"categories":[{"name":"生活","slug":"生活","count":2,"path":"api/categories/生活.json"}],"tags":[{"name":"人生","slug":"人生","count":2,"path":"api/tags/人生.json"},{"name":"2021","slug":"2021","count":1,"path":"api/tags/2021.json"},{"name":"总结","slug":"总结","count":1,"path":"api/tags/总结.json"}],"author":{"name":"Jx","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"《软件开发工具》","uid":"2cc8b90b0dba95b11728dd29144d57a6","slug":"exam/tool for software development","date":"2021-10-03T11:37:25.000Z","updated":"2022-11-12T00:06:46.769Z","comments":true,"path":"api/articles/exam/tool for software development.json","keywords":null,"cover":[],"text":" 第1章 绪论软件产品的质量、效率、价格已成为各方关注的十分重要的问题。 1.1 软件开发工具的由来 操作系统、汇编程序、汇编系统时软件开发中必不可少的工具，但一般不把他们归入软件开发工具的范围，类似的还有磁盘的处理、病毒的防治、系统的备份等。 软件开发工具的范围（概念）：在高级...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"应试","slug":"应试","count":4,"path":"api/categories/应试.json"}],"tags":[{"name":"升本","slug":"升本","count":3,"path":"api/tags/升本.json"},{"name":"自考","slug":"自考","count":2,"path":"api/tags/自考.json"}],"author":{"name":"Jx","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"这个人很菜，什么也没有留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}